{"version":3,"sources":["../../../src/action/actions/route.js"],"names":["renderParams","params","data","ret","JSON","parse","mustache","render","stringify","ex","console","error","route","options","target","paramsKey","undefined","renderTarget"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAEA,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAChC,QAAIC,MAAMF,MAAV;AACA,QAAI;AACAE,cAAMC,KAAKC,KAAL,CACFC,mBAASC,MAAT,CAAgBH,KAAKI,SAAL,CAAeP,MAAf,CAAhB,EAAwCC,IAAxC,CADE,CAAN;AAGH,KAJD,CAIE,OAAOO,EAAP,EAAW;AACTC,gBAAQC,KAAR,CAAc,uCAAd,EAAuDF,EAAvD;AACH;AACD,WAAON,GAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASS,KAAT,CAAeC,OAAf,EAAwB;AACpB,QAAIX,OAAO,sBAAOW,QAAQX,IAAR,IAAiB,QAAQ,KAAKA,IAArC,CAAX;AAAA,QACIY,SAAS,sBAAOD,QAAQC,MAAf,CADb;AAAA,QAEIb,eAFJ;;AAIA,QAAIY,QAAQZ,MAAR,IAAkBY,QAAQE,SAA9B,EAAyC;AACrCb,eAAO,qBAAMA,IAAN,EAAYW,QAAQA,QAAQE,SAAhB,CAAZ,CAAP;AACH;;AAEDd,aAASY,QAAQZ,MAAR,GAAiBD,aAAaa,QAAQZ,MAArB,EAA6BC,IAA7B,CAAjB,GAAsDc,SAA/D;;AAEA,QAAIH,QAAQI,YAAZ,EAA0B;AACtBH,iBAASR,mBAASC,MAAT,CAAgBO,MAAhB,EAAwBZ,IAAxB,CAAT;AACH;;AAED,2BAASY,MAAT,EAAiBb,MAAjB;AACH;;AAED,mCAAgB,EAAEW,YAAF,EAAhB","file":"route.js","sourcesContent":["import { setRoute } from 'scalejs.navigation';\nimport { unwrap } from 'knockout';\nimport { merge } from 'scalejs';\nimport mustache from 'mustache';\n\nimport { registerActions } from '../actionModule';\n\nfunction renderParams(params, data) {\n    let ret = params;\n    try {\n        ret = JSON.parse(\n            mustache.render(JSON.stringify(params), data)\n        );\n    } catch (ex) {\n        console.error('Unable to JSON parse/stringify params', ex);\n    }\n    return ret;\n}\n\n/**\n * Route action to re-route to another page\n *\n * @module route\n *\n * @param {object} node\n *  The configuration object for the route action\n * @param {string} node.type='action'\n *  The type of the node is action\n * @param {string} node.actionType='route'\n *  The actionType of the node is route\n * @param {string} node.text\n *  The text to display on the button\n * @param {object} node.options\n *  The options pertaining to the route action\n * @param {string} node.options.target\n *  The uri to route to\n * @param {object} node.options.data\n *  The data to send along when routing\n * @param {object} node.options.params\n *  Key-value pairs to merge pass along as data when routing\n * @param {string} node.options.paramsKey\n *  The key of the data for the parameters\n *\n * @example\n * {\n *     \"type\": \"action\",\n *     \"actionType\": \"route\",\n *     \"text\": \"Add User\",\n *     \"options\": {\n *         \"target\": \"add-user\"\n *     }\n *  }\n */\nfunction route(options) {\n    let data = unwrap(options.data || (this && this.data)),\n        target = unwrap(options.target),\n        params;\n\n    if (options.params && options.paramsKey) {\n        data = merge(data, options[options.paramsKey]);\n    }\n\n    params = options.params ? renderParams(options.params, data) : undefined;\n\n    if (options.renderTarget) {\n        target = mustache.render(target, data);\n    }\n\n    setRoute(target, params);\n}\n\nregisterActions({ route });"]}