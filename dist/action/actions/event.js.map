{"version":3,"sources":["../../../src/action/actions/event.js"],"names":["renderParams","params","data","ret","JSON","parse","mustache","render","stringify","ex","console","error","event","options","optionData","paramsKey","useOptions","target"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAEA,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAChC,QAAIC,MAAMF,MAAV;AACA,QAAI;AACAE,cAAMC,KAAKC,KAAL,CACFC,mBAASC,MAAT,CAAgBH,KAAKI,SAAL,CAAeP,MAAf,CAAhB,EAAwCC,IAAxC,CADE,CAAN;AAGH,KAJD,CAIE,OAAOO,EAAP,EAAW;AACTC,gBAAQC,KAAR,CAAc,uCAAd,EAAuDF,EAAvD;AACH;;AAED,WAAON,GAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAASS,KAAT,CAAeC,OAAf,EAAwB;AACpB,QAAIX,OAAO,sBAAO,QAAQ,KAAKA,IAApB,CAAX;AAAA,QACIY,aAAaD,QAAQX,IAAR,IAAgB,EADjC;AAEA,QAAID,SAASY,QAAQZ,MAArB;;AAEA,QAAIY,QAAQE,SAAZ,EAAuB;AACnBd,iBAAS,qBAAMA,UAAU,EAAhB,EAAoBY,QAAQA,QAAQE,SAAhB,CAApB,CAAT;AACH;;AAED,QAAIF,QAAQG,UAAZ,EAAwB;AACpBF,qBAAaD,OAAb;AACH;;AAED,QAAIZ,UAAUY,QAAQb,YAAR,KAAyB,KAAvC,EAA8C;AAC1CC,iBAASD,aAAaC,MAAb,EAAqB,qBAAMC,IAAN,EAAYY,UAAZ,CAArB,CAAT;AACH;;AAED,yBAAO,sBAAOD,QAAQI,MAAf,CAAP,EAA+BhB,MAA/B;AACH;;AAED,mCAAgB,EAAEW,YAAF,EAAhB","file":"event.js","sourcesContent":["import { notify } from 'scalejs.messagebus';\nimport { unwrap } from 'knockout';\nimport { merge } from 'scalejs';\nimport mustache from 'mustache';\n\nimport { registerActions } from '../actionModule';\n\nfunction renderParams(params, data) {\n    let ret = params;\n    try {\n        ret = JSON.parse(\n            mustache.render(JSON.stringify(params), data)\n        );\n    } catch (ex) {\n        console.error('Unable to JSON parse/stringify params', ex);\n    }\n\n    return ret;\n}\n\n/**\n * Event action to notify an event to all its subscribers\n *\n * @module event\n *\n * @param {object} node\n *  The configuration object for the event action\n * @param {string} node.type='action'\n *  The type of the node is action\n * @param {string} node.actionType='event'\n *  The actionType of the node is event\n * @param {object} node.options\n *  The options pertaining to the event action\n * @param {string} node.options.target\n *  The name of the channel to notify\n * @param {object|array} node.options.params\n *  Key-value pairs to pass along as data with the event that will be mustache rendered\n * @param {string} node.options.paramsKey\n *  The key of the data for the parameters\n * @param {boolean} node.options.useOptions\n *  Boolean to determine whether to use the options as the data to pass along or to use the params\n * @param {object} node.options.data\n *  Data object to pass along with the event\n *\n * @example\n *  {\n *        \"type\": \"action\",\n *        \"actionType\": \"event\",\n *        \"options\": {\n *            \"target\": \"my_grid.add\",\n *            \"params\": [\n *                {\n *                    \"name\": \"{{request.name}}\",\n *                    \"endpoint\": \"{{request.uri}}\",\n *                    \"status\": \"{{status}}\"\n *                }\n *            ],\n *            \"useOptions\": true\n *        }\n *    }\n */\nfunction event(options) {\n    let data = unwrap(this && this.data),\n        optionData = options.data || {};\n    let params = options.params;\n\n    if (options.paramsKey) {\n        params = merge(params || {}, options[options.paramsKey]);\n    }\n\n    if (options.useOptions) {\n        optionData = options;\n    }\n\n    if (params && options.renderParams !== false) {\n        params = renderParams(params, merge(data, optionData));\n    }\n\n    notify(unwrap(options.target), params);\n}\n\nregisterActions({ event });\n\n"]}