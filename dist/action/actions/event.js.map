{"version":3,"sources":["../../../src/action/actions/event.js"],"names":["renderParams","params","data","ret","JSON","parse","render","stringify","ex","console","error","event","options","optionData","paramsKey","useOptions","target"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAEA,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAChC,QAAIC,MAAMF,MAAV;AACA,QAAI;AACAE,cAAMC,KAAKC,KAAL,CACF,mBAASC,MAAT,CAAgBF,KAAKG,SAAL,CAAeN,MAAf,CAAhB,EAAwCC,IAAxC,CADE,CAAN;AAGH,KAJD,CAIE,OAAOM,EAAP,EAAW;AACTC,gBAAQC,KAAR,CAAc,uCAAd,EAAuDF,EAAvD;AACH;;AAED,WAAOL,GAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAASQ,KAAT,CAAeC,OAAf,EAAwB;AACpB,QAAIV,OAAO,sBAAO,QAAQ,KAAKA,IAApB,CAAX;AAAA,QACIW,aAAaD,QAAQV,IAAR,IAAgB,EADjC;AAEA,QAAID,SAASW,QAAQX,MAArB;;AAEA,QAAIW,QAAQE,SAAZ,EAAuB;AACnBb,iBAAS,qBAAMA,UAAU,EAAhB,EAAoBW,QAAQA,QAAQE,SAAhB,CAApB,CAAT;AACH;;AAED,QAAIF,QAAQG,UAAZ,EAAwB;AACpBF,qBAAaD,OAAb;AACH;;AAED,QAAIX,UAAUW,QAAQZ,YAAR,KAAyB,KAAvC,EAA8C;AAC1CC,iBAASD,aAAaC,MAAb,EAAqB,qBAAMC,IAAN,EAAYW,UAAZ,CAArB,CAAT;AACH;;AAED,yBAAO,sBAAOD,QAAQI,MAAf,CAAP,EAA+Bf,MAA/B;AACH;;AAED,mCAAgB,EAAEU,YAAF,EAAhB","file":"event.js","sourcesContent":["import { notify } from 'scalejs.messagebus';\r\nimport { unwrap } from 'knockout';\r\nimport { merge } from 'scalejs';\r\nimport mustache from 'mustache';\r\n\r\nimport { registerActions } from '../actionModule';\r\n\r\nfunction renderParams(params, data) {\r\n    let ret = params;\r\n    try {\r\n        ret = JSON.parse(\r\n            mustache.render(JSON.stringify(params), data)\r\n        );\r\n    } catch (ex) {\r\n        console.error('Unable to JSON parse/stringify params', ex);\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n/**\r\n * Event action to notify an event to all its subscribers\r\n *\r\n * @module event\r\n *\r\n * @param {object} node\r\n *  The configuration object for the event action\r\n * @param {string} node.type='action'\r\n *  The type of the node is action\r\n * @param {string} node.actionType='event'\r\n *  The actionType of the node is event\r\n * @param {object} node.options\r\n *  The options pertaining to the event action\r\n * @param {string} node.options.target\r\n *  The name of the channel to notify\r\n * @param {object|array} node.options.params\r\n *  Key-value pairs to pass along as data with the event that will be mustache rendered\r\n * @param {string} node.options.paramsKey\r\n *  The key of the data for the parameters\r\n * @param {boolean} node.options.useOptions\r\n *  Boolean to determine whether to use the options as the data to pass along or to use the params\r\n * @param {object} node.options.data\r\n *  Data object to pass along with the event\r\n *\r\n * @example\r\n *  {\r\n *        \"type\": \"action\",\r\n *        \"actionType\": \"event\",\r\n *        \"options\": {\r\n *            \"target\": \"my_grid.add\",\r\n *            \"params\": [\r\n *                {\r\n *                    \"name\": \"{{request.name}}\",\r\n *                    \"endpoint\": \"{{request.uri}}\",\r\n *                    \"status\": \"{{status}}\"\r\n *                }\r\n *            ],\r\n *            \"useOptions\": true\r\n *        }\r\n *    }\r\n */\r\nfunction event(options) {\r\n    let data = unwrap(this && this.data),\r\n        optionData = options.data || {};\r\n    let params = options.params;\r\n\r\n    if (options.paramsKey) {\r\n        params = merge(params || {}, options[options.paramsKey]);\r\n    }\r\n\r\n    if (options.useOptions) {\r\n        optionData = options;\r\n    }\r\n\r\n    if (params && options.renderParams !== false) {\r\n        params = renderParams(params, merge(data, optionData));\r\n    }\r\n\r\n    notify(unwrap(options.target), params);\r\n}\r\n\r\nregisterActions({ event });\r\n\r\n"]}