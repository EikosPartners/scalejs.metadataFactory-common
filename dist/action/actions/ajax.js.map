{"version":3,"sources":["../../../src/action/actions/ajax.js"],"names":["ajax","options","args","context","data","unwrap","target","cloneDeep","optionData","uri","render","query","toJS","dictionary","callback","nextAction","dataAndResults","results","sendDataFromKey","Array","isArray","sendDataKeys","reduce","o","k","receiverKey","supplierKey","value","Object","keys","forEach","key","console","warn","trim","error","opts","err","errorActions","nextActions","item","errorAction","message","response","request","call","action","apply","arguments"],"mappings":"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","file":"ajax.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\nimport { registerActions } from '../actionModule';\nimport { getCurrent } from 'scalejs.navigation';\nimport { get, is, has, merge } from 'scalejs';\nimport noticeboard  from 'scalejs.noticeboard';\nimport dataservice from 'dataservice';\nimport ko from 'knockout';\nimport mustache from 'mustache';\nimport _ from 'lodash';\n\n/* format text getValue\n    // {{store.x}} or {{dataKey.subkey}}\n    evaluate(param, function (id) {\n        if(options.data && options.data[id]) {\n            return options.data[id];\n        }\n        return context.getValue(id); //context data and global data (via store)\n    });\n*/\n\nfunction ajax(options, args) {\n    let context = this,\n        data = context.data && ko.unwrap(context.data),\n        target = _.cloneDeep(options.target), // to prevent mutations to underlying object\n        optionData = options.data || {},\n        // todo: replace the mustache render with formatText\n        uri = mustache.render(options.target.uri, merge(data, optionData, getCurrent().query, ko.toJS(noticeboard.dictionary()))), //DS: temporary adding noticeboard dict for demo, replace with rendered/getValue interface\n        callback = args && args.callback,\n        nextAction;\n\n    if (target.data) {\n         //will skip rest of else if's if we have target.data\n         if (options.dataAndResults) {\n             // grabbing results from a previous ajaxAction\n             target.data = {\n                 data: target.data,\n                 results: options.results\n             };\n         } else {\n             target.data = target.data;\n         }\n    } else if (options.sendDataFromKey) {\n        target.data = data[options.sendDataFromKey];\n    } else if (Array.isArray(options.sendDataKeys)) {\n        target.data = options.sendDataKeys.reduce(function(o, k) {\n            let receiverKey = k, supplierKey = k, value;\n            if(is(k, 'object')) {\n                Object.keys(k).forEach(function (key) {\n                    receiverKey = key;\n                    supplierKey = k[key];\n                });\n            }\n\n            if(!has(data[supplierKey])) {\n                console.warn('Data key missing from data', supplierKey);\n                o[receiverKey] = null;\n                return o;\n            }\n\n            value = data[supplierKey];\n            if(typeof value === 'string') { value = value.trim(); }\n            o[receiverKey] = value;\n            return o;\n        }, {});\n    } else if (options.dataAndResults) {\n        // grabbing results from a previous ajaxAction\n        target.data = {\n            data: data,\n            results: options.results\n        };\n    } else if (get(options, 'target.options.type') === 'POST' || get(options, 'target.options.type') === 'PUT') {\n        target.data = data;\n    } else {\n        target.data = {};\n    }\n\n    nextAction =  function (error, results) {\n        let opts = options ? _.cloneDeep(options) : {},\n            err = error ? error : null;\n\n        ((err ? opts.errorActions : opts.nextActions) || []).forEach(function (item) {\n            if (err && opts.errorActions){\n                opts.errorActions.forEach(function(errorAction){\n                    if (errorAction.options.message && error.message) {\n                        errorAction.options.message = error.message;\n                    }\n                });\n            }\n\n            // get the results of the request and push\n            let response = {\n                request: options.target,\n                error: error,\n                results: results\n            };\n\n            item.options = merge(response, item.options);\n            createViewModel.call(context, item).action();\n        });\n\n        if (callback) {\n            callback.apply(null, arguments);\n        }\n    };\n\n    dataservice.ajax(merge(target, { uri: uri }), nextAction);\n}\n\nregisterActions({ajax});\n"]}