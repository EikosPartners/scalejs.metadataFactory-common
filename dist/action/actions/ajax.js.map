{"version":3,"sources":["../../../src/action/actions/ajax.js"],"names":["renderParams","params","data","ret","JSON","parse","render","stringify","ex","console","error","ajax","options","args","context","unwrap","target","cloneDeep","optionData","renderDataObject","query","toJS","dictionary","uri","callback","nextAction","sendDataFromKey","Array","isArray","sendDataKeys","reduce","o","k","receiverKey","supplierKey","value","Object","keys","forEach","key","warn","trim","dataAndResults","results","mergeData","log","opts","err","errorActions","nextActions","item","errorAction","message","response","request","call","action","apply","arguments"],"mappings":"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","file":"ajax.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\r\nimport { registerActions } from '../actionModule';\r\nimport { getCurrent } from 'scalejs.navigation';\r\nimport { get, is, has, merge } from 'scalejs';\r\nimport noticeboard  from 'scalejs.noticeboard';\r\nimport dataservice from 'dataservice';\r\nimport ko from 'knockout';\r\nimport mustache from 'mustache';\r\nimport _ from 'lodash';\r\n\r\nfunction renderParams(params, data) {\r\n    let ret = params;\r\n    try {\r\n        ret = JSON.parse(\r\n            mustache.render(JSON.stringify(params), data)\r\n        );\r\n    } catch (ex) {\r\n        console.error('Unable to JSON parse/stringify params', ex);\r\n    }\r\n    return ret;\r\n}\r\n\r\n\r\nfunction ajax(options, args) {\r\n    let context = this,\r\n        data = context.data && ko.unwrap(context.data),\r\n        target = _.cloneDeep(options.target), // to prevent mutations to underlying object\r\n        optionData = options.data || {},\r\n        // todo: is dictionary reliable?\r\n        renderDataObject =  merge(data, optionData, getCurrent().query, ko.toJS(noticeboard.dictionary())), \r\n        uri = mustache.render(options.target.uri, renderDataObject), \r\n        callback = args && args.callback,\r\n        nextAction;\r\n\r\n    if (target.data) {\r\n         //will skip rest of else if's if we have target.data\r\n        target.data = target.data;\r\n    } else if (options.sendDataFromKey) {\r\n        target.data = data[options.sendDataFromKey];\r\n    } else if (Array.isArray(options.sendDataKeys)) {\r\n        target.data = options.sendDataKeys.reduce(function(o, k) {\r\n            let receiverKey = k, supplierKey = k, value;\r\n            if(is(k, 'object')) {\r\n                Object.keys(k).forEach(function (key) {\r\n                    receiverKey = key;\r\n                    supplierKey = k[key];\r\n                });\r\n            }\r\n\r\n            if(!has(data[supplierKey])) {\r\n                console.warn('Data key missing from data', supplierKey);\r\n                o[receiverKey] = null;\r\n                return o;\r\n            }\r\n\r\n            value = data[supplierKey];\r\n            if(typeof value === 'string') { value = value.trim(); }\r\n            o[receiverKey] = value;\r\n            return o;\r\n        }, {});\r\n    } else if (options.dataAndResults) {\r\n        // grabbing results from a previous ajaxAction\r\n        target.data = {\r\n            data: data,\r\n            results: options.results\r\n        };\r\n    } else if (get(options, 'target.options.type') === 'POST' || get(options, 'target.options.type') === 'PUT') {\r\n        target.data = data;\r\n    } else {\r\n        target.data = {};\r\n    }\r\n    \r\n    if (options.dataAndResults) {\r\n        // grabbing results from a previous ajaxAction\r\n        // combining with data from above\r\n        target.data = {\r\n            data: target.data,\r\n            results: options.results\r\n        };\r\n    }\r\n\r\n    if (options.params) {\r\n        // either overwrite the data from above\r\n        // or merge with the data from above\r\n        let mergeData = {};\r\n        console.log('Using render params feature in ajax:', options);\r\n        if (options.mergeData) {\r\n            mergeData = target.data;\r\n        }\r\n        target.data = merge(mergeData, renderParams(options.params, renderDataObject));\r\n    }\r\n\r\n    nextAction =  function (error, results) {\r\n        let opts = options ? _.cloneDeep(options) : {},\r\n            err = error ? error : null;\r\n\r\n        ((err ? opts.errorActions : opts.nextActions) || []).forEach(function (item) {\r\n            if (err && opts.errorActions){\r\n                opts.errorActions.forEach(function(errorAction){\r\n                    if (errorAction.options.message && error.message) {\r\n                        errorAction.options.message = error.message;\r\n                    }\r\n                });\r\n            }\r\n\r\n            // get the results of the request and push\r\n            let response = {\r\n                request: options.target,\r\n                error: error,\r\n                results: results\r\n            };\r\n\r\n            item.options = merge(response, item.options);\r\n            createViewModel.call(context, item).action();\r\n        });\r\n\r\n        if (callback) {\r\n            callback.apply(null, arguments);\r\n        }\r\n    };\r\n\r\n    dataservice.ajax(merge(target, { uri: uri }), nextAction);\r\n}\r\n\r\nregisterActions({ajax});"]}