{"version":3,"sources":["../../../src/action/actions/ajax.js"],"names":[],"mappings":"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","file":"ajax.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\nimport { registerActions } from '../actionModule';\nimport { getCurrent } from 'scalejs.navigation';\nimport { get, is, has, merge } from 'scalejs';\nimport noticeboard  from 'scalejs.noticeboard';\nimport dataservice from 'dataservice';\nimport ko from 'knockout';\nimport mustache from 'mustache';\nimport _ from 'lodash';\n\n/* format text getValue\n    // {{store.x}} or {{dataKey.subkey}}\n    evaluate(param, function (id) {\n        if(options.data && options.data[id]) {\n            return options.data[id];\n        }\n        return context.getValue(id); //context data and global data (via store)\n    });\n*/\n\nfunction ajax(options, args) {\n    let context = this,\n        data = context.data && ko.unwrap(context.data),\n        target = _.cloneDeep(options.target), // to prevent mutations to underlying object\n        optionData = options.data || {},\n        // todo: replace the mustache render with formatText\n        uri = mustache.render(options.target.uri, merge(data, optionData, getCurrent().query, ko.toJS(noticeboard.dictionary()))), //DS: temporary adding noticeboard dict for demo, replace with rendered/getValue interface\n        callback = args && args.callback,\n        nextAction;\n\n    if (target.data) {\n         //will skip rest of else if's if we have target.data\n        target.data = target.data;\n    } else if (options.sendDataFromKey) {\n        target.data = data[options.sendDataFromKey];\n    } else if (Array.isArray(options.sendDataKeys)) {\n        target.data = options.sendDataKeys.reduce(function(o, k) {\n            let receiverKey = k, supplierKey = k, value;\n            if(is(k, 'object')) {\n                Object.keys(k).forEach(function (key) {\n                    receiverKey = key;\n                    supplierKey = k[key];\n                });\n            }\n\n            if(!has(data[supplierKey])) {\n                console.warn('Data key missing from data', supplierKey);\n                o[receiverKey] = null;\n                return o;\n            }\n\n            value = data[supplierKey];\n            if(typeof value === 'string') { value = value.trim(); }\n            o[receiverKey] = value;\n            return o;\n        }, {});\n    } else if (options.dataAndResults) {\n        // grabbing results from a previous ajaxAction\n        target.data = {\n            data: data,\n            results: options.results\n        };\n    } else if (get(options, 'target.options.type') === 'POST' || get(options, 'target.options.type') === 'PUT') {\n        target.data = data;\n    } else {\n        target.data = {};\n    }\n    \n    if (options.dataAndResults) {\n        // grabbing results from a previous ajaxAction\n        // combining with data from above\n        target.data = {\n            data: target.data,\n            results: options.results\n        };\n    }\n\n    nextAction =  function (error, results) {\n        let opts = options ? _.cloneDeep(options) : {},\n            err = error ? error : null;\n\n        ((err ? opts.errorActions : opts.nextActions) || []).forEach(function (item) {\n            if (err && opts.errorActions){\n                opts.errorActions.forEach(function(errorAction){\n                    if (errorAction.options.message && error.message) {\n                        errorAction.options.message = error.message;\n                    }\n                });\n            }\n\n            // get the results of the request and push\n            let response = {\n                request: options.target,\n                error: error,\n                results: results\n            };\n\n            item.options = merge(response, item.options);\n            createViewModel.call(context, item).action();\n        });\n\n        if (callback) {\n            callback.apply(null, arguments);\n        }\n    };\n\n    dataservice.ajax(merge(target, { uri: uri }), nextAction);\n}\n\nregisterActions({ajax});"]}