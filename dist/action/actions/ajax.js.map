{"version":3,"sources":["../../../src/action/actions/ajax.js"],"names":["ajax","options","args","context","data","unwrap","target","cloneDeep","optionData","uri","render","query","toJS","dictionary","callback","nextAction","sendDataFromKey","Array","isArray","sendDataKeys","reduce","o","k","receiverKey","supplierKey","value","Object","keys","forEach","key","console","warn","trim","error","results","opts","err","errorActions","nextActions","item","errorAction","message","response","request","call","action","apply","arguments"],"mappings":"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","file":"ajax.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\r\nimport { registerActions } from '../actionModule';\r\nimport { getCurrent } from 'scalejs.navigation';\r\nimport { get, is, has, merge } from 'scalejs';\r\nimport noticeboard  from 'scalejs.noticeboard';\r\nimport dataservice from 'dataservice';\r\nimport ko from 'knockout';\r\nimport mustache from 'mustache';\r\nimport _ from 'lodash';\r\n\r\n/* format text getValue \r\n    // {{store.x}} or {{dataKey.subkey}}\r\n    evaluate(param, function (id) {\r\n        if(options.data && options.data[id]) {\r\n            return options.data[id];\r\n        } \r\n        return context.getValue(id); //context data and global data (via store)\r\n    });\r\n*/\r\n\r\nfunction ajax(options, args) {\r\n    let context = this,\r\n        data = context.data && ko.unwrap(context.data),\r\n        target = _.cloneDeep(options.target), // to prevent mutations to underlying object\r\n        optionData = options.data || {},\r\n        // todo: replace the mustache render with formatText\r\n        uri = mustache.render(options.target.uri, merge(data, optionData, getCurrent().query, ko.toJS(noticeboard.dictionary()))), //DS: temporary adding noticeboard dict for demo, replace with rendered/getValue interface\r\n        callback = args && args.callback,\r\n        nextAction;\r\n\r\n    if (target.data) {\r\n         //will skip rest of else if's if we have target.data\r\n        target.data = target.data;\r\n    } else if (options.sendDataFromKey) {\r\n        target.data = data[options.sendDataFromKey];\r\n    } else if (Array.isArray(options.sendDataKeys)) {\r\n        target.data = options.sendDataKeys.reduce(function(o, k) {\r\n            let receiverKey = k, supplierKey = k, value;\r\n            if(is(k, 'object')) {\r\n                Object.keys(k).forEach(function (key) {\r\n                    receiverKey = key;\r\n                    supplierKey = k[key];\r\n                });\r\n            }\r\n\r\n            if(!has(data[supplierKey])) {\r\n                console.warn('Data key missing from data', supplierKey);\r\n                o[receiverKey] = null;\r\n                return o;\r\n            }\r\n\r\n            value = data[supplierKey];\r\n            if(typeof value === 'string') { value = value.trim(); }\r\n            o[receiverKey] = value;\r\n            return o;\r\n        }, {});\r\n    } else if (get(options, 'target.options.type') === 'POST' || get(options, 'target.options.type') === 'PUT') {\r\n        target.data = data;\r\n    } else {\r\n        target.data = {};\r\n    }\r\n\r\n    nextAction =  function (error, results) {\r\n        let opts = options ? _.cloneDeep(options) : {},\r\n            err = error ? error : null;\r\n\r\n        ((err ? opts.errorActions : opts.nextActions) || []).forEach(function (item) {\r\n            if (err && opts.errorActions){\r\n                opts.errorActions.forEach(function(errorAction){\r\n                    if (errorAction.options.message && error.message) {\r\n                        errorAction.options.message = error.message;\r\n                    }\r\n                });\r\n            }\r\n\r\n            // get the results of the request and push\r\n            let response = {\r\n                request: options.target,\r\n                error: error,\r\n                results: results\r\n            };\r\n\r\n            item.options = merge(response, item.options);\r\n            createViewModel.call(context, item).action();\r\n        });\r\n\r\n        if (callback) {\r\n            callback.apply(null, arguments);\r\n        }\r\n    };\r\n\r\n    dataservice.ajax(merge(target, { uri: uri }), nextAction);\r\n}\r\n\r\nregisterActions({ajax});"]}