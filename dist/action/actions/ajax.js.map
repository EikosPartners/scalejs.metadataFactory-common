{"version":3,"sources":["../../../src/action/actions/ajax.js"],"names":["renderParams","params","data","ret","JSON","parse","mustache","render","stringify","ex","console","error","ajax","options","args","context","ko","unwrap","target","_","cloneDeep","optionData","renderDataObject","query","toJS","noticeboard","dictionary","uri","callback","nextAction","sendDataFromKey","Array","isArray","sendDataKeys","reduce","o","k","receiverKey","supplierKey","value","Object","keys","forEach","key","warn","trim","dataAndResults","results","mergeData","adapterLoading","opts","err","keyMap","resultsKey","overrideErrorMessage","ajaxAction_overrideErrorMessage","errorActions","nextActions","item","message","statusCode","errorAction","response","request","status","createViewModel","call","action","apply","arguments","dataservice"],"mappings":"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","file":"ajax.js","sourcesContent":["import { createViewModel, globalMetadata } from 'scalejs.metadataFactory';\nimport { registerActions } from '../actionModule';\nimport { getCurrent } from 'scalejs.navigation';\nimport { get, is, has, merge } from 'scalejs';\nimport noticeboard  from 'scalejs.noticeboard';\nimport dataservice from 'dataservice';\nimport ko from 'knockout';\nimport mustache from 'mustache';\nimport _ from 'lodash';\n\nfunction renderParams(params, data) {\n    let ret = params;\n    try {\n        ret = JSON.parse(\n            mustache.render(JSON.stringify(params), data)\n        );\n    } catch (ex) {\n        console.error('Unable to JSON parse/stringify params', ex);\n    }\n    return ret;\n}\n\n/**\n * Ajax action to execute an ajax request\n *\n * @module ajax\n *\n * @param {object} node\n *  The configuration object for the ajax action\n * @param {string} node.type='action'\n *  The type of the node is action\n * @param {string} node.actionType='ajax'\n *  The actionType of the node is ajax\n * @param {string} node.text\n *  The text to display on the button\n * @param {object} node.options\n *  The options pertaining to the ajax action\n * @param {object} node.options.target\n *  The target object for the ajax request\n * @param {string} node.options.target.uri\n *  The uri of the request to be made\n * @param {string} node.options.target.name\n *  The name of the request to be made\n * @param {object} node.options.target.options\n *  The options pertaining to the target\n * @param {object} node.options.target.data\n *  The data to send on the request\n * @param {object} node.options.target.options.headers\n *  Key-value pairs to set as headers on the request\n * @param {string} node.options.target.options.type\n *  The HTTP type of request to make (POST, PUT, etc)\n * @param {string|Array} node.options.sendDataFromKey\n *  The key or array of keys for where the data is stored\n * @param {Array} node.options.sendDataKeys\n *  Array of data keys to use, can be objects with key-value pairs\n * @param {boolean} node.options.dataAndResults\n *  Boolean value to determine whether to combine data with results from a previous ajax action\n * @param {object} node.options.results\n *  Object of results from a previous ajax action\n * @param {object} node.options.params\n *  Key-value pairs to set as parameters on the request\n * @param {array|object} node.options.keyMap\n *  A mapper object or array of mapper objects to map keys\n * @param {string} node.options.keyMap.resultsKey\n *  Map the results from the ajax call with this key\n * @param {array} node.options.nextActions\n *  An array of action objects to perform after the action is completed successfully\n * @param {array} node.options.errorActions\n *  An array of action objects to perform if the action ends with an error\n * @example\n * {\n *        \"type\": \"action\",\n *        \"actionType\": \"ajax\",\n *        \"text\": \"SUBMIT\",\n *        \"options\": {\n *            \"target\": {\n *                \"uri\": \"add-endpoint\",\n *                \"options\": {\n *                    \"type\": \"POST\"\n *                }\n *            },\n *            \"nextActions\": [\n *                {\n *                    \"type\": \"action\",\n *                    \"actionType\": \"route\",\n *                    \"options\": {\n *                        \"target\": \"dashboard\"\n *                    }\n *                }\n *            ]\n *        }\n *    }\n */\nfunction ajax(options, args) {\n    const context = this,\n        data = context.data && ko.unwrap(context.data),\n        target = _.cloneDeep(options.target), // to prevent mutations to underlying object\n        optionData = options.data || {},\n        // todo: is dictionary reliable?\n        renderDataObject = merge(data, optionData, getCurrent().query,\n            ko.toJS(noticeboard.dictionary())),\n        uri = mustache.render(options.target.uri, renderDataObject),\n        callback = args && args.callback;\n    let nextAction;\n\n    if (target.data) {\n        // will skip rest of else if's if we have target.data\n        target.data = target.data;\n    } else if (options.sendDataFromKey) {\n        target.data = data[options.sendDataFromKey];\n    } else if (Array.isArray(options.sendDataKeys)) {\n        target.data = options.sendDataKeys.reduce((o, k) => {\n            let receiverKey = k,\n                supplierKey = k,\n                value;\n\n            if (is(k, 'object')) {\n                Object.keys(k).forEach((key) => {\n                    receiverKey = key;\n                    supplierKey = k[key];\n                });\n            }\n\n            if (!has(data[supplierKey])) {\n                console.warn('Data key missing from data', supplierKey);\n                o[receiverKey] = null;\n                return o;\n            }\n\n            value = data[supplierKey];\n            if (typeof value === 'string') { value = value.trim(); }\n            o[receiverKey] = value;\n            return o;\n        }, {});\n    } else if (options.dataAndResults) {\n        // grabbing results from a previous ajaxAction\n        target.data = {\n            data: data,\n            results: options.results\n        };\n    } else if (get(options, 'target.options.type') === 'POST' || get(options, 'target.options.type') === 'PUT') {\n        target.data = data;\n    } else {\n        target.data = {};\n    }\n\n    if (options.dataAndResults) {\n        // grabbing results from a previous ajaxAction\n        // combining with data from above\n        target.data = {\n            data: target.data,\n            results: options.results\n        };\n    }\n\n    if (options.params) {\n        // either overwrite the data from above\n        // or merge with the data from above\n        let mergeData = {};\n        // console.log('Using render params feature in ajax:', options);\n        if (options.mergeData) {\n            mergeData = target.data;\n        }\n        target.data = merge(mergeData, renderParams(options.params, renderDataObject));\n    }\n\n    if (context.adapterLoading) {\n        context.adapterLoading(true);\n    }\n\n    nextAction = function (error, results) {\n        const opts = options ? _.cloneDeep(options) : {},\n            err = error,\n            keyMap = options.keyMap || { resultsKey: 'results' },\n            overrideErrorMessage = (globalMetadata() || {}).ajaxAction_overrideErrorMessage;\n\n        ((err ? opts.errorActions : opts.nextActions) || []).forEach((item) => {\n            if (err && opts.errorActions) {\n                if (overrideErrorMessage) {\n                    error.message = merge(error.message, overrideErrorMessage[error.statusCode] || {});\n                }\n                opts.errorActions.forEach((errorAction) => {\n                    if (errorAction.options.message && error.message) {\n                        errorAction.options.message = error.message;\n                    }\n                });\n            }\n\n            // get the results of the request and push\n            const response = {\n                request: options.target,\n                error: error,\n                [keyMap.resultsKey]: results,\n                status: results ? 200 : error.status,\n                statusCode: results ? null : error.statusCode\n            };\n\n            item.options = merge(response, item.options);\n            createViewModel.call(context, item).action();\n        });\n\n        if (context.adapterLoading) {\n            context.adapterLoading(false);\n        }\n\n        if (callback) {\n            callback.apply(null, arguments);\n        }\n    };\n\n    dataservice.ajax(merge(target, { uri: uri }), nextAction);\n}\n\nregisterActions({ ajax });"]}