{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":["actionViewModel","node","registeredActions","originalJson","context","options","text","validate","actionType","actions","mergedActions","actionFunc","bind","isShown","disabled","enableUpdates","subs","disabledComputed","action","args","console","error","successCallback","actionNode","onlyIf","only","identifier","results","getValue","immediate","delay","setTimeout","push","id","data","Object","keys","forEach","key","disabledExpression","extend","deferred","subscribe","val","dispose","sub"],"mappings":"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","file":"actionViewModel.js","sourcesContent":["import { notify, receive } from 'scalejs.messagebus';\nimport { observable, computed } from 'knockout';\nimport { merge, has, get } from 'scalejs';\nimport { extend, cloneDeep } from 'lodash';\nimport { evaluate } from 'scalejs.expression-jsep';\n\nimport { getRegisteredActions } from './actionModule';\n\n/** Action: a component to create an action\n * @module action\n *\n * @param {object} node\n *  The configuration object for the module\n * @param {string} node.type='action'\n *  The type of the node is action\n * @param {string} node.actionType\n *  The type of action to create\n * @param {string} node.text\n *  The text to display on the button\n * @param {boolean} node.immediate\n *  Boolean to determine whether to run the action immediately or not\n * @param {number} node.delay\n *  How long to delay the action in milliseconds\n * @param {string} node.validate\n *  The id of an element to validate\n * @param {boolean|string} [node.rendered=true]\n *  Boolean or expression to render the action (or not)\n * @param {object} node.options\n *  The options pertaining to your specific actionType\n * @param {boolean|string} node.options.disabled\n *  Boolean or expression to disable the button or not\n */\nexport default function actionViewModel(node) {\n    const registeredActions = getRegisteredActions(),\n        originalJson = cloneDeep(node),\n        context = this || {},\n        options = node.options || {},\n        text = node.text || options.text, // TODO: Why are we checking options?\n        validate = node.validate,\n        actionType = node.actionType,\n        actions = {},\n        mergedActions = extend(actions, registeredActions),\n        actionFunc = (mergedActions[actionType] && mergedActions[actionType].bind(context)) || null,\n        isShown = observable(true),\n        disabled = observable(has(options.disabled) ? options.disabled : false),\n        enableUpdates = options.enableUpdates,\n        subs = [];\n    \n    let disabledComputed = null;\n\n    function action(args) {\n        if (!actionFunc) {\n            console.error('actionType is not defined', node);\n            return;\n        }\n\n        if (validate) {\n            notify(validate, {\n                successCallback: function () {\n                    actionFunc(options, args);\n                },\n                actionNode: cloneDeep(originalJson),\n                context: context\n            });\n        } else if (node.onlyIf) {\n            const only = evaluate(node.onlyIf, (identifier) => {\n                // worried about collisions, we should keep the getValue function consistent as possible\n                if (identifier === 'results') {\n                    return options.results;\n                }\n                if (identifier === 'options') {\n                    return options;\n                }\n                return context.getValue(identifier);\n            });\n            if (only) {\n                actionFunc(options, args);\n            }\n        } else {\n            actionFunc(options, args);\n        }\n    }\n\n    if (node.immediate) {\n        if (has(node.delay)) {\n            setTimeout(() => {\n                action();\n            }, node.delay);\n            return;\n        }\n        action();\n        return;\n    }\n\n    if (enableUpdates) {\n        subs.push(receive(`${node.id}.update`, (data) => {\n            Object.keys(data).forEach((key) => {\n                if (key === 'disabled') { disabled(data[key]); }\n            });\n        }));\n    }\n\n    if (node.disabledExpression) {\n        disabledComputed = computed(() => evaluate(node.disabledExpression, context.getValue))\n            .extend({ deferred: true });\n        disabled(disabledComputed());\n        disabledComputed.subscribe((val) => {\n            disabled(val);\n        });\n        subs.push(disabledComputed);\n    }\n\n    return merge(node, {\n        isShown: isShown,\n        action: action,\n        text: text,\n        actionType: actionType,\n        options: options,\n        disabled: disabled,\n        context: context,\n        dispose: function () {\n            subs.forEach((sub) => {\n                sub.dispose();\n            });\n        }\n    });\n}"]}