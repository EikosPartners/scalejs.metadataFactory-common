{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":["actionViewModel","node","registeredActions","context","options","text","validate","actionType","actions","mergedActions","actionFunc","bind","isShown","disabled","enableUpdates","subs","action","args","console","error","successCallback","immediate","delay","setTimeout","push","id","data","Object","keys","forEach","key","dispose","sub"],"mappings":";;;;;kBAOwBA,e;;AAPxB;;AACA;;AACA;;AACA;;AAEA;;AAEe,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC1C,QAAMC,oBAAoB,yCAA1B;AAAA,QACIC,UAAU,QAAQ,EADtB;AAAA,QAEIC,UAAUH,KAAKG,OAAL,IAAgB,EAF9B;AAAA,QAGIC,OAAOJ,KAAKI,IAAL,IAAaD,QAAQC,IAHhC;AAAA,QAGsC;AAClCC,eAAWL,KAAKK,QAJpB;AAAA,QAKIC,aAAaN,KAAKM,UALtB;AAAA,QAMIC,UAAU,EANd;AAAA,QAOIC,gBAAgB,oBAAOD,OAAP,EAAgBN,iBAAhB,CAPpB;AAAA,QAQIQ,aAAcD,cAAcF,UAAd,KAA6BE,cAAcF,UAAd,EAA0BI,IAA1B,CAA+BR,OAA/B,CAA9B,IAA0E,IAR3F;AAAA,QASIS,UAAU,0BAAW,IAAX,CATd;AAAA,QAUIC,WAAW,0BAAW,mBAAIT,QAAQS,QAAZ,IAAwBT,QAAQS,QAAhC,GAA2C,KAAtD,CAVf;AAAA,QAWIC,gBAAgBV,QAAQU,aAX5B;AAAA,QAYIC,OAAO,EAZX;;AAcA,aAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,YAAI,CAACP,UAAL,EAAiB;AACbQ,oBAAQC,KAAR,CAAc,2BAAd,EAA2ClB,IAA3C;AACA;AACH;;AAED,YAAIK,QAAJ,EAAc;AACV,iCAAOA,QAAP,EAAiB;AACbc,iCAAiB,2BAAY;AACzBV,+BAAWN,OAAX,EAAoBa,IAApB;AACH;AAHY,aAAjB;AAKH,SAND,MAMO;AACHP,uBAAWN,OAAX,EAAoBa,IAApB;AACH;AACJ;;AAED,QAAIhB,KAAKoB,SAAT,EAAoB;AAChB,YAAI,mBAAIpB,KAAKqB,KAAT,CAAJ,EAAqB;AACjBC,uBAAW,YAAM;AACbP;AACH,aAFD,EAEGf,KAAKqB,KAFR;AAGA;AACH;AACDN;AACA;AACH;;AAED,QAAIF,aAAJ,EAAmB;AACfC,aAAKS,IAAL,CAAU,sBAAWvB,KAAKwB,EAAhB,cAA6B,UAACC,IAAD,EAAU;AAC7CC,mBAAOC,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA0B,UAACC,GAAD,EAAS;AAC/B,oBAAIA,QAAQ,UAAZ,EAAwB;AAAEjB,6BAASa,KAAKI,GAAL,CAAT;AAAsB;AACnD,aAFD;AAGH,SAJS,CAAV;AAKH;;AAED,WAAO,qBAAM7B,IAAN,EAAY;AACfW,iBAASA,OADM;AAEfI,gBAAQA,MAFO;AAGfX,cAAMA,IAHS;AAIfE,oBAAYA,UAJG;AAKfH,iBAASA,OALM;AAMfS,kBAAUA,QANK;AAOfV,iBAASA,OAPM;AAQf4B,iBAAS,mBAAY;AACjBhB,iBAAKc,OAAL,CAAa,UAACG,GAAD,EAAS;AAClBA,oBAAID,OAAJ;AACH,aAFD;AAGH;AAZc,KAAZ,CAAP;AAcH","file":"actionViewModel.js","sourcesContent":["import { notify, receive } from 'scalejs.messagebus';\r\nimport { observable } from 'knockout';\r\nimport { merge, has } from 'scalejs';\r\nimport { extend } from 'lodash';\r\n\r\nimport { getRegisteredActions } from './actionModule';\r\n\r\nexport default function actionViewModel(node) {\r\n    const registeredActions = getRegisteredActions(),\r\n        context = this || {},\r\n        options = node.options || {},\r\n        text = node.text || options.text, // TODO: Why are we checking options?\r\n        validate = node.validate,\r\n        actionType = node.actionType,\r\n        actions = {},\r\n        mergedActions = extend(actions, registeredActions),\r\n        actionFunc = (mergedActions[actionType] && mergedActions[actionType].bind(context)) || null,\r\n        isShown = observable(true),\r\n        disabled = observable(has(options.disabled) ? options.disabled : false),\r\n        enableUpdates = options.enableUpdates,\r\n        subs = [];\r\n\r\n    function action(args) {\r\n        if (!actionFunc) {\r\n            console.error('actionType is not defined', node);\r\n            return;\r\n        }\r\n\r\n        if (validate) {\r\n            notify(validate, {\r\n                successCallback: function () {\r\n                    actionFunc(options, args);\r\n                }\r\n            });\r\n        } else {\r\n            actionFunc(options, args);\r\n        }\r\n    }\r\n\r\n    if (node.immediate) {\r\n        if (has(node.delay)) {\r\n            setTimeout(() => {\r\n                action();\r\n            }, node.delay);\r\n            return;\r\n        }\r\n        action();\r\n        return;\r\n    }\r\n\r\n    if (enableUpdates) {\r\n        subs.push(receive(`${node.id}.update`, (data) => {\r\n            Object.keys(data).forEach((key) => {\r\n                if (key === 'disabled') { disabled(data[key]); }\r\n            });\r\n        }));\r\n    }\r\n\r\n    return merge(node, {\r\n        isShown: isShown,\r\n        action: action,\r\n        text: text,\r\n        actionType: actionType,\r\n        options: options,\r\n        disabled: disabled,\r\n        context: context,\r\n        dispose: function () {\r\n            subs.forEach((sub) => {\r\n                sub.dispose();\r\n            });\r\n        }\r\n    });\r\n}"]}