{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":["actionViewModel","node","registeredActions","originalJson","context","options","text","validate","actionType","actions","mergedActions","actionFunc","bind","isShown","disabled","enableUpdates","subs","action","args","console","error","successCallback","actionNode","immediate","delay","setTimeout","push","id","data","Object","keys","forEach","key","dispose","sub"],"mappings":";;;;;kBA+BwBA,e;;AA/BxB;;AACA;;AACA;;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBe,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC1C,QAAMC,oBAAoB,yCAA1B;AAAA,QACIC,eAAe,uBAAUF,IAAV,CADnB;AAAA,QAEIG,UAAU,QAAQ,EAFtB;AAAA,QAGIC,UAAUJ,KAAKI,OAAL,IAAgB,EAH9B;AAAA,QAIIC,OAAOL,KAAKK,IAAL,IAAaD,QAAQC,IAJhC;AAAA,QAIsC;AAClCC,eAAWN,KAAKM,QALpB;AAAA,QAMIC,aAAaP,KAAKO,UANtB;AAAA,QAOIC,UAAU,EAPd;AAAA,QAQIC,gBAAgB,oBAAOD,OAAP,EAAgBP,iBAAhB,CARpB;AAAA,QASIS,aAAcD,cAAcF,UAAd,KAA6BE,cAAcF,UAAd,EAA0BI,IAA1B,CAA+BR,OAA/B,CAA9B,IAA0E,IAT3F;AAAA,QAUIS,UAAU,0BAAW,IAAX,CAVd;AAAA,QAWIC,WAAW,0BAAW,mBAAIT,QAAQS,QAAZ,IAAwBT,QAAQS,QAAhC,GAA2C,KAAtD,CAXf;AAAA,QAYIC,gBAAgBV,QAAQU,aAZ5B;AAAA,QAaIC,OAAO,EAbX;;AAeA,aAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,YAAI,CAACP,UAAL,EAAiB;AACbQ,oBAAQC,KAAR,CAAc,2BAAd,EAA2CnB,IAA3C;AACA;AACH;;AAED,YAAIM,QAAJ,EAAc;AACV,iCAAOA,QAAP,EAAiB;AACbc,iCAAiB,2BAAY;AACzBV,+BAAWN,OAAX,EAAoBa,IAApB;AACH,iBAHY;AAIbI,4BAAY,uBAAUnB,YAAV;AAJC,aAAjB;AAMH,SAPD,MAOO;AACHQ,uBAAWN,OAAX,EAAoBa,IAApB;AACH;AACJ;;AAED,QAAIjB,KAAKsB,SAAT,EAAoB;AAChB,YAAI,mBAAItB,KAAKuB,KAAT,CAAJ,EAAqB;AACjBC,uBAAW,YAAM;AACbR;AACH,aAFD,EAEGhB,KAAKuB,KAFR;AAGA;AACH;AACDP;AACA;AACH;;AAED,QAAIF,aAAJ,EAAmB;AACfC,aAAKU,IAAL,CAAU,sBAAWzB,KAAK0B,EAAhB,cAA6B,UAACC,IAAD,EAAU;AAC7CC,mBAAOC,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA0B,UAACC,GAAD,EAAS;AAC/B,oBAAIA,QAAQ,UAAZ,EAAwB;AAAElB,6BAASc,KAAKI,GAAL,CAAT;AAAsB;AACnD,aAFD;AAGH,SAJS,CAAV;AAKH;;AAED,WAAO,qBAAM/B,IAAN,EAAY;AACfY,iBAASA,OADM;AAEfI,gBAAQA,MAFO;AAGfX,cAAMA,IAHS;AAIfE,oBAAYA,UAJG;AAKfH,iBAASA,OALM;AAMfS,kBAAUA,QANK;AAOfV,iBAASA,OAPM;AAQf6B,iBAAS,mBAAY;AACjBjB,iBAAKe,OAAL,CAAa,UAACG,GAAD,EAAS;AAClBA,oBAAID,OAAJ;AACH,aAFD;AAGH;AAZc,KAAZ,CAAP;AAcH","file":"actionViewModel.js","sourcesContent":["import { notify, receive } from 'scalejs.messagebus';\nimport { observable } from 'knockout';\nimport { merge, has } from 'scalejs';\nimport { extend, cloneDeep } from 'lodash';\n\nimport { getRegisteredActions } from './actionModule';\n\n/** Action: a component to create an action\n * @module action\n *\n * @param {object} node\n *  The configuration object for the module\n * @param {string} node.type='action'\n *  The type of the node is action\n * @param {string} node.actionType\n *  The type of action to create\n * @param {string} node.text\n *  The text to display on the button\n * @param {boolean|string} [node.rendered=true]\n *  Boolean or expression to render the action (or not)\n * @param {object} node.options\n *  The options pertaining to your specific actionType\n * @param {boolean|string} node.options.disabled\n *  Boolean or expression to disable the button or not\n * @param {array} node.options.nextActions\n *  An array of action objects to perform after the action is completed successfully\n * @param {array} node.options.errorActions\n *  An array of action objects to perform if the action ends with an error\n * @param {string} node.options.mergeid\n *  The merge id of the action\n */\nexport default function actionViewModel(node) {\n    const registeredActions = getRegisteredActions(),\n        originalJson = cloneDeep(node),\n        context = this || {},\n        options = node.options || {},\n        text = node.text || options.text, // TODO: Why are we checking options?\n        validate = node.validate,\n        actionType = node.actionType,\n        actions = {},\n        mergedActions = extend(actions, registeredActions),\n        actionFunc = (mergedActions[actionType] && mergedActions[actionType].bind(context)) || null,\n        isShown = observable(true),\n        disabled = observable(has(options.disabled) ? options.disabled : false),\n        enableUpdates = options.enableUpdates,\n        subs = [];\n\n    function action(args) {\n        if (!actionFunc) {\n            console.error('actionType is not defined', node);\n            return;\n        }\n\n        if (validate) {\n            notify(validate, {\n                successCallback: function () {\n                    actionFunc(options, args);\n                },\n                actionNode: cloneDeep(originalJson)\n            });\n        } else {\n            actionFunc(options, args);\n        }\n    }\n\n    if (node.immediate) {\n        if (has(node.delay)) {\n            setTimeout(() => {\n                action();\n            }, node.delay);\n            return;\n        }\n        action();\n        return;\n    }\n\n    if (enableUpdates) {\n        subs.push(receive(`${node.id}.update`, (data) => {\n            Object.keys(data).forEach((key) => {\n                if (key === 'disabled') { disabled(data[key]); }\n            });\n        }));\n    }\n\n    return merge(node, {\n        isShown: isShown,\n        action: action,\n        text: text,\n        actionType: actionType,\n        options: options,\n        disabled: disabled,\n        context: context,\n        dispose: function () {\n            subs.forEach((sub) => {\n                sub.dispose();\n            });\n        }\n    });\n}"]}