{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":["actionViewModel","node","registeredActions","context","options","text","createViewModel","bind","validate","actionType","actions","mergedActions","actionFunc","isShown","disabled","action","args","console","error","successCallback","immediate"],"mappings":";;;;;kBAOwBA,e;;AAPxB;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC1C,QAAIC,oBAAoB,yCAAxB;AAAA,QACIC,UAAU,IADd;AAAA,QAEIC,UAAUH,KAAKG,OAAL,IAAgB,EAF9B;AAAA,QAGIC,OAAOJ,KAAKI,IAAL,IAAaD,QAAQC,IAHhC;AAAA,QAGsC;AAClCC,sBAAkB,yBAAuBC,IAAvB,CAA4BJ,OAA5B,CAJtB;AAAA,QAKIK,WAAWP,KAAKO,QALpB;AAAA,QAMIC,aAAaR,KAAKQ,UANtB;AAAA,QAOIC,UAAU,EAPd;AAAA,QAQIC,gBAAgB,oBAAOD,OAAP,EAAgBR,iBAAhB,CARpB;AAAA,QASIU,aAAaD,cAAcF,UAAd,KAA6BE,cAAcF,UAAd,EAA0BF,IAA1B,CAA+BJ,OAA/B,CAA7B,IAAwE,IATzF;AAAA,QAUIU,UAAU,0BAAW,IAAX,CAVd;AAAA,QAWIC,WAAW,0BAAW,mBAAIV,QAAQU,QAAZ,IAAwBV,QAAQU,QAAhC,GAA2C,KAAtD,CAXf;;AAcA,aAASC,MAAT,CAAgBC,IAAhB,EAAsB;;AAElB,YAAI,CAACJ,UAAL,EAAgB;AACZK,oBAAQC,KAAR,CAAc,2BAAd,EAA2CjB,IAA3C;AACA;AACH;;AAED,YAAIO,QAAJ,EAAc;AACV,kCAAOA,QAAP,EAAiB;AACbW,iCAAiB,2BAAY;AACzBP,+BAAWR,OAAX,EAAoBY,IAApB;AACH;AAHY,aAAjB;AAKH,SAND,MAMO;AACHJ,uBAAWR,OAAX,EAAoBY,IAApB;AACH;AACJ;;AAED,QAAIf,KAAKmB,SAAT,EAAoB;AAChBL;AACA;AACH;;AAED,WAAO,qBAAMd,IAAN,EAAY;AACfY,iBAASA,OADM;AAEfE,gBAAQA,MAFO;AAGfV,cAAMA,IAHS;AAIfI,oBAAYA,UAJG;AAKfL,iBAASA,OALM;AAMfU,kBAAUA,QANK;AAOfX,iBAASA;AAPM,KAAZ,CAAP;AAUH","file":"actionViewModel.js","sourcesContent":["import { createViewModel as createViewModelUnbound } from 'scalejs.metadataFactory';\r\nimport { getRegisteredActions } from './actionModule';\r\nimport { observable, unwrap } from 'knockout';\r\nimport { notify } from 'scalejs.messagebus';\r\nimport { merge, has } from 'scalejs';\r\nimport { extend } from 'lodash';\r\n\r\nexport default function actionViewModel(node) {\r\n    let registeredActions = getRegisteredActions(),\r\n        context = this,      \r\n        options = node.options || {},  \r\n        text = node.text || options.text, // TODO: Options are meant for specific types. Why are we checking options?\r\n        createViewModel = createViewModelUnbound.bind(context),\r\n        validate = node.validate,\r\n        actionType = node.actionType,\r\n        actions = {},\r\n        mergedActions = extend(actions, registeredActions),\r\n        actionFunc = mergedActions[actionType] && mergedActions[actionType].bind(context) || null ,\r\n        isShown = observable(true),\r\n        disabled = observable(has(options.disabled) ? options.disabled : false);\r\n        \r\n\r\n    function action(args) {\r\n        \r\n        if (!actionFunc){\r\n            console.error('actionType is not defined', node);\r\n            return;\r\n        }\r\n\r\n        if (validate) {\r\n            notify(validate, {\r\n                successCallback: function () {\r\n                    actionFunc(options, args);\r\n                }\r\n            });\r\n        } else {\r\n            actionFunc(options, args);\r\n        }\r\n    }\r\n\r\n    if (node.immediate) {\r\n        action();\r\n        return;\r\n    }\r\n\r\n    return merge(node, {\r\n        isShown: isShown,\r\n        action: action,\r\n        text: text,\r\n        actionType: actionType,\r\n        options: options,\r\n        disabled: disabled,\r\n        context: context\r\n    });\r\n\r\n};\r\n\r\n"]}