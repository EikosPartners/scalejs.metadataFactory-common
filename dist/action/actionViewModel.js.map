{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":["actionViewModel","node","registeredActions","context","options","text","validate","actionType","actions","mergedActions","actionFunc","bind","isShown","disabled","action","args","console","error","successCallback","immediate"],"mappings":";;;;;kBAOwBA,e;;AAPxB;;AACA;;AACA;;AACA;;AAEA;;AAEe,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC1C,QAAMC,oBAAoB,yCAA1B;AAAA,QACIC,UAAU,QAAQ,EADtB;AAAA,QAEIC,UAAUH,KAAKG,OAAL,IAAgB,EAF9B;AAAA,QAGIC,OAAOJ,KAAKI,IAAL,IAAaD,QAAQC,IAHhC;AAAA,QAGsC;AAClCC,eAAWL,KAAKK,QAJpB;AAAA,QAKIC,aAAaN,KAAKM,UALtB;AAAA,QAMIC,UAAU,EANd;AAAA,QAOIC,gBAAgB,oBAAOD,OAAP,EAAgBN,iBAAhB,CAPpB;AAAA,QAQIQ,aAAcD,cAAcF,UAAd,KAA6BE,cAAcF,UAAd,EAA0BI,IAA1B,CAA+BR,OAA/B,CAA9B,IAA0E,IAR3F;AAAA,QASIS,UAAU,0BAAW,IAAX,CATd;AAAA,QAUIC,WAAW,0BAAW,mBAAIT,QAAQS,QAAZ,IAAwBT,QAAQS,QAAhC,GAA2C,KAAtD,CAVf;;AAaA,aAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,YAAI,CAACL,UAAL,EAAiB;AACbM,oBAAQC,KAAR,CAAc,2BAAd,EAA2ChB,IAA3C;AACA;AACH;;AAED,YAAIK,QAAJ,EAAc;AACV,iCAAOA,QAAP,EAAiB;AACbY,iCAAiB,2BAAY;AACzBR,+BAAWN,OAAX,EAAoBW,IAApB;AACH;AAHY,aAAjB;AAKH,SAND,MAMO;AACHL,uBAAWN,OAAX,EAAoBW,IAApB;AACH;AACJ;;AAED,QAAId,KAAKkB,SAAT,EAAoB;AAChBL;AACA;AACH;;AAED,WAAO,qBAAMb,IAAN,EAAY;AACfW,iBAASA,OADM;AAEfE,gBAAQA,MAFO;AAGfT,cAAMA,IAHS;AAIfE,oBAAYA,UAJG;AAKfH,iBAASA,OALM;AAMfS,kBAAUA,QANK;AAOfV,iBAASA;AAPM,KAAZ,CAAP;AASH","file":"actionViewModel.js","sourcesContent":["import { notify } from 'scalejs.messagebus';\r\nimport { observable } from 'knockout';\r\nimport { merge, has } from 'scalejs';\r\nimport { extend } from 'lodash';\r\n\r\nimport { getRegisteredActions } from './actionModule';\r\n\r\nexport default function actionViewModel(node) {\r\n    const registeredActions = getRegisteredActions(),\r\n        context = this || {},\r\n        options = node.options || {},\r\n        text = node.text || options.text, // TODO: Why are we checking options?\r\n        validate = node.validate,\r\n        actionType = node.actionType,\r\n        actions = {},\r\n        mergedActions = extend(actions, registeredActions),\r\n        actionFunc = (mergedActions[actionType] && mergedActions[actionType].bind(context)) || null,\r\n        isShown = observable(true),\r\n        disabled = observable(has(options.disabled) ? options.disabled : false);\r\n\r\n\r\n    function action(args) {\r\n        if (!actionFunc) {\r\n            console.error('actionType is not defined', node);\r\n            return;\r\n        }\r\n\r\n        if (validate) {\r\n            notify(validate, {\r\n                successCallback: function () {\r\n                    actionFunc(options, args);\r\n                }\r\n            });\r\n        } else {\r\n            actionFunc(options, args);\r\n        }\r\n    }\r\n\r\n    if (node.immediate) {\r\n        action();\r\n        return;\r\n    }\r\n\r\n    return merge(node, {\r\n        isShown: isShown,\r\n        action: action,\r\n        text: text,\r\n        actionType: actionType,\r\n        options: options,\r\n        disabled: disabled,\r\n        context: context\r\n    });\r\n}\r\n"]}