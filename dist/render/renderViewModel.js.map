{"version":3,"sources":["../../src/render/renderViewModel.js"],"names":["node","context","cloneDeep","mappedChildNodes","render","id","options","children","data","keyMap","resultsKey","Array","isArray","dispose","call","nodes","forEach","n"],"mappings":";;;;;;kBAsBe,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,UAAU,iBAAEC,SAAF,CAAY,IAAZ,CAAhB;AAAA,QACIC,mBAAmB,gCADvB;AAAA,QAEIC,SAAS,uBAAWJ,KAAKK,EAAhB,cAA6B,UAACC,OAAD,EAAa;AAC/C,YAAIC,WAAWD,QAAQE,IAAvB;AACA,YAAIF,QAAQG,MAAZ,EAAoB;AAChBF,uBAAW,mBAAID,OAAJ,EAAaA,QAAQG,MAAR,CAAeC,UAA5B,CAAX;AACH;AACDH,mBAAWI,MAAMC,OAAN,CAAcL,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAhD;;AAEA,YAAIJ,kBAAJ,EAAwB;AACpBU,oBAAQV,kBAAR;AACH;AACDA,yBAAiB,0BAAiBW,IAAjB,CAAsBb,OAAtB,EAA+BM,QAA/B,CAAjB;AACH,KAXQ,CAFb;;AAeA,aAASM,OAAT,CAAiBE,KAAjB,EAAwB;AACpBA,cAAMC,OAAN,CAAc,UAACC,CAAD,EAAO;AACjBA,cAAEJ,OAAF,IAAaI,EAAEJ,OAAF,EAAb;AACAA,oBAAQ,sBAAOI,EAAEd,gBAAT,KAA8B,EAAtC;AACH,SAHD;AAIH;;AAED,WAAO,qBAAMH,IAAN,EAAY;AACfG,0CADe;AAEfU,eAFe,qBAEL;AACNT,mBAAOS,OAAP;AACH;AAJc,KAAZ,CAAP;AAMH,C;;AAnDD;;AACA;;AACA;;AACA;;AACA","file":"renderViewModel.js","sourcesContent":["import { createViewModels } from 'scalejs.metadataFactory';\r\nimport { observableArray, unwrap } from 'knockout';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport { merge, get } from 'scalejs';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * Render: a viewless component to conditionally render pjson components\r\n * @module render\r\n *\r\n * @param {object} node\r\n *  The configuration object for the module\r\n * @param {string} node.type='render'\r\n *  The type of the node is render\r\n * @param {string} node.id\r\n *  The channel to set up the receiver for\r\n *\r\n * @example\r\n * {\r\n *      \"type\": \"render\",\r\n *      \"id\": \"my_grid\"\r\n */\r\nexport default function (node) {\r\n    const context = _.cloneDeep(this),\r\n        mappedChildNodes = observableArray(),\r\n        render = receive(`${node.id}.render`, (options) => {\r\n            let children = options.data;\r\n            if (options.keyMap) {\r\n                children = get(options, options.keyMap.resultsKey);\r\n            }\r\n            children = Array.isArray(children) ? children : [children];\r\n\r\n            if (mappedChildNodes()) {\r\n                dispose(mappedChildNodes());\r\n            }\r\n            mappedChildNodes(createViewModels.call(context, children));\r\n        });\r\n\r\n    function dispose(nodes) {\r\n        nodes.forEach((n) => {\r\n            n.dispose && n.dispose();\r\n            dispose(unwrap(n.mappedChildNodes) || []);\r\n        });\r\n    }\r\n\r\n    return merge(node, {\r\n        mappedChildNodes,\r\n        dispose() {\r\n            render.dispose();\r\n        }\r\n    });\r\n}"]}