{"version":3,"sources":["../../src/list/listViewModel.js"],"names":["listViewModel","listItems","DELETE","del","DELETE_FLAG","deleteFlag","itemDef","context","clonedItem","cloneDeep","template","id","undefined","name","data","isNew","call","getValue","deleteRow","options","clearOnDelete","item","itemDictionary","setValue","node","rows","isShown","readonly","deleteRows","mappedChildNodes","unique","visibleRows","initialData","addButtonRendered","bind","initial","nodeDataAsInitial","minRequiredRows","showRemoveButton","sub","scrolled","onlyIf","setReadonly","bool","forEach","row","rowViewModel","initialValues","initialOverride","items","rowContext","metadata","editMode","dict","Object","keys","reduce","d","prop","itemViewModels","rowReadonly","error","inputValue","index","indexOf","map","_item","input","console","type","ret","visible","add","rowVm","remove","dispose","push","unshift","focusNew","setTimeout","some","rendered","hasFocus","listData","originalRowItems","peek","dataObj","itemKey","filter","dontSendIfEmpty","obj","sendNullIfEmpty","length","initialize","Array","isArray","removeAll","trackDiffChanges","set","i","newData","reverse","update","value","info","lastRow","validations","required","minRows","params","isRequired","r","subscribeToData","warn","subscribe","infinite","newRows","slice","event","elem","target","currentRows","scrollTop","scrollHeight","offsetHeight","seed","allRows","showRemove"],"mappings":"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","file":"listViewModel.js","sourcesContent":["import { observable, observableArray, computed, unwrap } from 'knockout';\nimport { createViewModel } from 'scalejs.metadataFactory';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport noticeboard from 'scalejs.noticeboard';\nimport { merge, has, is } from 'scalejs';\nimport _ from 'lodash';\n\n// todo: revisit comments below\n// listViewModel is a component which manages a simple list\n// - items - items are what are used to make up the rows in the list\n// - options\n// -- addRows - if false add button does not appear\n// -- deleteRows - if false delete button does not appear\n// -- minRequiredRows - initializes list with # of rows and wont let user delete\n\n// TODO: Refactor Session\n// - implement \"parent passes to children\" pattern for labels\n// - brainstorm cleaner \"itemViewModel\" imp.\n// - general clean up/renaming/documenting session\n// ...add more refactor session goals here!\n/**\n *  list is the component to use when wanting to group items into enumerable lists.\n *  There are two types of lists:\n * responsive form lists (default) and table lists (+listAdvanced wrapper)\n *  The underlying data model for a list is an array of objects.\n *\n * @module list\n *\n * @param {object} node\n *  The configuration specs for the component.\n * @param {string} [node.id]\n *  The id of the list becomes the key in the data for all the children of the list.\n *\n */\nconst listItems = {\n    DELETE: del,\n    DELETE_FLAG: deleteFlag\n};\n\nfunction del(itemDef) {\n    const context = this,\n        clonedItem = _.cloneDeep(itemDef);\n\n    delete clonedItem.template; // prevent scalejs merge issue\n\n    return merge(clonedItem, {\n        id: undefined,\n        template: {\n            name: itemDef.template || 'list_del_template',\n            data: context\n        }\n    });\n}\n\nfunction deleteFlag(itemDef) {\n    const context = this;\n    // the id will be the propertu\n    // getValue - return if it was deleted or not\n    return context.isNew ? del.call(context, itemDef) : merge(context, {\n        template: 'list_del_flag_template',\n        getValue: function () {\n            return context.deleteFlag() ? 'T' : 'F';\n        },\n        deleteRow: function () {\n            context.deleteFlag(true);\n            if (itemDef.options && itemDef.options.clearOnDelete) {\n                const item = context.itemDictionary()[itemDef.options.clearOnDelete];\n                if (item && item.setValue) {\n                    item.setValue(0);\n                }\n            }\n        }\n    }, itemDef);\n}\n\n\nexport default function listViewModel(node) {\n    const rows = observableArray(),\n        options = node.options || {},\n        isShown = observable(true),\n        context = this || {},\n        // initialize to the context's state as determined by the form generally\n        readonly = observable((context.readonly && context.readonly()) || false),\n        deleteRows = observable(options.deleteRows !== false),\n        // addButtonContext = node.addButtonContext,\n        mappedChildNodes = observableArray(),\n        data = observable(node.data),\n        unique = {},\n        visibleRows = observableArray(),\n        initialData = _.cloneDeep(node.data) || [],\n        addButtonRendered = is(node.addButtonRendered, 'string') ?\n            computed(evaluate.bind(null, node.addButtonRendered, context.getValue))\n            : observable(node.addButtonRendered !== false);\n    let initial = node.nodeDataAsInitial !== false,\n        minRequiredRows = 0,\n        showRemoveButton = null,\n        sub = null,\n        scrolled,\n        onlyIf;\n\n    function setReadonly(bool) {\n        readonly(bool); // sets readonly state of the list\n        rows().forEach((row) => { // sets readonly state of each row\n            row.readonly(bool);\n        });\n    }\n\n    // rowViewModel\n    // called on each add\n    // or when data is set with initial values\n    function rowViewModel(initialValues, isNew, initialOverride) {\n        const items = observableArray(), // observable array to hold the items in the row\n            // observable dictionary to hold the items and other properties\n            itemDictionary = observable({}),\n            rowContext = {\n                metadata: context.metadata, // reference to the parent metadata\n                rows: rows,\n                unique: unique,\n                isNew: isNew,\n                itemDictionary: itemDictionary,\n                editMode: observable(false), // for styling - maybe better if called isActiveRow\n                deleteFlag: observable(false),\n                data: computed(() => {\n                    const dict = itemDictionary();\n                    return merge(initialValues || {}, Object.keys(dict).reduce((d, id) => {\n                        const item = dict[id];\n                        if (item && item.getValue) {\n                            d[id] = item.getValue();\n                        } else {\n                            d[id] = item;\n                        }\n                        return d;\n                    }, {}));\n                })\n            },\n            row = {}; // the row itself\n        let prop,\n            itemViewModels = null,\n            rowReadonly;\n\n        // initialize row readonly as the list's state\n        rowContext.readonly = observable(readonly());\n\n        // rowReadonly - string to run thrown expression parser to show/hide rows\n        if (is(options.rowReadonly, 'string')) {\n            rowReadonly = computed(() => {\n                if (rowContext.readonly && rowContext.readonly()) {\n                    return true; // if readonly is true on context, then row is readonly\n                }\n                // else, eval the expression to determine if the row is readonly\n                return evaluate(options.rowReadonly, (id) => {\n                    const item = itemDictionary()[id];\n                    if (item && item.getValue) {\n                        return item.getValue();\n                    }\n                });\n            });\n        }\n\n        // can be utilized by expression parser to get error for an id\n        function error(id) {\n            const item = itemDictionary()[id];\n            if (item && item.inputValue && item.inputValue.error) {\n                return item.inputValue.error();\n            }\n        }\n\n        // accurately calculates the index of the row in the list\n        rowContext.index = computed(() => rows().indexOf(row));\n\n        // getValueById function for expression parsing\n        // todo. refactor this\n        rowContext.getValue = function (id) {\n            if (id === 'index') {\n                return rowContext.index();\n            }\n            if (id === 'list') {\n                return rows();\n            }\n            if (id === 'row') {\n                return rows()[rowContext.index()];\n            }\n            if (id === 'error') {\n                return error;\n            }\n            // check the item dictionary\n            const item = itemDictionary()[id];\n            if (item && item.getValue) {\n                return item.getValue();\n            }\n\n            // if the item doesnt have getValue, return itself\n            if (has(item)) {\n                return unwrap(item);\n            }\n\n            prop = rowContext[id];\n\n            if (has(prop)) {\n                return unwrap(prop);\n            }\n\n            return context.getValue(id);\n        };\n\n\n        itemViewModels = node.items.map((_item) => {\n            // deep clone the item as we might mutate it before passing to createViewModels\n            const item = _.cloneDeep(_item);\n\n            // add readonly computed to the item before passing it to input\n            // input will use the already defined observable if it exists\n            // but, if the input already has readonly set on it, dont get readonly from row..\n            if (rowReadonly && item.input && !has(item.input.readonly)) {\n                item.input.readonly = rowReadonly;\n            }\n\n            if (item.options && item.options.unique) {\n                if (!item.id) {\n                    console.error('Cannot set unique on item without id');\n                } else if (!unique[item.id]) { // only create once\n                    unique[item.id] = observableArray();\n                }\n            }\n\n            // todo - clean this up?\n            if (listItems[item.type]) {\n                const ret = listItems[item.type].call(rowContext, item);\n                if (item.visible) {\n                    ret.visible = computed(() => evaluate(item.visible, rowContext.getValue));\n                }\n                return ret;\n            }\n            return createViewModel.call(rowContext, item);\n        });\n\n        // if there are initial values, update the children\n        if (initialValues) {\n            itemViewModels.forEach((item) => {\n                // allow for JSON default values don't get overwritten\n                // by server data that doesn't contain data\n                if (initialValues[item.id]) {\n                    item.setValue && item.setValue(initialValues[item.id], { initial: initialOverride !== false });\n                }\n            });\n        }\n\n        // update items obsArr\n        items(itemViewModels);\n\n        // generate itemDictionary from the itemViewModels\n        // also add each item's inputValue directly on the row\n        // this is for MemberExpressions to work properly (list[0].Status)\n        itemDictionary(itemViewModels.reduce((dict, item) => {\n            if (has(item.id)) {\n                dict[item.id] = item;\n                row[item.id] = item.inputValue;\n            }\n            return dict;\n        }, merge(initialValues || {})));\n        // just in case some data doesnt have a column, keep it in the item dict\n\n        // TODO: ItemDict or Row? which one is better?\n        // rowVM\n        row.items = items;\n        row.itemDictionary = itemDictionary;\n        row.mappedChildNodes = items;\n        row.editMode = rowContext.editMode;\n        row.deleteFlag = rowContext.deleteFlag;\n        row.readonly = function (bool) {\n            items().forEach((item) => {\n                if (item.setReadonly) {\n                    item.setReadonly(bool);\n                } else if (item.readonly) {\n                    item.readonly(bool);\n                }\n            });\n        };\n\n        return row;\n    }\n\n    // generates a new row and add to list\n    function add(row, isNew, initialOverride) {\n        const rowVm = rowViewModel(row, isNew, initialOverride);\n\n        // add remove function to rowVM\n        rowVm.remove = function () {\n            rowVm.items().forEach((item) => {\n                if (item.dispose) {\n                    item.dispose();\n                }\n            });\n            rows.remove(rowVm);\n        };\n\n        if (options.push) {\n            rows.push(rowVm);\n        } else {\n            rows.unshift(rowVm);\n        }\n\n\n        if (isNew === true && options.focusNew !== false) {\n            // auto-focus on the newly added row\n            setTimeout(() => {\n                // need to wait for clickOff events to stop firing.\n                rowVm.editMode(true);\n                (rowVm.items() || []).some((item) => {\n                    if (item.rendered() && item.hasFocus) {\n                        item.hasFocus(true);\n                        return true;\n                    }\n                    return false;\n                });\n            });\n        }\n    }\n\n    // returns the values of the list\n    // e.g. [{item1:'Value1',item2:'Value2'}]\n    // dontSendIfEmpty - this prevents items from getting\n    // sent in the data if that property is empty\n    // if array is empty send null\n    function getValue() {\n        let listData = _.cloneDeep(rows().map((row) => {\n            const originalRowItems = row.itemDictionary.peek();\n            return Object.keys(originalRowItems).reduce((dataObj, itemKey) => {\n                const item = row.itemDictionary.peek()[itemKey];\n\n                if (item && item.getValue) {\n                    dataObj[item.id] = item.getValue();\n                } else if (has(item) && item.type !== 'DELETE') {\n                    dataObj[itemKey] = item;\n                }\n                return dataObj;\n            }, {});\n        }).filter(obj => !(options.dontSendIfEmpty &&\n            (!obj[options.dontSendIfEmpty] && obj[options.dontSendIfEmpty] !== 0))));\n        if (options.sendNullIfEmpty && listData.length === 0) {\n            listData = null;\n        }\n        return listData;\n    }\n\n    // on initialization if the node already has data defined, add rows\n    // else generate the minReqiredRows\n    function initialize() {\n        // console.time('List init');\n        if (data() && Array.isArray(data()) && data().length > 0) {\n            rows().forEach((row) => {\n                row.items().forEach((item) => {\n                    item.dispose && item.dispose();\n                });\n            });\n            rows.removeAll();\n            data().forEach((item) => {\n                add(item, false, initial);\n            });\n\n            // if trackDiffChanges set to true store the original data to noticeboard\n            if (node.trackDiffChanges) {\n                noticeboard.set(node.id, data());\n            }\n        } else {\n            for (let i = rows().length; i < minRequiredRows; i++) {\n                add(null, true, initial);\n            }\n        }\n        initial = undefined;\n        //  console.timeEnd('List init');\n    }\n\n    // sets value in list\n    // or re-inits if data is empty or invalid\n    function setValue(newData) {\n        if ((newData === null ||\n            (Array.isArray(newData) && newData.length === 0)) && getValue() === null) {\n            return; // new data is same as current one (empty array)\n        }\n        // reverse the data because adding now unshifts the rows.\n        if (Array.isArray(newData) && !options.push) {\n            newData.reverse();\n        }\n        data(newData || (initialData || []));\n        initialize();\n    }\n\n    function update(value) {\n        console.info('List only supports udate for value');\n        setValue(value);\n    }\n\n    // returns last row\n    function lastRow() {\n        return rows()[rows().length - 1];\n    }\n\n    // sets minrequired rows\n    if (node.validations && node.validations.required) {\n        const minRows = node.validations.required.params || node.validations.required;\n        minRequiredRows = minRows === true ? 1 : minRows;\n\n        if (node.validations.required.onlyIf) {\n            onlyIf = node.validations.required.onlyIf;\n        }\n    }\n\n    // only show remove button if rows is greater than min req rows\n    showRemoveButton = computed(() => {\n        let isRequired = true;\n        if (onlyIf) {\n            isRequired = evaluate(onlyIf, context.getValue);\n        }\n        return !isRequired ||\n            rows().filter(r => !r.deleteFlag || !r.deleteFlag()).length > minRequiredRows;\n    });\n\n    // get data from data parent if exists\n    if (context.data && !options.subscribeToData) {\n        console.warn('Please make sure you get the Data from setValue or set node.subscribeToData to true! Removing data-subscribe as a default', node);\n    }\n    if (options.subscribeToData && context.data) {\n        if (context.data()[node.id]) {\n            data(context.data()[node.id]);\n        } else {\n            context.data.subscribe((newData) => {\n                if (newData[node.id]) {\n                    data(newData[node.id]);\n                    initialize();\n                }\n            });\n        }\n    }\n\n    initialize();\n\n    // will \"remove\" mapped child nodes if the list is hidden\n    // this is required for validations to work properly\n    // todo: remove this workaround and implement validation on list itself\n    sub = computed(() => {\n        let rendered = true;\n        if (node.rendered) {\n            rendered = evaluate(node.rendered, context.getValue);\n        }\n        if (isShown() && rendered) {\n            mappedChildNodes(rows().filter(row => !row.deleteFlag()));\n        } else {\n            mappedChildNodes([]);\n        }\n    });\n\n    if (node.infinite) {\n        rows.subscribe((newRows) => {\n            visibleRows((newRows || []).slice(0, 20));\n        });\n\n        scrolled = function (event) {\n            const elem = event.target,\n                currentRows = rows();\n\n            if (elem.scrollTop > (elem.scrollHeight - elem.offsetHeight - 35)) {\n                const seed = visibleRows().length;\n                for (let i = 0; i < 20; i++) {\n                    visibleRows.push(currentRows[seed + i]);\n\n                    if (!currentRows[seed + i]) {\n                        // no more rows stahp\n                        break;\n                    }\n                }\n            }\n        };\n    }\n\n\n    return merge(node, {\n        add: add,\n        rows: node.infinite ? visibleRows : rows,\n        options: options,\n        allRows: rows,\n        scrolled: scrolled,\n        mappedChildNodes: mappedChildNodes,\n        isShown: isShown,\n        showRemove: showRemoveButton,\n        getValue: getValue,\n        setValue: setValue,\n        readonly: readonly,\n        deleteRows: deleteRows,\n        lastRow: lastRow,\n        setReadonly: setReadonly,\n        addButtonRendered: addButtonRendered,\n        update: update,\n        dispose() {\n            sub.dispose();\n        }\n    });\n}"]}