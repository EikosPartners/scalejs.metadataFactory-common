{"version":3,"sources":["../../src/list/listViewModel.js"],"names":["listViewModel","listItems","DELETE","del","DELETE_FLAG","deleteFlag","itemDef","context","clonedItem","cloneDeep","template","id","undefined","name","data","isNew","call","getValue","deleteRow","options","clearOnDelete","item","itemDictionary","setValue","node","rows","isShown","readonly","deleteRows","mappedChildNodes","unique","visibleRows","initialData","addButtonRendered","bind","minRequiredRows","showRemoveButton","sub","scrolled","onlyIf","setReadonly","bool","forEach","row","rowViewModel","initialValues","items","rowContext","metadata","editMode","dict","Object","keys","reduce","d","prop","itemViewModels","rowReadonly","error","inputValue","index","indexOf","map","_item","input","console","type","ret","visible","initial","add","rowVm","remove","dispose","push","unshift","setTimeout","some","rendered","hasFocus","listData","originalRowItems","peek","dataObj","itemKey","filter","dontSendIfEmpty","obj","sendNullIfEmpty","length","initialize","Array","isArray","removeAll","trackDiffChanges","set","i","newData","reverse","update","value","info","lastRow","validations","required","minRows","params","isRequired","r","subscribeToData","warn","subscribe","infinite","newRows","slice","event","elem","target","currentRows","scrollTop","scrollHeight","offsetHeight","seed","allRows","showRemove"],"mappings":"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","file":"listViewModel.js","sourcesContent":["import { observable, observableArray, computed, unwrap } from 'knockout';\r\nimport { createViewModel } from 'scalejs.metadataFactory';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport noticeboard from 'scalejs.noticeboard';\r\nimport { merge, has, is } from 'scalejs';\r\nimport _ from 'lodash';\r\n\r\n// todo: revisit comments below\r\n// listViewModel is a component which manages a simple list\r\n// - items - items are what are used to make up the rows in the list\r\n// - options\r\n// -- addRows - if false add button does not appear\r\n// -- deleteRows - if false delete button does not appear\r\n// -- minRequiredRows - initializes list with # of rows and wont let user delete\r\n\r\n// TODO: Refactor Session\r\n// - implement \"parent passes to children\" pattern for labels\r\n// - brainstorm cleaner \"itemViewModel\" imp.\r\n// - general clean up/renaming/documenting session\r\n// ...add more refactor session goals here!\r\n/**\r\n *  list is the component to use when wanting to group items into enumerable lists.\r\n *  There are two types of lists:\r\n * responsive form lists (default) and table lists (+listAdvanced wrapper)\r\n *  The underlying data model for a list is an array of objects.\r\n *\r\n * @module list\r\n *\r\n * @param {object} node\r\n *  The configuration specs for the component.\r\n * @param {string} [node.id]\r\n *  The id of the list becomes the key in the data for all the children of the list.\r\n *\r\n */\r\nconst listItems = {\r\n    DELETE: del,\r\n    DELETE_FLAG: deleteFlag\r\n};\r\n\r\nfunction del(itemDef) {\r\n    const context = this,\r\n        clonedItem = _.cloneDeep(itemDef);\r\n\r\n    delete clonedItem.template; // prevent scalejs merge issue\r\n\r\n    return merge(clonedItem, {\r\n        id: undefined,\r\n        template: {\r\n            name: itemDef.template || 'list_del_template',\r\n            data: context\r\n        }\r\n    });\r\n}\r\n\r\nfunction deleteFlag(itemDef) {\r\n    const context = this;\r\n    // the id will be the propertu\r\n    // getValue - return if it was deleted or not\r\n    return context.isNew ? del.call(context, itemDef) : merge(context, {\r\n        template: 'list_del_flag_template',\r\n        getValue: function () {\r\n            return context.deleteFlag() ? 'T' : 'F';\r\n        },\r\n        deleteRow: function () {\r\n            context.deleteFlag(true);\r\n            if (itemDef.options && itemDef.options.clearOnDelete) {\r\n                const item = context.itemDictionary()[itemDef.options.clearOnDelete];\r\n                if (item && item.setValue) {\r\n                    item.setValue(0);\r\n                }\r\n            }\r\n        }\r\n    }, itemDef);\r\n}\r\n\r\n\r\nexport default function listViewModel(node) {\r\n    const rows = observableArray(),\r\n        options = node.options || {},\r\n        isShown = observable(true),\r\n        context = this || {},\r\n        // initialize to the context's state as determined by the form generally\r\n        readonly = observable((context.readonly && context.readonly()) || false),\r\n        deleteRows = observable(options.deleteRows !== false),\r\n        // addButtonContext = node.addButtonContext,\r\n        mappedChildNodes = observableArray(),\r\n        data = observable(node.data),\r\n        unique = {},\r\n        visibleRows = observableArray(),\r\n        initialData = _.cloneDeep(node.data) || [],\r\n        addButtonRendered = is(node.addButtonRendered, 'string') ?\r\n            computed(evaluate.bind(null, node.addButtonRendered, context.getValue))\r\n            : observable(node.addButtonRendered !== false);\r\n    let minRequiredRows = 0,\r\n        showRemoveButton = null,\r\n        sub = null,\r\n        scrolled,\r\n        onlyIf;\r\n\r\n    function setReadonly(bool) {\r\n        readonly(bool); // sets readonly state of the list\r\n        rows().forEach((row) => { // sets readonly state of each row\r\n            row.readonly(bool);\r\n        });\r\n    }\r\n\r\n    // rowViewModel\r\n    // called on each add\r\n    // or when data is set with initial values\r\n    function rowViewModel(initialValues, isNew) {\r\n        const items = observableArray(), // observable array to hold the items in the row\r\n            // observable dictionary to hold the items and other properties\r\n            itemDictionary = observable({}),\r\n            rowContext = {\r\n                metadata: context.metadata, // reference to the parent metadata\r\n                rows: rows,\r\n                unique: unique,\r\n                isNew: isNew,\r\n                itemDictionary: itemDictionary,\r\n                editMode: observable(false), // for styling - maybe better if called isActiveRow\r\n                deleteFlag: observable(false),\r\n                data: computed(() => {\r\n                    const dict = itemDictionary();\r\n                    return Object.keys(dict).reduce((d, id) => {\r\n                        const item = dict[id];\r\n                        if (item && item.getValue) {\r\n                            d[id] = item.getValue();\r\n                        } else {\r\n                            d[id] = item;\r\n                        }\r\n                        return d;\r\n                    }, {});\r\n                })\r\n            },\r\n            row = {}; // the row itself\r\n        let prop,\r\n            itemViewModels = null,\r\n            rowReadonly;\r\n\r\n        // initialize row readonly as the list's state\r\n        rowContext.readonly = observable(readonly());\r\n\r\n        // rowReadonly - string to run thrown expression parser to show/hide rows\r\n        if (is(options.rowReadonly, 'string')) {\r\n            rowReadonly = computed(() => {\r\n                if (rowContext.readonly && rowContext.readonly()) {\r\n                    return true; // if readonly is true on context, then row is readonly\r\n                }\r\n                // else, eval the expression to determine if the row is readonly\r\n                return evaluate(options.rowReadonly, (id) => {\r\n                    const item = itemDictionary()[id];\r\n                    if (item && item.getValue) {\r\n                        return item.getValue();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        // can be utilized by expression parser to get error for an id\r\n        function error(id) {\r\n            const item = itemDictionary()[id];\r\n            if (item && item.inputValue && item.inputValue.error) {\r\n                return item.inputValue.error();\r\n            }\r\n        }\r\n\r\n        // accurately calculates the index of the row in the list\r\n        rowContext.index = computed(() => rows().indexOf(row));\r\n\r\n        // getValueById function for expression parsing\r\n        // todo. refactor this\r\n        rowContext.getValue = function (id) {\r\n            if (id === 'index') {\r\n                return rowContext.index();\r\n            }\r\n            if (id === 'list') {\r\n                return rows();\r\n            }\r\n            if (id === 'row') {\r\n                return rows()[rowContext.index()];\r\n            }\r\n            if (id === 'error') {\r\n                return error;\r\n            }\r\n            // check the item dictionary\r\n            const item = itemDictionary()[id];\r\n            if (item && item.getValue) {\r\n                return item.getValue();\r\n            }\r\n\r\n            // if the item doesnt have getValue, return itself\r\n            if (has(item)) {\r\n                return unwrap(item);\r\n            }\r\n\r\n            prop = rowContext[id];\r\n\r\n            if (has(prop)) {\r\n                return unwrap(prop);\r\n            }\r\n\r\n            return context.getValue(id);\r\n        };\r\n\r\n\r\n        itemViewModels = node.items.map((_item) => {\r\n            // deep clone the item as we might mutate it before passing to createViewModels\r\n            const item = _.cloneDeep(_item);\r\n\r\n            // add readonly computed to the item before passing it to input\r\n            // input will use the already defined observable if it exists\r\n            // but, if the input already has readonly set on it, dont get readonly from row..\r\n            if (rowReadonly && item.input && !has(item.input.readonly)) {\r\n                item.input.readonly = rowReadonly;\r\n            }\r\n\r\n            if (item.options && item.options.unique) {\r\n                if (!item.id) {\r\n                    console.error('Cannot set unique on item without id');\r\n                } else if (!unique[item.id]) { // only create once\r\n                    unique[item.id] = observableArray();\r\n                }\r\n            }\r\n\r\n            // todo - clean this up?\r\n            if (listItems[item.type]) {\r\n                const ret = listItems[item.type].call(rowContext, item);\r\n                if (item.visible) {\r\n                    ret.visible = computed(() => evaluate(item.visible, rowContext.getValue));\r\n                }\r\n                return ret;\r\n            }\r\n            return createViewModel.call(rowContext, item);\r\n        });\r\n\r\n        // if there are initial values, update the children\r\n        if (initialValues) {\r\n            itemViewModels.forEach((item) => {\r\n                // allow for JSON default values don't get overwritten\r\n                // by server data that doesn't contain data\r\n                if (initialValues[item.id]) {\r\n                    item.setValue && item.setValue(initialValues[item.id], { initial: true });\r\n                }\r\n            });\r\n        }\r\n\r\n        // update items obsArr\r\n        items(itemViewModels);\r\n\r\n        // generate itemDictionary from the itemViewModels\r\n        // also add each item's inputValue directly on the row\r\n        // this is for MemberExpressions to work properly (list[0].Status)\r\n        itemDictionary(itemViewModels.reduce((dict, item) => {\r\n            if (has(item.id)) {\r\n                dict[item.id] = item;\r\n                row[item.id] = item.inputValue;\r\n            }\r\n            return dict;\r\n        }, merge(initialValues || {})));\r\n        // just in case some data doesnt have a column, keep it in the item dict\r\n\r\n        // TODO: ItemDict or Row? which one is better?\r\n        // rowVM\r\n        row.items = items;\r\n        row.itemDictionary = itemDictionary;\r\n        row.mappedChildNodes = items;\r\n        row.editMode = rowContext.editMode;\r\n        row.deleteFlag = rowContext.deleteFlag;\r\n        row.readonly = function (bool) {\r\n            items().forEach((item) => {\r\n                if (item.setReadonly) {\r\n                    item.setReadonly(bool);\r\n                } else if (item.readonly) {\r\n                    item.readonly(bool);\r\n                }\r\n            });\r\n        };\r\n\r\n        return row;\r\n    }\r\n\r\n    // generates a new row and add to list\r\n    function add(row, isNew) {\r\n        const rowVm = rowViewModel(row, isNew);\r\n\r\n        // add remove function to rowVM\r\n        rowVm.remove = function () {\r\n            rowVm.items().forEach((item) => {\r\n                if (item.dispose) {\r\n                    item.dispose();\r\n                }\r\n            });\r\n            rows.remove(rowVm);\r\n        };\r\n\r\n        if (options.push) {\r\n            rows.push(rowVm);\r\n        } else {\r\n            rows.unshift(rowVm);\r\n        }\r\n\r\n\r\n        if (isNew === true) {\r\n            // auto-focus on the newly added row\r\n            setTimeout(() => {\r\n                // need to wait for clickOff events to stop firing.\r\n                rowVm.editMode(true);\r\n                (rowVm.items() || []).some((item) => {\r\n                    if (item.rendered() && item.hasFocus) {\r\n                        item.hasFocus(true);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    // returns the values of the list\r\n    // e.g. [{item1:'Value1',item2:'Value2'}]\r\n    // dontSendIfEmpty - this prevents items from getting\r\n    // sent in the data if that property is empty\r\n    // if array is empty send null\r\n    function getValue() {\r\n        let listData = _.cloneDeep(rows().map((row) => {\r\n            const originalRowItems = row.itemDictionary.peek();\r\n            return Object.keys(originalRowItems).reduce((dataObj, itemKey) => {\r\n                const item = row.itemDictionary.peek()[itemKey];\r\n\r\n                if (item && item.getValue) {\r\n                    dataObj[item.id] = item.getValue();\r\n                } else if (has(item) && item.type !== 'DELETE') {\r\n                    dataObj[itemKey] = item;\r\n                }\r\n                return dataObj;\r\n            }, {});\r\n        }).filter(obj => !(options.dontSendIfEmpty &&\r\n            (!obj[options.dontSendIfEmpty] && obj[options.dontSendIfEmpty] !== 0))));\r\n        if (options.sendNullIfEmpty && listData.length === 0) {\r\n            listData = null;\r\n        }\r\n        return listData;\r\n    }\r\n\r\n    // on initialization if the node already has data defined, add rows\r\n    // else generate the minReqiredRows\r\n    function initialize() {\r\n        // console.time('List init');\r\n        if (data() && Array.isArray(data()) && data().length > 0) {\r\n            rows().forEach((row) => {\r\n                row.items().forEach((item) => {\r\n                    item.dispose && item.dispose();\r\n                });\r\n            });\r\n            rows.removeAll();\r\n            data().forEach((item) => {\r\n                add(item, false);\r\n            });\r\n\r\n            // if trackDiffChanges set to true store the original data to noticeboard\r\n            if (node.trackDiffChanges) {\r\n                noticeboard.set(node.id, data());\r\n            }\r\n        } else {\r\n            for (let i = rows().length; i < minRequiredRows; i++) {\r\n                add(null, true);\r\n            }\r\n        }\r\n        //  console.timeEnd('List init');\r\n    }\r\n\r\n    // sets value in list\r\n    // or re-inits if data is empty or invalid\r\n    function setValue(newData) {\r\n        if ((newData === null ||\r\n            (Array.isArray(newData) && newData.length === 0)) && getValue() === null) {\r\n            return; // new data is same as current one (empty array)\r\n        }\r\n        // reverse the data because adding now unshifts the rows.\r\n        if (Array.isArray(newData) && !options.push) {\r\n            newData.reverse();\r\n        }\r\n        data(newData || (initialData || []));\r\n        initialize();\r\n    }\r\n\r\n    function update(value) {\r\n        console.info('List only supports udate for value');\r\n        setValue(value);\r\n    }\r\n\r\n    // returns last row\r\n    function lastRow() {\r\n        return rows()[rows().length - 1];\r\n    }\r\n\r\n    // sets minrequired rows\r\n    if (node.validations && node.validations.required) {\r\n        const minRows = node.validations.required.params || node.validations.required;\r\n        minRequiredRows = minRows === true ? 1 : minRows;\r\n\r\n        if (node.validations.required.onlyIf) {\r\n            onlyIf = node.validations.required.onlyIf;\r\n        }\r\n    }\r\n\r\n    // only show remove button if rows is greater than min req rows\r\n    showRemoveButton = computed(() => {\r\n        let isRequired = true;\r\n        if (onlyIf) {\r\n            isRequired = evaluate(onlyIf, context.getValue);\r\n        }\r\n        return !isRequired ||\r\n            rows().filter(r => !r.deleteFlag || !r.deleteFlag()).length > minRequiredRows;\r\n    });\r\n\r\n    // get data from data parent if exists\r\n    if (context.data && !options.subscribeToData) {\r\n        console.warn('Please make sure you get the Data from setValue or set node.subscribeToData to true! Removing data-subscribe as a default', node);\r\n    }\r\n    if (options.subscribeToData && context.data) {\r\n        if (context.data()[node.id]) {\r\n            data(context.data()[node.id]);\r\n        } else {\r\n            context.data.subscribe((newData) => {\r\n                if (newData[node.id]) {\r\n                    data(newData[node.id]);\r\n                    initialize();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    initialize();\r\n\r\n    // will \"remove\" mapped child nodes if the list is hidden\r\n    // this is required for validations to work properly\r\n    // todo: remove this workaround and implement validation on list itself\r\n    sub = computed(() => {\r\n        let rendered = true;\r\n        if (node.rendered) {\r\n            rendered = evaluate(node.rendered, context.getValue);\r\n        }\r\n        if (isShown() && rendered) {\r\n            mappedChildNodes(rows().filter(row => !row.deleteFlag()));\r\n        } else {\r\n            mappedChildNodes([]);\r\n        }\r\n    });\r\n\r\n    if (node.infinite) {\r\n        rows.subscribe((newRows) => {\r\n            visibleRows((newRows || []).slice(0, 20));\r\n        });\r\n\r\n        scrolled = function (event) {\r\n            const elem = event.target,\r\n                currentRows = rows();\r\n\r\n            if (elem.scrollTop > (elem.scrollHeight - elem.offsetHeight - 35)) {\r\n                const seed = visibleRows().length;\r\n                for (let i = 0; i < 20; i++) {\r\n                    visibleRows.push(currentRows[seed + i]);\r\n\r\n                    if (!currentRows[seed + i]) {\r\n                        // no more rows stahp\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    return merge(node, {\r\n        add: add,\r\n        rows: node.infinite ? visibleRows : rows,\r\n        options: options,\r\n        allRows: rows,\r\n        scrolled: scrolled,\r\n        mappedChildNodes: mappedChildNodes,\r\n        isShown: isShown,\r\n        showRemove: showRemoveButton,\r\n        getValue: getValue,\r\n        setValue: setValue,\r\n        readonly: readonly,\r\n        deleteRows: deleteRows,\r\n        lastRow: lastRow,\r\n        setReadonly: setReadonly,\r\n        addButtonRendered: addButtonRendered,\r\n        update: update,\r\n        dispose() {\r\n            sub.dispose();\r\n        }\r\n    });\r\n}"]}