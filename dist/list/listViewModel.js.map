{"version":3,"sources":["../../src/list/listViewModel.js"],"names":["listViewModel","listItems","DELETE","del","DELETE_FLAG","deleteFlag","itemDef","context","clonedItem","cloneDeep","template","id","undefined","name","data","isNew","call","getValue","deleteRow","options","clearOnDelete","item","itemDictionary","setValue","node","keyMap","rows","isShown","readonly","deleteRows","minRequiredRows","showRemoveButton","mappedChildNodes","unique","visibleRows","scrolled","initialData","addButtonRendered","bind","setReadonly","bool","forEach","row","rowViewModel","initialValues","items","rowContext","metadata","editMode","dict","Object","keys","reduce","d","itemViewModels","rowReadonly","error","inputValue","index","indexOf","prop","map","_item","input","console","type","ret","visible","add","rowVm","remove","dispose","push","unshift","setTimeout","some","rendered","hasFocus","originalData","peek","listData","originalRowItems","dataObj","itemKey","filter","obj","dontSendIfEmpty","sendNullIfEmpty","length","initialize","removeAll","trackDiffChanges","set","i","newData","Array","isArray","reverse","lastRow","validations","required","subscribeToData","warn","subscribe","infinite","newRows","slice","event","elem","target","currentRows","scrollTop","scrollHeight","offsetHeight","seed","allRows","showRemove"],"mappings":"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","file":"listViewModel.js","sourcesContent":["import { observable, observableArray, computed, unwrap } from 'knockout';\r\nimport { createViewModel } from 'scalejs.metadataFactory';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport noticeboard from 'scalejs.noticeboard';\r\nimport { merge, has, is } from 'scalejs';\r\nimport _ from 'lodash';\r\n\r\n    // todo: revisit comments below\r\n    // listViewModel is a component which manages a simple list\r\n    // - items - items are what are used to make up the rows in the list\r\n    // - options\r\n    // -- addRows - if false add button does not appear\r\n    // -- deleteRows - if false delete button does not appear\r\n    // -- minRequiredRows - initializes list with # of rows and wont let user delete\r\n\r\n    //TODO: Refactor Session\r\n    //- implement \"parent passes to children\" pattern for labels\r\n    //- brainstorm cleaner \"itemViewModel\" imp.\r\n    //- general clean up/renaming/documenting session\r\n    // ...add more refactor session goals here!\r\n    /**\r\n     *  list is the component to use when wanting to group items into enumerable lists.\r\n     *  There are two types of lists: responsive form lists (default) and table lists (+listAdvanced wrapper)\r\n     *  The underlying data model for a list is an array of objects.\r\n     *\r\n     * @module list\r\n     *\r\n     * @param {object} node\r\n     *  The configuration specs for the component.\r\n     * @param {string} [node.id]\r\n     *  The id of the list becomes the key in the data for all the children of the list.\r\n     *\r\n     */\r\n    let listItems = {\r\n        DELETE: del,\r\n        DELETE_FLAG: deleteFlag\r\n    };\r\n\r\n    function del(itemDef) {\r\n        var context = this,\r\n            clonedItem = _.cloneDeep(itemDef);\r\n\r\n        delete clonedItem.template; // prevent scalejs merge issue\r\n\r\n        return merge(clonedItem, {\r\n            id: undefined,\r\n            template: {\r\n                name: itemDef.template ||'list_del_template',\r\n                data: context\r\n            }\r\n        })\r\n    }\r\n\r\n    function deleteFlag(itemDef) {\r\n        var context = this;\r\n        // the id will be the propertu\r\n        // getValue - return if it was deleted or not\r\n        return context.isNew ? del.call(context, itemDef) : merge(context, {\r\n            template: 'list_del_flag_template',\r\n            getValue: function () {\r\n                return context.deleteFlag() ? \"T\" : \"F\";\r\n            },\r\n            deleteRow: function () {\r\n                context.deleteFlag(true);\r\n                if(itemDef.options && itemDef.options.clearOnDelete) {\r\n                    var item = context.itemDictionary()[itemDef.options.clearOnDelete];\r\n                    if(item && item.setValue) {\r\n                        item.setValue(0);\r\n                    }\r\n                }\r\n            }\r\n        }, itemDef)\r\n    }\r\n\r\n\r\n\r\n    export default function listViewModel(node) {\r\n        var  keyMap = node.keyMap || {},\r\n            rows = observableArray(),\r\n            options = node.options || {},\r\n            isShown = observable(true),\r\n            context = this || {},\r\n            readonly = observable((context.readonly && context.readonly()) || false), //initialize to the context's state as determined by the form generally\r\n            deleteRows = observable(options.deleteRows !== false),\r\n            minRequiredRows = 0,\r\n            showRemoveButton,\r\n            // addButtonContext = node.addButtonContext,\r\n            mappedChildNodes = observableArray(),\r\n            data = observable(node.data),\r\n            unique = {},\r\n            visibleRows = observableArray(),\r\n            scrolled,\r\n            initialData = _.cloneDeep(node.data) || [],\r\n            addButtonRendered = is(node.addButtonRendered, 'string') ? \r\n                computed(evaluate.bind(null, node.addButtonRendered, context.getValue)) \r\n                : observable(node.addButtonRendered !== false);\r\n\r\n        function setReadonly (bool) {\r\n          readonly(bool); //sets readonly state of the list\r\n          rows().forEach(function (row) { //sets readonly state of each row\r\n            row.readonly(bool)\r\n          });\r\n        }\r\n\r\n        // rowViewModel\r\n        // called on each add\r\n        // or when data is set with initial values\r\n        function rowViewModel(initialValues, isNew) {\r\n            var items = observableArray(), // observable array to hold the items in the row\r\n                itemDictionary = observable({}), // observable dictionary to hold the items and other properties\r\n                rowContext = {\r\n                    metadata: context.metadata, // reference to the parent metadata\r\n                    rows: rows,\r\n                    unique: unique,\r\n                    isNew: isNew,\r\n                    itemDictionary: itemDictionary,\r\n                    editMode: observable(false), //for styling - maybe better if called isActiveRow\r\n                    deleteFlag: observable(false),\r\n                    data: computed(function () {\r\n                        var dict = itemDictionary();\r\n                         return Object.keys(dict).reduce(function (d, id) {\r\n                            var item = dict[id];\r\n                            if(item && item.getValue) {\r\n                                d[id] = item.getValue();\r\n                            } else {\r\n                                d[id] = item;\r\n                            }\r\n                            return d;\r\n                        }, {});\r\n                    })\r\n                },\r\n                row = {}, // the row itself\r\n                itemViewModels,\r\n                rowReadonly;\r\n\r\n            // initialize row readonly as the list's state\r\n            rowContext.readonly = observable(readonly());\r\n\r\n            // rowReadonly - string to run thrown expression parser to show/hide rows\r\n            if (is(options.rowReadonly, 'string')) {\r\n                rowReadonly = computed(function () {\r\n                    if (rowContext.readonly && rowContext.readonly()) {\r\n                        return true; //if readonly is true on context, then row is readonly\r\n                    }\r\n                    // else, eval the expression to determine if the row is readonly\r\n                    return evaluate(options.rowReadonly, function (id) {\r\n                        var item = itemDictionary()[id];\r\n                        if (item && item.getValue) {\r\n                            return item.getValue();\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            // can be utilized by expression parser to get error for an id\r\n            function error(id) {\r\n                var item = itemDictionary()[id];\r\n                if(item && item.inputValue && item.inputValue.error) {\r\n                    return item.inputValue.error();\r\n                }\r\n            }\r\n\r\n            // accurately calculates the index of the row in the list\r\n            rowContext.index = computed(function () {\r\n                return rows().indexOf(row);\r\n            });\r\n\r\n            // getValueById function for expression parsing\r\n            // todo. refactor this\r\n            rowContext.getValue = function (id) {\r\n               if (id === 'index') {\r\n                    return rowContext.index();\r\n                }\r\n                if (id === 'list') {\r\n                    return rows();\r\n                }\r\n                if (id === 'row') {\r\n                    return rows()[rowContext.index()];\r\n                }\r\n                if (id === 'error') {\r\n                    return error;\r\n                }\r\n                // check the item dictionary\r\n                var item = itemDictionary()[id];\r\n                if (item && item.getValue) {\r\n                    return item.getValue();\r\n                }\r\n\r\n                // if the item doesnt have getValue, return itself\r\n                if (has(item)) {\r\n                    return unwrap(item);\r\n                }\r\n\r\n                let prop = rowContext[id];\r\n\r\n                if (has(prop)) {\r\n                    return unwrap(prop);\r\n                }\r\n\r\n                return context.getValue(id);\r\n            }\r\n\r\n\r\n            itemViewModels = node.items.map(function (_item) {\r\n                var item = _.cloneDeep(_item); // deep clone the item as we might mutate it before passing to createViewModels\r\n\r\n                // add readonly computed to the item before passing it to input\r\n                // input will use the already defined observable if it exists\r\n                // but, if the input already has readonly set on it, dont get readonly from row..\r\n                if (rowReadonly && item.input && !has(item.input.readonly)) {\r\n                    item.input.readonly = rowReadonly;\r\n                }\r\n\r\n                if(item.options && item.options.unique) {\r\n                    if(!item.id) {\r\n                        console.error('Cannot set unique on item without id');\r\n                    } else if (!unique[item.id]) { //only create once\r\n                        unique[item.id] = observableArray();\r\n                    }\r\n                }\r\n\r\n                // todo - clean this up?\r\n                if (listItems[item.type]) {\r\n                    var ret = listItems[item.type].call(rowContext, item);\r\n                    if (item.visible) {\r\n                        ret.visible = computed(function () {\r\n                            return evaluate(item.visible, rowContext.getValue);\r\n                        });\r\n                    }\r\n                    return ret;\r\n                } else {\r\n                    return createViewModel.call(rowContext, item);\r\n                }\r\n            });\r\n\r\n            // if there are initial values, update the children\r\n            if (initialValues) {\r\n                itemViewModels.forEach(function(item) {\r\n                    if (initialValues[item.id]) { // allow for JSON default values don't get overwritten by server data that doesn't contain data\r\n                        item.setValue && item.setValue(initialValues[item.id]);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // update items obsArr\r\n            items(itemViewModels);\r\n\r\n            // generate itemDictionary from the itemViewModels\r\n            // also add each item's inputValue directly on the row\r\n            // this is for MemberExpressions to work properly (list[0].Status)\r\n            itemDictionary(itemViewModels.reduce(function(dict, item) {\r\n                if(has(item.id)) {\r\n                    dict[item.id] = item;\r\n                    row[item.id] = item.inputValue;\r\n                }\r\n                return dict;\r\n            }, merge(initialValues || {}))); // just in case some data doesnt have a column, keep it in the item dict\r\n\r\n            // TODO: ItemDict or Row? which one is better?\r\n            // rowVM\r\n            row.items = items;\r\n            row.itemDictionary = itemDictionary;\r\n            row.mappedChildNodes = items;\r\n            row.editMode = rowContext.editMode;\r\n            row.deleteFlag = rowContext.deleteFlag;\r\n            row.readonly = function (bool) {\r\n              items().forEach(function (item) {\r\n                if (item.setReadonly) {\r\n                    item.setReadonly(bool);\r\n                } else if (item.readonly) {\r\n                  item.readonly(bool)\r\n                }\r\n              });\r\n            };\r\n\r\n            return row;\r\n        }\r\n\r\n        // generates a new row and add to list\r\n        function add(row, isNew) {\r\n            var rowVm = rowViewModel(row, isNew);\r\n\r\n            // add remove function to rowVM\r\n            rowVm.remove = function () {\r\n                rowVm.items().forEach(function (item) {\r\n                    if(item.dispose) {\r\n                        item.dispose();\r\n                    }\r\n                });\r\n                rows.remove(rowVm);\r\n            }\r\n\r\n            if (options.push) {\r\n                rows.push(rowVm);\r\n            } else {\r\n                rows.unshift(rowVm);\r\n            }\r\n\r\n\r\n            if(isNew === true) {\r\n                // auto-focus on the newly added row\r\n                setTimeout(function () {\r\n                    // need to wait for clickOff events to stop firing.\r\n                    rowVm.editMode(true);\r\n                    (rowVm.items() || []).some(function (item) {\r\n                        if(item.rendered() && item.hasFocus) {\r\n                            item.hasFocus(true);\r\n                            return true;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        // returns the values of the list\r\n        // e.g. [{item1:'Value1',item2:'Value2'}]\r\n        // dontSendIfEmpty - this prevents items from getting sent in the data if that property is empty\r\n        // if array is empty send null\r\n        function getValue() {\r\n            var originalData = data.peek(),\r\n                listData = _.cloneDeep(rows().map(function(row) {\r\n                    var originalRowItems = row.itemDictionary.peek();\r\n                    return Object.keys(originalRowItems).reduce(function (dataObj, itemKey) {\r\n                        var item = row.itemDictionary.peek()[itemKey];\r\n\r\n                        if (item && item.getValue) {\r\n                            dataObj[item.id] = item.getValue();\r\n                        } else if(has(item) && item.type !== 'DELETE') {\r\n                            dataObj[itemKey] = item;\r\n                        }\r\n                        return dataObj;\r\n                    }, {});\r\n                }).filter(function(obj){\r\n                    return !(options.dontSendIfEmpty &&\r\n                        (!obj[options.dontSendIfEmpty] && obj[options.dontSendIfEmpty] !== 0));\r\n                }));\r\n                if (options.sendNullIfEmpty && listData.length === 0) {\r\n                  listData = null;\r\n                }\r\n            return listData;\r\n        }\r\n\r\n        // on initialization if the node already has data defined, add rows\r\n        // else generate the minReqiredRows\r\n        function initialize() {\r\n            //console.time('List init');\r\n            if (data()) {\r\n                rows().forEach(function(row){\r\n                    row.items().forEach(function(item){\r\n                        item.dispose && item.dispose();\r\n                    });\r\n                });\r\n                rows.removeAll();\r\n                data().forEach(function (item) {\r\n                    add(item, false);\r\n                });\r\n\r\n                //if trackDiffChanges set to true store the original data to noticeboard\r\n                if (node.trackDiffChanges) {\r\n                    noticeboard.set(node.id, data());\r\n                }\r\n            } else {\r\n                for (var i = 0; i < minRequiredRows; i ++) {\r\n                    add(null, true);\r\n                }\r\n            }\r\n          //  console.timeEnd('List init');\r\n        }\r\n\r\n        // sets value in list\r\n        // or re-inits if data is empty or invalid\r\n        function setValue(newData) {\r\n            // reverse the data because adding now unshifts the rows.\r\n            if(Array.isArray(newData) && !options.push) {\r\n                newData.reverse();\r\n            }\r\n            data(newData || (initialData || []));\r\n            initialize();\r\n        }\r\n\r\n        // returns last row\r\n        function lastRow() {\r\n            return rows()[rows().length-1];\r\n        }\r\n\r\n        // sets minrequired rows\r\n         if (node.validations && node.validations.required) {\r\n            minRequiredRows = node.validations.required === true ? 1 : node.validations.required;\r\n        }\r\n\r\n        // only show remove button if rows is greater than min req rows\r\n        showRemoveButton = computed(function () {\r\n            return rows().length > minRequiredRows;\r\n        });\r\n\r\n        // get data from data parent if exists\r\n        if (context.data && !options.subscribeToData) {\r\n            console.warn('Please make sure you get the Data from setValue or set node.subscribeToData to true! Removing data-subscribe as a default', node);\r\n        }\r\n        if (options.subscribeToData && context.data) {\r\n            if (context.data()[node.id]) {\r\n                data(context.data()[node.id]);\r\n            } else {\r\n                context.data.subscribe(function (newData) {\r\n                    if (newData[node.id]) {\r\n                        data(newData[node.id]);\r\n                        initialize();\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        initialize();\r\n\r\n        // will \"remove\" mapped child nodes if the list is hidden\r\n        // this is required for validations to work properly\r\n        // todo: remove this workaround and implement validation on list itself\r\n        computed(function () {\r\n            if (isShown()) {\r\n                mappedChildNodes(rows().filter(function (row) {\r\n                    return !row.deleteFlag();\r\n                }));\r\n            } else {\r\n                mappedChildNodes([]);\r\n            }\r\n        });\r\n\r\n        if (node.infinite) {\r\n            rows.subscribe(function (newRows) {\r\n                visibleRows((newRows ||[]).slice(0,20));\r\n            });\r\n\r\n            scrolled = function(event) {\r\n                var elem = event.target,\r\n                    currentRows = rows();\r\n\r\n                if (elem.scrollTop > (elem.scrollHeight - elem.offsetHeight - 35)) {\r\n                    var seed = visibleRows().length;\r\n                    for (var i = 0; i < 20; i++) {\r\n                        visibleRows.push(currentRows[seed+i]);\r\n\r\n                        if(!currentRows[seed+i]) {\r\n                            // no more rows stahp\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return merge(node, {\r\n            add: add,\r\n            rows: node.infinite ? visibleRows : rows,\r\n            allRows: rows,\r\n            scrolled: scrolled,\r\n            mappedChildNodes: mappedChildNodes,\r\n            isShown: isShown,\r\n            showRemove: showRemoveButton,\r\n            getValue: getValue,\r\n            setValue: setValue,\r\n            readonly: readonly,\r\n            deleteRows: deleteRows,\r\n            lastRow: lastRow,\r\n            setReadonly: setReadonly,\r\n            addButtonRendered: addButtonRendered\r\n        });\r\n    };\r\n"]}