{"version":3,"sources":["../../src/accordion/accordionViewModel.js"],"names":["node","context","subs","createViewModels","createViewModelsUnbound","bind","options","mappedChildNodes","isShown","children","sections","map","section","index","visible","openByDefault","header","toggleVisibility","trueAccordion","setAllSectionVisibility","visiblity","forEach","push","id","rendered","getValue","dispose","sub"],"mappings":";;;;;;kBAce,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,UAAU,IAAhB;AAAA,QACIC,OAAO,EADX;AAAA,QAEIC,mBAAmBC,0BAAwBC,IAAxB,CAA6B,IAA7B,CAFvB;AAAA,QAE2D;AACvDC,cAAUN,KAAKM,OAAL,IAAgB,EAH9B;AAAA,QAIIC,mBAAmB,gCAJvB;AAAA,QAKIC,UAAU,0BAAW,IAAX,CALd;AAAA,QAMIC,WAAWN,iBAAiBH,KAAKS,QAAtB,CANf;;AAQA,QAAIC,WAAW,IAAf;;AAEAH,qBAAiBE,QAAjB;;AAGAC,eAAWV,KAAKU,QAAL,CAAcC,GAAd,CAAkB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC7C,YAAMC,UAAU,0BAAWR,QAAQS,aAAR,KAA0B,KAArC,CAAhB;AACA,eAAO,qBAAMN,SAASI,KAAT,CAAN,EAAuB;AAC1BG,oBAAQJ,OADkB;AAE1BE,qBAASA,OAFiB;AAG1BG,8BAAkB,4BAAY;AAC1B,oBAAI,CAACH,SAAD,IAAcR,OAAd,IAAyBA,QAAQY,aAArC,EAAoD;AAChDC,4CAAwB,KAAxB;AACH;AACDL,wBAAQ,CAACA,SAAT;AACH;AARyB,SAAvB,CAAP;AAUH,KAZU,CAAX;;AAcA,aAASK,uBAAT,CAAiCC,SAAjC,EAA4C;AACxCV,iBAASW,OAAT,CAAiB,UAACT,OAAD,EAAa;AAC1BA,oBAAQE,OAAR,CAAgBM,SAAhB;AACH,SAFD;AAGH;;AAEDlB,SAAKoB,IAAL,CAAU,uBAAWtB,KAAKuB,EAAhB,mBAAkC,YAAM;AAC9CJ,gCAAwB,KAAxB;AACH,KAFS,CAAV;;AAIAjB,SAAKoB,IAAL,CAAU,uBAAWtB,KAAKuB,EAAhB,iBAAgC,YAAM;AAC5CJ,gCAAwB,IAAxB;AACH,KAFS,CAAV;;AAIA,QAAInB,KAAKwB,QAAT,EAAmB;AACftB,aAAKoB,IAAL,CAAU,wBAAS,YAAM;AACrB,gBAAME,WAAW,wBAASxB,KAAKwB,QAAd,EAAwBvB,QAAQwB,QAAhC,CAAjB;AACAlB,6BAAiBiB,WAAWf,QAAX,GAAsB,EAAvC;AACH,SAHS,CAAV;AAIH;;AAED,WAAO,qBAAMT,IAAN,EAAY;AACfQ,iBAASA,OADM;AAEfE,kBAAUA,QAFK;AAGfH,0BAAkBA,gBAHH;AAIfY,iCAAyBA,uBAJV;AAKfO,iBAAS,mBAAY;AACjBxB,iBAAKmB,OAAL,CAAa,UAACM,GAAD,EAAS;AAClBA,oBAAID,OAAJ;AACH,aAFD;AAGH;AATc,KAAZ,CAAP;AAWH,C;;AA1ED;;AACA;;AACA;;AACA;;AACA","file":"accordionViewModel.js","sourcesContent":["import { createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory';\nimport { unwrap, computed, observable, observableArray } from 'knockout';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport { receive } from 'scalejs.messagebus';\nimport { merge } from 'scalejs';\n\n\n    /*\n     * Responsible for combining sections with children\n     * Sections contain the names of the headers\n     * There is one child per section\n     */\n\n    // TODO: add docs\nexport default function (node) {\n    const context = this,\n        subs = [],\n        createViewModels = createViewModelsUnbound.bind(this), // ensures context is passed\n        options = node.options || {},\n        mappedChildNodes = observableArray(),\n        isShown = observable(true),\n        children = createViewModels(node.children);\n\n    let sections = null;\n\n    mappedChildNodes(children);\n\n\n    sections = node.sections.map((section, index) => {\n        const visible = observable(options.openByDefault !== false);\n        return merge(children[index], {\n            header: section,\n            visible: visible,\n            toggleVisibility: function () {\n                if (!visible() && options && options.trueAccordion) {\n                    setAllSectionVisibility(false);\n                }\n                visible(!visible());\n            }\n        });\n    });\n\n    function setAllSectionVisibility(visiblity) {\n        sections.forEach((section) => {\n            section.visible(visiblity);\n        });\n    }\n\n    subs.push(receive(`${node.id}.collapseAll`, () => {\n        setAllSectionVisibility(false);\n    }));\n\n    subs.push(receive(`${node.id}.expandAll`, () => {\n        setAllSectionVisibility(true);\n    }));\n\n    if (node.rendered) {\n        subs.push(computed(() => {\n            const rendered = evaluate(node.rendered, context.getValue);\n            mappedChildNodes(rendered ? children : []);\n        }));\n    }\n\n    return merge(node, {\n        isShown: isShown,\n        sections: sections,\n        mappedChildNodes: mappedChildNodes,\n        setAllSectionVisibility: setAllSectionVisibility,\n        dispose: function () {\n            subs.forEach((sub) => {\n                sub.dispose();\n            });\n        }\n    });\n}"]}