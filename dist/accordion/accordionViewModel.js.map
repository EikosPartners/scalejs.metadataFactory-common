{"version":3,"sources":["../../src/accordion/accordionViewModel.js"],"names":[],"mappings":";;;;;;kBAcmB,UAAU,IAAV,EAAgB,QAAhB,EAA0B;AACrC,QAAI,OAAO,EAAX;AAAA,QACI,mBAAmB,0BAAwB,IAAxB,CAA6B,IAA7B,CADvB;AAAA,QAC2D;AACvD,cAAU,KAAK,OAAL,IAAgB,EAF9B;AAAA,QAGI,gBAHJ;AAAA,QAII,QAJJ;AAAA,QAKI,UAAU,0BAAW,IAAX,CALd;;AAOA,uBAAmB,iBAAiB,KAAK,QAAtB,CAAnB;;AAGA,eAAW,KAAK,QAAL,CAAc,GAAd,CAAkB,UAAU,OAAV,EAAmB,KAAnB,EAA0B;AACnD,YAAI,UAAU,0BAAW,QAAQ,aAAR,KAA0B,KAA1B,GAAkC,KAAlC,GAA0C,IAArD,CAAd;AACA,eAAO,qBAAM,iBAAiB,KAAjB,CAAN,EAA+B;AAClC,oBAAQ,OAD0B;AAElC,qBAAS,OAFyB;AAGlC,8BAAkB,4BAAY;AAC1B,oBAAG,CAAC,SAAD,IAAc,OAAd,IAAyB,QAAQ,aAApC,EAAkD;AAC9C,4CAAwB,KAAxB;AACH;AACD,wBAAQ,CAAC,SAAT;AACH;AARiC,SAA/B,CAAP;AAUH,KAZU,CAAX;;AAcA,aAAS,uBAAT,CAAiC,SAAjC,EAA4C;AACxC,iBAAS,OAAT,CAAiB,UAAS,OAAT,EAAkB;AAChC,oBAAQ,OAAR,CAAgB,SAAhB;AACF,SAFD;AAGH;;AAED,SAAK,IAAL,CAAU,uBAAQ,KAAK,EAAL,GAAU,cAAlB,EAAkC,UAAS,IAAT,EAAe;AACvD,gCAAwB,KAAxB;AACH,KAFS,CAAV;;AAIA,SAAK,IAAL,CAAU,uBAAQ,KAAK,EAAL,GAAU,YAAlB,EAAgC,UAAS,IAAT,EAAe;AACrD,gCAAwB,IAAxB;AACH,KAFS,CAAV;;AAIA,WAAO,qBAAM,IAAN,EAAY;AACf,iBAAS,OADM;AAEf,kBAAU,QAFK;AAGf,0BAAkB,gBAHH;AAIf,iCAAyB,uBAJV;AAKf,iBAAS,mBAAY;AACjB,iBAAK,OAAL,CAAa,UAAS,GAAT,EAAc;AACvB,oBAAI,OAAJ;AACH,aAFD;AAGH;AATc,KAAZ,CAAP;AAWH,C;;AA/DL;;AACA;;AACA;;AACA;;AA4DK;;AAzDD;;;;;;AAMA;AAbJ","file":"accordionViewModel.js","sourcesContent":["/*global define, ko*/\r\nimport { createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory';\r\nimport { unwrap, computed, observable } from 'knockout';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport { merge } from 'scalejs';\r\n\r\n\r\n    /*\r\n     * Responsible for combining sections with children\r\n     * Sections contain the names of the headers\r\n     * There is one child per section\r\n     */\r\n\r\n    // TODO: add docs\r\n    export default function (node, metadata) {\r\n        var subs = [],\r\n            createViewModels = createViewModelsUnbound.bind(this), //ensures context is passed\r\n            options = node.options || {},\r\n            mappedChildNodes,\r\n            sections,\r\n            isShown = observable(true);\r\n\r\n        mappedChildNodes = createViewModels(node.children);\r\n\r\n    \r\n        sections = node.sections.map(function (section, index) {\r\n            var visible = observable(options.openByDefault === false ? false : true);\r\n            return merge(mappedChildNodes[index], {\r\n                header: section,\r\n                visible: visible,\r\n                toggleVisibility: function () {\r\n                    if(!visible() && options && options.trueAccordion){\r\n                        setAllSectionVisibility(false);\r\n                    }\r\n                    visible(!visible());\r\n                }\r\n            });\r\n        });\r\n\r\n        function setAllSectionVisibility(visiblity) {\r\n            sections.forEach(function(section) {\r\n               section.visible(visiblity);\r\n            });\r\n        }\r\n\r\n        subs.push(receive(node.id + '.collapseAll', function(data) {\r\n            setAllSectionVisibility(false);\r\n        }));\r\n\r\n        subs.push(receive(node.id + '.expandAll', function(data) {\r\n            setAllSectionVisibility(true);\r\n        }));\r\n\r\n        return merge(node, {\r\n            isShown: isShown,\r\n            sections: sections,\r\n            mappedChildNodes: mappedChildNodes,\r\n            setAllSectionVisibility: setAllSectionVisibility,\r\n            dispose: function () {\r\n                subs.forEach(function(sub) {\r\n                    sub.dispose();\r\n                })\r\n            }\r\n        });\r\n    };\r\n"]}