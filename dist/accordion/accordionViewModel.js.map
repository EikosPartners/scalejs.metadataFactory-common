{"version":3,"sources":["../../src/accordion/accordionViewModel.js"],"names":["node","context","subs","createViewModels","bind","options","mappedChildNodes","isShown","children","sections","map","section","index","visible","openByDefault","header","toggleVisibility","trueAccordion","setAllSectionVisibility","visiblity","forEach","push","id","rendered","getValue","dispose","sub"],"mappings":";;;;;;kBAce,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,UAAU,IAAhB;AAAA,QACIC,OAAO,EADX;AAAA,QAEIC,mBAAmB,0BAAwBC,IAAxB,CAA6B,IAA7B,CAFvB;AAAA,QAE2D;AACvDC,cAAUL,KAAKK,OAAL,IAAgB,EAH9B;AAAA,QAIIC,mBAAmB,gCAJvB;AAAA,QAKIC,UAAU,0BAAW,IAAX,CALd;AAAA,QAMIC,WAAWL,iBAAiBH,KAAKQ,QAAtB,CANf;;AAQA,QAAIC,WAAW,IAAf;;AAEAH,qBAAiBE,QAAjB;;AAGAC,eAAWT,KAAKS,QAAL,CAAcC,GAAd,CAAkB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC7C,YAAMC,UAAU,0BAAWR,QAAQS,aAAR,KAA0B,KAArC,CAAhB;AACA,eAAO,qBAAMN,SAASI,KAAT,CAAN,EAAuB;AAC1BG,oBAAQJ,OADkB;AAE1BE,qBAASA,OAFiB;AAG1BG,8BAAkB,4BAAY;AAC1B,oBAAI,CAACH,SAAD,IAAcR,OAAd,IAAyBA,QAAQY,aAArC,EAAoD;AAChDC,4CAAwB,KAAxB;AACH;AACDL,wBAAQ,CAACA,SAAT;AACH;AARyB,SAAvB,CAAP;AAUH,KAZU,CAAX;;AAcA,aAASK,uBAAT,CAAiCC,SAAjC,EAA4C;AACxCV,iBAASW,OAAT,CAAiB,UAACT,OAAD,EAAa;AAC1BA,oBAAQE,OAAR,CAAgBM,SAAhB;AACH,SAFD;AAGH;;AAEDjB,SAAKmB,IAAL,CAAU,uBAAWrB,KAAKsB,EAAhB,mBAAkC,YAAM;AAC9CJ,gCAAwB,KAAxB;AACH,KAFS,CAAV;;AAIAhB,SAAKmB,IAAL,CAAU,uBAAWrB,KAAKsB,EAAhB,iBAAgC,YAAM;AAC5CJ,gCAAwB,IAAxB;AACH,KAFS,CAAV;;AAIA,QAAIlB,KAAKuB,QAAT,EAAmB;AACfrB,aAAKmB,IAAL,CAAU,wBAAS,YAAM;AACrB,gBAAME,WAAW,wBAASvB,KAAKuB,QAAd,EAAwBtB,QAAQuB,QAAhC,CAAjB;AACAlB,6BAAiBiB,WAAWf,QAAX,GAAsB,EAAvC;AACH,SAHS,CAAV;AAIH;;AAED,WAAO,qBAAMR,IAAN,EAAY;AACfO,iBAASA,OADM;AAEfE,kBAAUA,QAFK;AAGfH,0BAAkBA,gBAHH;AAIfY,iCAAyBA,uBAJV;AAKfO,iBAAS,mBAAY;AACjBvB,iBAAKkB,OAAL,CAAa,UAACM,GAAD,EAAS;AAClBA,oBAAID,OAAJ;AACH,aAFD;AAGH;AATc,KAAZ,CAAP;AAWH,C;;AA1ED;;AACA;;AACA;;AACA;;AACA","file":"accordionViewModel.js","sourcesContent":["import { createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory';\r\nimport { unwrap, computed, observable, observableArray } from 'knockout';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport { merge } from 'scalejs';\r\n\r\n\r\n    /*\r\n     * Responsible for combining sections with children\r\n     * Sections contain the names of the headers\r\n     * There is one child per section\r\n     */\r\n\r\n    // TODO: add docs\r\nexport default function (node) {\r\n    const context = this,\r\n        subs = [],\r\n        createViewModels = createViewModelsUnbound.bind(this), // ensures context is passed\r\n        options = node.options || {},\r\n        mappedChildNodes = observableArray(),\r\n        isShown = observable(true),\r\n        children = createViewModels(node.children);\r\n\r\n    let sections = null;\r\n\r\n    mappedChildNodes(children);\r\n\r\n\r\n    sections = node.sections.map((section, index) => {\r\n        const visible = observable(options.openByDefault !== false);\r\n        return merge(children[index], {\r\n            header: section,\r\n            visible: visible,\r\n            toggleVisibility: function () {\r\n                if (!visible() && options && options.trueAccordion) {\r\n                    setAllSectionVisibility(false);\r\n                }\r\n                visible(!visible());\r\n            }\r\n        });\r\n    });\r\n\r\n    function setAllSectionVisibility(visiblity) {\r\n        sections.forEach((section) => {\r\n            section.visible(visiblity);\r\n        });\r\n    }\r\n\r\n    subs.push(receive(`${node.id}.collapseAll`, () => {\r\n        setAllSectionVisibility(false);\r\n    }));\r\n\r\n    subs.push(receive(`${node.id}.expandAll`, () => {\r\n        setAllSectionVisibility(true);\r\n    }));\r\n\r\n    if (node.rendered) {\r\n        subs.push(computed(() => {\r\n            const rendered = evaluate(node.rendered, context.getValue);\r\n            mappedChildNodes(rendered ? children : []);\r\n        }));\r\n    }\r\n\r\n    return merge(node, {\r\n        isShown: isShown,\r\n        sections: sections,\r\n        mappedChildNodes: mappedChildNodes,\r\n        setAllSectionVisibility: setAllSectionVisibility,\r\n        dispose: function () {\r\n            subs.forEach((sub) => {\r\n                sub.dispose();\r\n            });\r\n        }\r\n    });\r\n}"]}