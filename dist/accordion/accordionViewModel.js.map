{"version":3,"sources":["../../src/accordion/accordionViewModel.js"],"names":["node","metadata","subs","createViewModels","bind","options","mappedChildNodes","sections","isShown","children","map","section","index","visible","openByDefault","header","toggleVisibility","trueAccordion","setAllSectionVisibility","visiblity","forEach","push","id","data","dispose","sub"],"mappings":";;;;;;kBAcmB,UAAUA,IAAV,EAAgBC,QAAhB,EAA0B;AACrC,QAAIC,OAAO,EAAX;AAAA,QACIC,mBAAmB,0BAAwBC,IAAxB,CAA6B,IAA7B,CADvB;AAAA,QAC2D;AACvDC,cAAUL,KAAKK,OAAL,IAAgB,EAF9B;AAAA,QAGIC,gBAHJ;AAAA,QAIIC,QAJJ;AAAA,QAKIC,UAAU,0BAAW,IAAX,CALd;;AAOAF,uBAAmBH,iBAAiBH,KAAKS,QAAtB,CAAnB;;AAGAF,eAAWP,KAAKO,QAAL,CAAcG,GAAd,CAAkB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AACnD,YAAIC,UAAU,0BAAWR,QAAQS,aAAR,KAA0B,KAA1B,GAAkC,KAAlC,GAA0C,IAArD,CAAd;AACA,eAAO,qBAAMR,iBAAiBM,KAAjB,CAAN,EAA+B;AAClCG,oBAAQJ,OAD0B;AAElCE,qBAASA,OAFyB;AAGlCG,8BAAkB,4BAAY;AAC1B,oBAAG,CAACH,SAAD,IAAcR,OAAd,IAAyBA,QAAQY,aAApC,EAAkD;AAC9CC,4CAAwB,KAAxB;AACH;AACDL,wBAAQ,CAACA,SAAT;AACH;AARiC,SAA/B,CAAP;AAUH,KAZU,CAAX;;AAcA,aAASK,uBAAT,CAAiCC,SAAjC,EAA4C;AACxCZ,iBAASa,OAAT,CAAiB,UAAST,OAAT,EAAkB;AAChCA,oBAAQE,OAAR,CAAgBM,SAAhB;AACF,SAFD;AAGH;;AAEDjB,SAAKmB,IAAL,CAAU,uBAAQrB,KAAKsB,EAAL,GAAU,cAAlB,EAAkC,UAASC,IAAT,EAAe;AACvDL,gCAAwB,KAAxB;AACH,KAFS,CAAV;;AAIAhB,SAAKmB,IAAL,CAAU,uBAAQrB,KAAKsB,EAAL,GAAU,YAAlB,EAAgC,UAASC,IAAT,EAAe;AACrDL,gCAAwB,IAAxB;AACH,KAFS,CAAV;;AAIA,WAAO,qBAAMlB,IAAN,EAAY;AACfQ,iBAASA,OADM;AAEfD,kBAAUA,QAFK;AAGfD,0BAAkBA,gBAHH;AAIfY,iCAAyBA,uBAJV;AAKfM,iBAAS,mBAAY;AACjBtB,iBAAKkB,OAAL,CAAa,UAASK,GAAT,EAAc;AACvBA,oBAAID,OAAJ;AACH,aAFD;AAGH;AATc,KAAZ,CAAP;AAWH,C;;AA/DL;;AACA;;AACA;;AACA;;AA4DK;;AAzDD;;;;;;AAMA;AAbJ","file":"accordionViewModel.js","sourcesContent":["/*global define, ko*/\r\nimport { createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory';\r\nimport { unwrap, computed, observable } from 'knockout';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport { merge } from 'scalejs';\r\n\r\n\r\n    /*\r\n     * Responsible for combining sections with children\r\n     * Sections contain the names of the headers\r\n     * There is one child per section\r\n     */\r\n\r\n    // TODO: add docs\r\n    export default function (node, metadata) {\r\n        var subs = [],\r\n            createViewModels = createViewModelsUnbound.bind(this), //ensures context is passed\r\n            options = node.options || {},\r\n            mappedChildNodes,\r\n            sections,\r\n            isShown = observable(true);\r\n\r\n        mappedChildNodes = createViewModels(node.children);\r\n\r\n    \r\n        sections = node.sections.map(function (section, index) {\r\n            var visible = observable(options.openByDefault === false ? false : true);\r\n            return merge(mappedChildNodes[index], {\r\n                header: section,\r\n                visible: visible,\r\n                toggleVisibility: function () {\r\n                    if(!visible() && options && options.trueAccordion){\r\n                        setAllSectionVisibility(false);\r\n                    }\r\n                    visible(!visible());\r\n                }\r\n            });\r\n        });\r\n\r\n        function setAllSectionVisibility(visiblity) {\r\n            sections.forEach(function(section) {\r\n               section.visible(visiblity);\r\n            });\r\n        }\r\n\r\n        subs.push(receive(node.id + '.collapseAll', function(data) {\r\n            setAllSectionVisibility(false);\r\n        }));\r\n\r\n        subs.push(receive(node.id + '.expandAll', function(data) {\r\n            setAllSectionVisibility(true);\r\n        }));\r\n\r\n        return merge(node, {\r\n            isShown: isShown,\r\n            sections: sections,\r\n            mappedChildNodes: mappedChildNodes,\r\n            setAllSectionVisibility: setAllSectionVisibility,\r\n            dispose: function () {\r\n                subs.forEach(function(sub) {\r\n                    sub.dispose();\r\n                })\r\n            }\r\n        });\r\n    };\r\n"]}