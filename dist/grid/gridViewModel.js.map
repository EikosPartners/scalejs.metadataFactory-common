{"version":3,"sources":["../../src/grid/gridViewModel.js"],"names":["node","data","options","columns","context","pagination","endpoint","dataSourceEndpoint","rows","observableArray","skip","observable","start","limit","search","filters","caseInsensitive","clientSearch","selectedItem","gridContext","getValue","parentContext","loaderNoText","loaderLoading","loaderDone","loader","text","done","inProgress","query","queryCallback","gridHeaderItems","gridHeader","setupQuery","type","actionType","setupGetResponse","callback","err","results","key","resultData","push","total","sendQuery","isFilter","target","action","setupGridHeader","map","call","item","extend","rateLimit","subscribe","removeAll","setupSelection","selection","cloneDeep","selectionCtx","setupData"],"mappings":"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","file":"gridViewModel.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\r\nimport { merge, get } from 'scalejs';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\n\r\nexport default function (node) {\r\n    const data = node.data,\r\n        options = node.options,\r\n        columns = node.columns,\r\n        context = this,\r\n        pagination = node.pagination,\r\n        endpoint = node.dataSourceEndpoint,\r\n        rows = ko.observableArray(),\r\n        skip = ko.observable(pagination.start || 0),\r\n        limit = ko.observable(pagination.limit || 15),\r\n        search = ko.observable(''),\r\n        filters = ko.observable({}),\r\n        caseInsensitive = ko.observable(true),\r\n        clientSearch = options.clientSearch,\r\n        selectedItem = ko.observable({}),\r\n        gridContext = {\r\n            search,\r\n            filters,\r\n            rows,\r\n            skip,\r\n            clientSearch,\r\n            caseInsensitive,\r\n            getValue: this.getValue,\r\n            parentContext: context\r\n        },\r\n        loaderNoText = '',\r\n        loaderLoading = 'Loading more...',\r\n        loaderDone = 'Loaded all rows',\r\n        loader = {\r\n            text: ko.observable(loaderNoText),\r\n            done: false,\r\n            inProgress: ko.observable(false)\r\n        };\r\n\r\n    let query,\r\n        queryCallback,\r\n        gridHeaderItems = node.gridHeader || [];\r\n\r\n    function setupQuery() {\r\n        query = createViewModel({\r\n            type: 'action',\r\n            actionType: 'ajax',\r\n            options: endpoint\r\n        });\r\n    }\r\n\r\n    function setupGetResponse() {\r\n        queryCallback = {\r\n            callback: function (err, results) {\r\n                const key = get(endpoint, 'keyMap.resultsKey'),\r\n                    resultData = key ? results[key] : results;\r\n                rows.push(...resultData);\r\n                skip(results.skip);\r\n                loader.inProgress(false);\r\n                loader.done = results.skip >= results.total;\r\n                if (loader.done) {\r\n                    loader.text(loaderDone);\r\n                } else {\r\n                    loader.text(loaderNoText);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    function sendQuery(isFilter) {\r\n        if (isFilter || (!loader.done && !loader.inProgress())) {\r\n            query.options.target.data = {\r\n                skip: skip(),\r\n                limit: limit()\r\n            };\r\n            // data is in target.data, so it will be sent as is\r\n            if (!clientSearch) {\r\n                query.options.target.data.search = search();\r\n                query.options.target.data.filters = filters();\r\n            }\r\n            loader.inProgress(true);\r\n            loader.text(loaderLoading);\r\n            query.action(queryCallback);\r\n\r\n            // TODO: call a resetfilter function to update skip/row observs in here\r\n        }\r\n    }\r\n\r\n    function setupGridHeader() {\r\n        gridHeaderItems = gridHeaderItems.map(item => createViewModel.call(gridContext, item));\r\n        // TODO: update to createViewModels after Erica updates mf\r\n        search.extend({ rateLimit: 1000 });\r\n        if (!clientSearch) {\r\n            search.subscribe(() => {\r\n                skip(0);\r\n                rows.removeAll();\r\n                sendQuery(true);\r\n            });\r\n            filters.subscribe(() => sendQuery(true));\r\n        }\r\n    }\r\n\r\n    function setupSelection() {\r\n        if (node.selection) {\r\n            selectedItem.subscribe((item) => {\r\n                const action = _.cloneDeep(node.selection),\r\n                    selectionCtx = _.cloneDeep(context);\r\n                selectionCtx.data = item;\r\n                createViewModel.call(selectionCtx, action).action();\r\n            });\r\n        }\r\n    }\r\n\r\n    function setupData() {\r\n        if (endpoint) {\r\n            setupQuery();\r\n            setupGetResponse();\r\n            sendQuery();\r\n        } else if (data) {\r\n            rows(data);\r\n        }\r\n    }\r\n\r\n\r\n    setupData();\r\n    setupSelection();\r\n    setupGridHeader();\r\n\r\n    return merge(node, {\r\n        rows,\r\n        columns,\r\n        sendQuery,\r\n        loader,\r\n        options,\r\n        gridHeaderItems,\r\n        search,\r\n        filters,\r\n        caseInsensitive,\r\n        selectedItem\r\n    });\r\n}"]}