{"version":3,"sources":["../../src/grid/gridViewModel.js"],"names":["node","data","options","columns","context","pagination","endpoint","dataSourceEndpoint","rows","observableArray","skip","observable","start","limit","search","filters","caseInsensitive","clientSearch","selectedItem","gridContext","getValue","parentContext","loaderNoText","loaderLoading","loaderDone","loader","text","done","inProgress","subs","query","queryCallback","gridHeaderItems","gridHeader","setupQuery","type","actionType","setupGetResponse","callback","err","results","key","resultData","push","total","console","error","message","sendQuery","isFilter","removeAll","target","action","setupGridHeader","map","call","item","extend","rateLimit","subscribe","setupRefresh","id","setupSelection","selection","cloneDeep","selectionCtx","setupData","addRow","row","dispose","forEach","sub"],"mappings":"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","file":"gridViewModel.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\nimport { merge, get } from 'scalejs';\nimport { receive } from 'scalejs.messagebus';\nimport ko from 'knockout';\nimport _ from 'lodash';\n\nexport default function (node) {\n    const data = node.data,\n        options = node.options,\n        columns = node.columns,\n        context = this,\n        pagination = node.pagination,\n        endpoint = node.dataSourceEndpoint,\n        rows = ko.observableArray(),\n        skip = ko.observable(pagination.start || 0),\n        limit = ko.observable(pagination.limit || 15),\n        search = ko.observable(''),\n        filters = ko.observable({}),\n        caseInsensitive = ko.observable(true),\n        clientSearch = options.clientSearch,\n        selectedItem = ko.observable({}),\n        gridContext = {\n            search,\n            filters,\n            rows,\n            skip,\n            clientSearch,\n            caseInsensitive,\n            getValue: this.getValue,\n            parentContext: context\n        },\n        loaderNoText = '',\n        loaderLoading = 'Loading more...',\n        loaderDone = 'Loaded all rows',\n        loader = {\n            text: ko.observable(loaderNoText),\n            done: false,\n            inProgress: ko.observable(false)\n        },\n        subs = [];\n\n    let query,\n        queryCallback,\n        gridHeaderItems = node.gridHeader || [];\n\n    function setupQuery() {\n        query = createViewModel({\n            type: 'action',\n            actionType: 'ajax',\n            options: endpoint\n        });\n    }\n\n    function setupGetResponse() {\n        queryCallback = {\n            callback: function (err, results) {\n                if (!err) {\n                    const key = get(endpoint, 'keyMap.resultsKey'),\n                        resultData = key && results ? results[key] : results;\n                    rows.push(...resultData);\n                    skip(results.skip);\n                    loader.inProgress(false);\n                    loader.done = results.skip >= results.total;\n                    if (loader.done) {\n                        loader.text(loaderDone);\n                    } else {\n                        loader.text(loaderNoText);\n                    }\n                } else {\n                    console.error(`Error in grid query callback: ${err.message || ''}`);\n                }\n            }\n        };\n    }\n\n    function sendQuery(isFilter) {\n        if (isFilter || (!loader.done && !loader.inProgress())) {\n            if (isFilter) {\n                skip(0);\n                rows.removeAll();\n            }\n            query.options.target.data = {\n                skip: skip(),\n                limit: limit()\n            };\n            // data is in target.data, so it will be sent as is\n            if (!clientSearch) {\n                query.options.target.data.search = search();\n                query.options.target.data.filters = filters();\n            }\n            loader.inProgress(true);\n            loader.text(loaderLoading);\n            query.action(queryCallback);\n\n            // TODO: call a resetfilter function to update skip/row observs in here\n        }\n    }\n\n    function setupGridHeader() {\n        gridHeaderItems = gridHeaderItems.map(item => createViewModel.call(gridContext, item));\n        // TODO: update to createViewModels after Erica updates mf\n        search.extend({ rateLimit: 1000 });\n        if (!clientSearch) {\n            search.subscribe(() => sendQuery(true));\n            filters.subscribe(() => sendQuery(true));\n        }\n    }\n\n    function setupRefresh() {\n        subs.push(receive(`${node.id}.refresh`, () => {\n            sendQuery(true);\n        }));\n    }\n\n    function setupSelection() {\n        if (node.selection) {\n            selectedItem.subscribe((item) => {\n                const action = _.cloneDeep(node.selection),\n                    selectionCtx = _.cloneDeep(context);\n                selectionCtx.data = item;\n                createViewModel.call(selectionCtx, action).action();\n            });\n        }\n    }\n\n    function setupData() {\n        if (endpoint) {\n            setupQuery();\n            setupGetResponse();\n            sendQuery();\n            setupRefresh();\n        } else if (data) {\n            rows(data);\n        }\n    }\n\n    function addRow(row) {\n        rows.push(...row);\n    }\n\n    // Set up a receiver to push rows to the grid.\n    subs.push(receive(`${node.id}.add`, (row) => {\n        addRow(row);\n    }));\n\n\n    setupData();\n    setupSelection();\n    setupGridHeader();\n\n    return merge(node, {\n        rows,\n        columns,\n        sendQuery,\n        loader,\n        options,\n        gridHeaderItems,\n        search,\n        filters,\n        caseInsensitive,\n        selectedItem,\n        dispose: function () {\n            subs.forEach((sub) => {\n                sub.dispose();\n            });\n        }\n    });\n}"]}