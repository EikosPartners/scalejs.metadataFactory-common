{"version":3,"sources":["../../src/grid/gridViewModel.js"],"names":["node","data","options","columns","context","pagination","endpoint","dataSourceEndpoint","rows","observableArray","skip","observable","start","limit","search","filters","caseInsensitive","clientSearch","selectedItem","gridContext","getValue","parentContext","loaderNoText","loaderLoading","loaderDone","loader","text","done","inProgress","subs","query","queryCallback","gridHeaderItems","gridHeader","setupQuery","type","actionType","setupGetResponse","callback","err","results","key","resultData","push","total","console","error","message","sendQuery","isFilter","removeAll","target","action","setupGridHeader","map","call","item","extend","rateLimit","subscribe","setupRefresh","id","setupSelection","selection","cloneDeep","selectionCtx","setupData","addRow","row","dispose","forEach","sub"],"mappings":"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","file":"gridViewModel.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\r\nimport { merge, get } from 'scalejs';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * Grid component to display a grid of data\r\n *\r\n * @module grid\r\n *\r\n * @param {object} node\r\n *  The configuration object for the grid\r\n * @param {object} node.data\r\n *  Initial data to populate the grid with\r\n * @param {string} node.id\r\n *  The id of the grid\r\n * @param {string} node.classes\r\n *  The classes to apply to the grid\r\n * @param {string} node.gridHeaderClasses\r\n *  The classes to apply to the grid header\r\n * @param {array} node.gridHeader\r\n *  An array of PJSON components to use as the grid header\r\n * @param {object} node.dataSourceEndpoint\r\n *  Configuration object for the grid's data source\r\n * @param {object} node.dataSourceEndpoint.target\r\n *  Configuration object for the target of the grid's data source\r\n * @param {string} node.dataSourceEndpoint.target.uri\r\n *  The uri endpoint for the grid's data source\r\n * @param {object} node.dataSourceEndpoint.target.dataMapFunctions\r\n *  An object of functions to run on the data\r\n * @param {string} node.dataSourceEndpoint.target.dataMapFunctions.before\r\n *  Function to run before the data is added to the grid?\r\n * @param {string} node.dataSourceEndpoint.target.dataMapFunctions.after\r\n *  Function to run after the data is added to the grid?\r\n * @param {object|array} node.dataSourceEndpoint.keyMap\r\n *  A mapper object or array of mapper objects to map keys\r\n * @param {object} node.pagination\r\n *  An object to specify pagination for the grid\r\n * @param {number} node.pagination.start=0\r\n *  The number of which page to start the grid at\r\n * @param {number} node.pagination.limit=15\r\n *  The max number of grid items to show on each page\r\n * @param {array} node.columns\r\n *  An array of objects to build the columns\r\n * @param {object} node.selection\r\n *  A PJSON action to use when a row is selected\r\n * @param {object} node.options\r\n *  The options pertaining to the grid\r\n * @param {boolean} node.options.infinite\r\n *  Boolean to specify whether to show infinite items on the grid\r\n * @param {boolean} node.options.fixedHeader\r\n *  Boolean to specify if the grid header should be fixed or not\r\n * @param {object} node.options.footer\r\n *  Configuration object for the grid footer\r\n * @param {boolean} node.options.footer.hideOnDone\r\n *  Boolean to hide the footer once the grid is loaded or not\r\n * @param {string} node.options.footer.loadingText\r\n *  A string to show while the grid is loading\r\n * @param {string} node.options.footer.doneText\r\n *  A string to show when the grid has finished loading.\r\n * @param {object} node.options.hasChildren\r\n *  Configuration object for a grid row's child\r\n * @param {string} node.options.hasChildren.showIcon\r\n *  The class to apply to the show child button\r\n * @param {string} node.options.hasChildren.hideIcon\r\n *  The class to apply to the hide child button\r\n * @param {string} node.options.hasChildren.template\r\n *  The template to apply to the child row\r\n * @param {boolean} node.options.hasChildren.onRowSelect\r\n *  Boolean to determine whether to show/hide the child on selecting the row or via a button\r\n * @param {boolean} node.options.hasChildren.accordion\r\n *  Boolean to determine if only one child should be shown at a time\r\n * @param {boolean} node.options.clientSearch\r\n *  Boolean on whether to search/sort client side\r\n * @param {boolean|expression} node.options.gridDisplay\r\n *  Boolean or expression to render the grid programmatically\r\n * @param {string} node.options.scrollElement\r\n *  Element to scroll grid on, defaults to scrolling on window\r\n *\r\n * @example\r\n * {\r\n *      \"type\": \"grid\",\r\n *      \"id\": \"my_grid_id\",\r\n *      \"classes\": \"grid-container\",\r\n *      \"gridHeaderClasses\": \"grid-header\",\r\n *      \"options\": {\r\n *          \"infinite\": true,\r\n *          \"fixedHeader\": true,\r\n *          \"footer\": {\r\n *              \"hideOnDone\": true,\r\n *              \"loadingText\": \"Loading...\",\r\n *              \"doneText\": \"Loaded all rows.\"\r\n *          },\r\n *          \"hasChildren\": {\r\n *              \"showIcon\": \"icon-open\",\r\n *              \"hideIcon\": \"icon-close\",\r\n *              \"template\": \"grid_child_template\",\r\n *              \"onRowSelect\": true,\r\n *              \"accordion\": true,\r\n *          },\r\n *      }\r\n *      \"dataSourceEndpoint\": {\r\n *         \"target\": {\r\n *              \"uri\": \"endpoint\"\r\n *         },\r\n *         \"keyMap\": {\r\n *             \"resultsKey\": \"data\"\r\n *         }\r\n *      },\r\n *      \"pagination\": {\r\n *          \"start\": 0,\r\n *          \"limit\": 30\r\n *      },\r\n *      \"columns\": [\r\n *          {\r\n *              \"data\": \"colData\",\r\n *              \"title\": \"Column Data Title\"\r\n *          }\r\n *      ]\r\n * }\r\n */\r\nexport default function (node) {\r\n    const data = node.data,\r\n        options = node.options,\r\n        columns = node.columns,\r\n        context = this,\r\n        pagination = node.pagination,\r\n        endpoint = node.dataSourceEndpoint,\r\n        rows = ko.observableArray(),\r\n        skip = ko.observable(pagination.start || 0),\r\n        limit = ko.observable(pagination.limit || 15),\r\n        search = ko.observable(''),\r\n        filters = ko.observable({}),\r\n        caseInsensitive = ko.observable(true),\r\n        clientSearch = options.clientSearch,\r\n        selectedItem = ko.observable({}),\r\n        gridContext = {\r\n            search,\r\n            filters,\r\n            rows,\r\n            skip,\r\n            clientSearch,\r\n            caseInsensitive,\r\n            getValue: this.getValue,\r\n            parentContext: context\r\n        },\r\n        loaderNoText = '',\r\n        loaderLoading = 'Loading more...',\r\n        loaderDone = 'Loaded all rows',\r\n        loader = {\r\n            text: ko.observable(loaderNoText),\r\n            done: false,\r\n            inProgress: ko.observable(false)\r\n        },\r\n        subs = [];\r\n\r\n    let query,\r\n        queryCallback,\r\n        gridHeaderItems = node.gridHeader || [];\r\n\r\n    function setupQuery() {\r\n        query = createViewModel({\r\n            type: 'action',\r\n            actionType: 'ajax',\r\n            options: endpoint\r\n        });\r\n    }\r\n\r\n    function setupGetResponse() {\r\n        queryCallback = {\r\n            callback: function (err, results) {\r\n                if (!err) {\r\n                    const key = get(endpoint, 'keyMap.resultsKey'),\r\n                        resultData = key && results ? results[key] : results;\r\n                    rows.push(...resultData);\r\n                    skip(results.skip);\r\n                    loader.inProgress(false);\r\n                    loader.done = results.skip >= results.total;\r\n                    if (loader.done) {\r\n                        loader.text(loaderDone);\r\n                    } else {\r\n                        loader.text(loaderNoText);\r\n                    }\r\n                } else {\r\n                    console.error(`Error in grid query callback: ${err.message || ''}`);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    function sendQuery(isFilter) {\r\n        if (isFilter || (!loader.done && !loader.inProgress())) {\r\n            if (isFilter) {\r\n                skip(0);\r\n                rows.removeAll();\r\n            }\r\n            query.options.target.data = {\r\n                skip: skip(),\r\n                limit: limit()\r\n            };\r\n            // data is in target.data, so it will be sent as is\r\n            if (!clientSearch) {\r\n                query.options.target.data.search = search();\r\n                query.options.target.data.filters = filters();\r\n            }\r\n            loader.inProgress(true);\r\n            loader.text(loaderLoading);\r\n            query.action(queryCallback);\r\n\r\n            // TODO: call a resetfilter function to update skip/row observs in here\r\n        }\r\n    }\r\n\r\n    function setupGridHeader() {\r\n        gridHeaderItems = gridHeaderItems.map(item => createViewModel.call(gridContext, item));\r\n        // TODO: update to createViewModels after Erica updates mf\r\n        search.extend({ rateLimit: 1000 });\r\n        if (!clientSearch) {\r\n            search.subscribe(() => sendQuery(true));\r\n            filters.subscribe(() => sendQuery(true));\r\n        }\r\n    }\r\n\r\n    function setupRefresh() {\r\n        subs.push(receive(`${node.id}.refresh`, () => {\r\n            sendQuery(true);\r\n        }));\r\n    }\r\n\r\n    function setupSelection() {\r\n        if (node.selection) {\r\n            selectedItem.subscribe((item) => {\r\n                const action = _.cloneDeep(node.selection),\r\n                    selectionCtx = _.cloneDeep(context);\r\n                selectionCtx.data = item;\r\n                createViewModel.call(selectionCtx, action).action();\r\n            });\r\n        }\r\n    }\r\n\r\n    function setupData() {\r\n        if (endpoint) {\r\n            setupQuery();\r\n            setupGetResponse();\r\n            sendQuery();\r\n            setupRefresh();\r\n        } else if (data) {\r\n            rows(data);\r\n        }\r\n    }\r\n\r\n    function addRow(row) {\r\n        rows.push(...row);\r\n    }\r\n\r\n    // Set up a receiver to push rows to the grid.\r\n    subs.push(receive(`${node.id}.add`, (row) => {\r\n        addRow(row);\r\n    }));\r\n\r\n\r\n    setupData();\r\n    setupSelection();\r\n    setupGridHeader();\r\n\r\n    return merge(node, {\r\n        rows,\r\n        columns,\r\n        sendQuery,\r\n        loader,\r\n        options,\r\n        gridHeaderItems,\r\n        search,\r\n        filters,\r\n        caseInsensitive,\r\n        selectedItem,\r\n        dispose: function () {\r\n            subs.forEach((sub) => {\r\n                sub.dispose();\r\n            });\r\n        }\r\n    });\r\n}"]}