{"version":3,"sources":["../../../src/grid/gridAdvancedFilter/gridAdvancedFilterViewModel.js"],"names":["node","context","id","options","advancedFilter","createViewModel","call","filter","filterData","data","filterDict","dictionary","filterIsVisible","ko","observable","filterText","subs","caseInsensitive","setupReceiveFilter","push","query","filters","Object","keys","forEach","key","inputType","value","date","setupClearFilter","setValue","skip","search","clientSearch","rows","removeAll","dispose","sub"],"mappings":";;;;;;kBAKe,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,UAAU,IAAhB;AAAA,QACIC,KAAKF,KAAKE,EADd;AAAA,QAEIC,UAAUH,KAAKG,OAAL,IAAgB,EAF9B;AAAA,QAGIC,iBAAiBC,yBAAgBC,IAAhB,CAAqBL,OAArB,EAA8BD,KAAKO,MAAnC,CAHrB;AAAA,QAIIC,aAAaJ,eAAeH,OAAf,CAAuBQ,IAJxC;AAAA,QAI8C;AAC1CC,iBAAaN,eAAeH,OAAf,CAAuBU,UALxC;AAAA,QAMIC,kBAAkBC,mBAAGC,UAAH,CAAc,KAAd,CANtB;AAAA,QAOIC,aAAaZ,QAAQY,UAAR,IAAsB,UAPvC;AAAA,QAQIC,OAAO,EARX;;AAUA,QAAI,mBAAIb,QAAQc,eAAZ,CAAJ,EAAkC;AAC9BhB,gBAAQgB,eAAR,CAAwBd,QAAQc,eAAhC;AACH;;AAED,aAASC,kBAAT,GAA8B;AAC1BF,aAAKG,IAAL,CAAU,uBAAWnB,KAAKE,EAAhB,cAA6B,YAAM;AACzC,gBAAMkB,QAAQ,EAAd;AAAA,gBACIC,UAAUb,YADd;;AAGAc,mBAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAACC,GAAD,EAAS;AAClC,oBAAIJ,QAAQI,GAAR,CAAJ,EAAkB;AACd,wBAAIf,aAAae,GAAb,EAAkBC,SAAlB,KAAgC,YAApC,EAAkD;AAC9CN,8BAAMK,GAAN,IAAa,EAAb;AACAL,8BAAMK,GAAN,EAAWE,KAAX,GAAmBN,QAAQI,GAAR,CAAnB;AACAL,8BAAMK,GAAN,EAAWG,IAAX,GAAkB,IAAlB;AACH,qBAJD,MAIO;AACHR,8BAAMK,GAAN,IAAaJ,QAAQI,GAAR,CAAb;AACH;AACJ;AACJ,aAVD;AAWAxB,oBAAQoB,OAAR,CAAgBD,KAAhB;AACAR,4BAAgB,KAAhB;AACH,SAjBS,CAAV;AAkBH;;AAED,aAASiB,gBAAT,GAA4B;AACxBb,aAAKG,IAAL,CAAU,uBAAWnB,KAAKE,EAAhB,aAA4B,YAAM;AACxC,gBAAMmB,UAAUb,YAAhB;AACAc,mBAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAACjB,MAAD,EAAY;AACrC,oBAAIc,QAAQd,MAAR,CAAJ,EAAqB;AACjBG,iCAAaH,MAAb,EAAqBuB,QAArB,CAA8B,EAA9B;AACH;AACJ,aAJD;AAKA7B,oBAAQ8B,IAAR,CAAa,CAAb;AACA9B,oBAAQ+B,MAAR,CAAe,EAAf;AACA/B,oBAAQoB,OAAR,CAAgB,EAAhB;AACAT,4BAAgB,KAAhB;AACA,gBAAI,CAACX,QAAQgC,YAAb,EAA2B;AACvBhC,wBAAQiC,IAAR,CAAaC,SAAb;AACH;AACJ,SAdS,CAAV;AAeH;;AAED,aAASC,OAAT,GAAmB;AACfpB,aAAKQ,OAAL,CAAa,UAACa,GAAD,EAAS;AAClBA,gBAAID,OAAJ;AACH,SAFD;AAGH;;AAEDlB;AACAW;;AAEA,WAAO,qBAAM7B,IAAN,EAAY;AACfE,cADe;AAEfD,wBAFe;AAGfmC,wBAHe;AAIfhC,sCAJe;AAKfQ,wCALe;AAMfG;AANe,KAAZ,CAAP;AAQH,C;;AA5ED;;AACA;;AACA;;AACA","file":"gridAdvancedFilterViewModel.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\nimport { receive } from 'scalejs.messagebus';\nimport { merge, has } from 'scalejs';\nimport ko from 'knockout';\n\nexport default function (node) {\n    const context = this,\n        id = node.id,\n        options = node.options || {},\n        advancedFilter = createViewModel.call(context, node.filter),\n        filterData = advancedFilter.context.data, // todo: review\n        filterDict = advancedFilter.context.dictionary,\n        filterIsVisible = ko.observable(false),\n        filterText = options.filterText || 'Advanced',\n        subs = [];\n\n    if (has(options.caseInsensitive)) {\n        context.caseInsensitive(options.caseInsensitive);\n    }\n\n    function setupReceiveFilter() {\n        subs.push(receive(`${node.id}.filter`, () => {\n            const query = {},\n                filters = filterData();\n\n            Object.keys(filters).forEach((key) => {\n                if (filters[key]) {\n                    if (filterDict()[key].inputType === 'datepicker') {\n                        query[key] = {};\n                        query[key].value = filters[key];\n                        query[key].date = true;\n                    } else {\n                        query[key] = filters[key];\n                    }\n                }\n            });\n            context.filters(query);\n            filterIsVisible(false);\n        }));\n    }\n\n    function setupClearFilter() {\n        subs.push(receive(`${node.id}.clear`, () => {\n            const filters = filterData();\n            Object.keys(filters).forEach((filter) => {\n                if (filters[filter]) {\n                    filterDict()[filter].setValue('');\n                }\n            });\n            context.skip(0);\n            context.search('');\n            context.filters({});\n            filterIsVisible(false);\n            if (!context.clientSearch) {\n                context.rows.removeAll();\n            }\n        }));\n    }\n\n    function dispose() {\n        subs.forEach((sub) => {\n            sub.dispose();\n        });\n    }\n\n    setupReceiveFilter();\n    setupClearFilter();\n\n    return merge(node, {\n        id,\n        context,\n        dispose,\n        advancedFilter,\n        filterIsVisible,\n        filterText\n    });\n}"]}