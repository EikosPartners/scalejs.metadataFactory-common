{"version":3,"sources":["../../../src/grid/gridAdvancedFilter/gridAdvancedFilterViewModel.js"],"names":["node","context","id","options","advancedFilter","call","filter","filterData","data","filterDict","dictionary","filterIsVisible","observable","filterText","subs","caseInsensitive","setupReceiveFilter","push","query","filters","Object","keys","forEach","key","inputType","value","date","setupClearFilter","setValue","skip","search","clientSearch","rows","removeAll","dispose","sub"],"mappings":";;;;;;kBAKe,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,UAAU,IAAhB;AAAA,QACIC,KAAKF,KAAKE,EADd;AAAA,QAEIC,UAAUH,KAAKG,OAAL,IAAgB,EAF9B;AAAA,QAGIC,iBAAiB,yBAAgBC,IAAhB,CAAqBJ,OAArB,EAA8BD,KAAKM,MAAnC,CAHrB;AAAA,QAIIC,aAAaH,eAAeH,OAAf,CAAuBO,IAJxC;AAAA,QAI8C;AAC1CC,iBAAaL,eAAeH,OAAf,CAAuBS,UALxC;AAAA,QAMIC,kBAAkB,mBAAGC,UAAH,CAAc,KAAd,CANtB;AAAA,QAOIC,aAAaV,QAAQU,UAAR,IAAsB,UAPvC;AAAA,QAQIC,OAAO,EARX;;AAUA,QAAI,mBAAIX,QAAQY,eAAZ,CAAJ,EAAkC;AAC9Bd,gBAAQc,eAAR,CAAwBZ,QAAQY,eAAhC;AACH;;AAED,aAASC,kBAAT,GAA8B;AAC1BF,aAAKG,IAAL,CAAU,uBAAWjB,KAAKE,EAAhB,cAA6B,YAAM;AACzC,gBAAMgB,QAAQ,EAAd;AAAA,gBACIC,UAAUZ,YADd;;AAGAa,mBAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAACC,GAAD,EAAS;AAClC,oBAAIJ,QAAQI,GAAR,CAAJ,EAAkB;AACd,wBAAId,aAAac,GAAb,EAAkBC,SAAlB,KAAgC,YAApC,EAAkD;AAC9CN,8BAAMK,GAAN,IAAa,EAAb;AACAL,8BAAMK,GAAN,EAAWE,KAAX,GAAmBN,QAAQI,GAAR,CAAnB;AACAL,8BAAMK,GAAN,EAAWG,IAAX,GAAkB,IAAlB;AACH,qBAJD,MAIO;AACHR,8BAAMK,GAAN,IAAaJ,QAAQI,GAAR,CAAb;AACH;AACJ;AACJ,aAVD;AAWAtB,oBAAQkB,OAAR,CAAgBD,KAAhB;AACAP,4BAAgB,KAAhB;AACH,SAjBS,CAAV;AAkBH;;AAED,aAASgB,gBAAT,GAA4B;AACxBb,aAAKG,IAAL,CAAU,uBAAWjB,KAAKE,EAAhB,aAA4B,YAAM;AACxC,gBAAMiB,UAAUZ,YAAhB;AACAa,mBAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAAChB,MAAD,EAAY;AACrC,oBAAIa,QAAQb,MAAR,CAAJ,EAAqB;AACjBG,iCAAaH,MAAb,EAAqBsB,QAArB,CAA8B,EAA9B;AACH;AACJ,aAJD;AAKA3B,oBAAQ4B,IAAR,CAAa,CAAb;AACA5B,oBAAQ6B,MAAR,CAAe,EAAf;AACA7B,oBAAQkB,OAAR,CAAgB,EAAhB;AACAR,4BAAgB,KAAhB;AACA,gBAAI,CAACV,QAAQ8B,YAAb,EAA2B;AACvB9B,wBAAQ+B,IAAR,CAAaC,SAAb;AACH;AACJ,SAdS,CAAV;AAeH;;AAED,aAASC,OAAT,GAAmB;AACfpB,aAAKQ,OAAL,CAAa,UAACa,GAAD,EAAS;AAClBA,gBAAID,OAAJ;AACH,SAFD;AAGH;;AAEDlB;AACAW;;AAEA,WAAO,qBAAM3B,IAAN,EAAY;AACfE,cADe;AAEfD,wBAFe;AAGfiC,wBAHe;AAIf9B,sCAJe;AAKfO,wCALe;AAMfE;AANe,KAAZ,CAAP;AAQH,C;;AA5ED;;AACA;;AACA;;AACA","file":"gridAdvancedFilterViewModel.js","sourcesContent":["import { createViewModel } from 'scalejs.metadataFactory';\nimport { receive } from 'scalejs.messagebus';\nimport { merge, has } from 'scalejs';\nimport ko from 'knockout';\n\nexport default function (node) {\n    const context = this,\n        id = node.id,\n        options = node.options || {},\n        advancedFilter = createViewModel.call(context, node.filter),\n        filterData = advancedFilter.context.data, // todo: review\n        filterDict = advancedFilter.context.dictionary,\n        filterIsVisible = ko.observable(false),\n        filterText = options.filterText || 'Advanced',\n        subs = [];\n\n    if (has(options.caseInsensitive)) {\n        context.caseInsensitive(options.caseInsensitive);\n    }\n\n    function setupReceiveFilter() {\n        subs.push(receive(`${node.id}.filter`, () => {\n            const query = {},\n                filters = filterData();\n\n            Object.keys(filters).forEach((key) => {\n                if (filters[key]) {\n                    if (filterDict()[key].inputType === 'datepicker') {\n                        query[key] = {};\n                        query[key].value = filters[key];\n                        query[key].date = true;\n                    } else {\n                        query[key] = filters[key];\n                    }\n                }\n            });\n            context.filters(query);\n            filterIsVisible(false);\n        }));\n    }\n\n    function setupClearFilter() {\n        subs.push(receive(`${node.id}.clear`, () => {\n            const filters = filterData();\n            Object.keys(filters).forEach((filter) => {\n                if (filters[filter]) {\n                    filterDict()[filter].setValue('');\n                }\n            });\n            context.skip(0);\n            context.search('');\n            context.filters({});\n            filterIsVisible(false);\n            if (!context.clientSearch) {\n                context.rows.removeAll();\n            }\n        }));\n    }\n\n    function dispose() {\n        subs.forEach((sub) => {\n            sub.dispose();\n        });\n    }\n\n    setupReceiveFilter();\n    setupClearFilter();\n\n    return merge(node, {\n        id,\n        context,\n        dispose,\n        advancedFilter,\n        filterIsVisible,\n        filterText\n    });\n}"]}