{"version":3,"sources":["../../src/grid/gridBindings.js"],"names":["grid","options","clientSearch","caseInsen","caseInsensitive","gridSettings","dom","rows","columns","data","paging","fixedHeader","infiniteScroll","infinite","scrollElement","hasChildren","query","sendQuery","searching","ordering","sort","responsive","select","style","blurable","items","className","selectedItem","registry","autoWidth","basicSearch","search","advancedSearch","filters","css","gridClasses","dataTables","styles","loader","inProgress","if","footer","visible","hide","unwrap","display","gridDisplay","ctx","undefined","id","filter","gridHeaderItems","item","filterIsVisible","length","visibleFilter","gridHeaderClasses","classes","metadata","$parent","children","DEFAULT_KEY_MAP","resultsKey","childDataKey","keyMap","dataSourceEndpoint","_","merge","parentContext","$parents","x","context","newContext","getValue","row","metadataFactory"],"mappings":"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","file":"gridBindings.js","sourcesContent":["import { evaluate } from 'scalejs.expression-jsep';\nimport { notify } from 'scalejs.messagebus';\nimport 'datatables.net-fixedheader';\nimport 'datatables.net-select';\nimport 'datatables-epresponsive';\nimport registry from './registry/gridRegistry';\nimport ko from 'knockout';\n\nexport default {\n    grid: function () {\n        const options = this.options,\n            clientSearch = options.clientSearch,\n            caseInsen = this.caseInsensitive,\n            gridSettings = {\n                dom: 'tR',\n                rows: this.rows,\n                columns: this.columns,\n                data: this.data,\n                paging: false,\n                fixedHeader: options.fixedHeader,\n                infiniteScroll: options.infinite,\n                scrollElement: options.scrollElement,\n                hasChildren: options.hasChildren,\n                query: this.sendQuery,\n                searching: clientSearch,\n                ordering: false,\n                sort: this.sort,\n                responsive: true, // todo: get this working\n                select: {\n                    style: 'single',\n                    blurable: true,\n                    items: 'cell',\n                    className: 'highlight',\n                    selectedItem: this.selectedItem\n                },\n                registry,\n                autoWidth: false\n            };\n\n        if (clientSearch) {\n            gridSettings.clientSearch = {\n                basicSearch: this.search,\n                advancedSearch: this.filters,\n                caseInsen\n            };\n            gridSettings.ordering = true;\n        }\n\n        return {\n            css: this.gridClasses,\n            dataTables: gridSettings\n        };\n    },\n    'grid-loader': function () {\n        const styles = this.loader.inProgress() ? 'active' : '';\n        return {\n            css: styles\n        };\n    },\n    'grid-footer': function () {\n        return {\n            if: this.footer && this.loader.visible(),\n            css: {\n                hide: !(ko.unwrap(this.loader.visible))\n            }\n        };\n    },\n    'grid-display': function () {\n        const display = this.options.gridDisplay,\n            ctx = this,\n            visible = display === undefined ? true :\n            evaluate(display, id => ctx[id]);\n        return {\n            css: {\n                hide: !visible\n            }\n        };\n    },\n    'grid-header': function () {\n        const filter = (this.gridHeaderItems || []).filter(item => item && item.filterIsVisible)[0];\n        return {\n            css: {\n                hide: !this.gridHeaderItems.length,\n                visibleFilter: filter && filter.filterIsVisible,\n                // only apply grid header classes if they are defined\n                [this.gridHeaderClasses]: this.gridHeaderClasses\n            }\n        };\n    },\n    'grid-wrapper': function () {\n        // TODO: move to templates, too specific\n        const filter = (this.gridHeaderItems || []).filter(item => item && item.filterIsVisible)[0];\n        return {\n            css: {\n                [this.classes]: this.classes,\n                visibleFilter: filter && filter.filterIsVisible\n            }\n        };\n    },\n    'grid-expanded': function (ctx) {\n        if (!this.data) {\n            return;\n        }\n\n        let metadata = ctx.$parent.options.hasChildren.children,\n            DEFAULT_KEY_MAP = {\n                resultsKey: 'data',\n                childDataKey: 'childData'\n            },\n            keyMap = ctx.$parent.dataSourceEndpoint ? _.merge(ctx.$parent.dataSourceEndpoint.keyMap, DEFAULT_KEY_MAP) : DEFAULT_KEY_MAP,\n            parentContext = ctx.$parents.filter(x => x.context)[0],\n            newContext = {\n                metadata: metadata,\n                parentContext: parentContext.context,\n                data: {\n                    [keyMap.resultsKey]: this.data\n                },\n                getValue: function (id) {\n                    if (id === 'row') {\n                        return row;\n                    }\n\n                    return parentContext.context.getValue(id);\n                }\n            };\n\n        // If there is a dataSourceEndpoint, give it the row data for mustache rendering if necessary\n        if (metadata[0].dataSourceEndpoint) {\n            metadata[0].dataSourceEndpoint.data = this.data;\n        }\n\n        metadata[0].data = this.data[keyMap.childDataKey];\n\n        return {\n            metadataFactory: {\n                metadata: metadata,\n                context: newContext\n            }\n        };\n    }\n};\n"]}