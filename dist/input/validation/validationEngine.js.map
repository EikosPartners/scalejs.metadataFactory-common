{"version":3,"sources":["../../../src/input/validation/validationEngine.js"],"names":["validation","init","insertMessages","messagesOnModified","decorateElement","decorateElementOnModified","decorateInputElement","rules","validator","val","p","params","getValue","Array","isArray","apply","every","e","isValid","call","term","message","findIndex","error","patternValidator","param","registerExtenders"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEI;;;;AAIA;AACA,mBAAGA,UAAH,CAAcC,IAAd,CAAmB;AACfC,oBAAgB,KADD;AAEfC,wBAAoB,IAFL;AAGfC,qBAAiB,KAHF;AAIfC,+BAA2B,KAJZ;AAKfC,0BAAsB;AALP,CAAnB;;AAQA,mBAAGN,UAAH,CAAcO,KAAd,CAAoB,YAApB,IAAoC;AAChCC,eAAW,mBAAUC,GAAV,EAAeC,CAAf,EAAkB;AACzB,YAAIC,SAASD,EAAEC,MAAF,GAAWD,EAAEC,MAAb,GAAsBD,CAAnC;AAAA,YACIE,WAAWD,OAAO,CAAP,CADf;AAAA,YAEIH,YAAY,IAFhB;AAGA;AACA,YAAG,CAACK,MAAMC,OAAN,CAAcH,OAAO,CAAP,CAAd,CAAJ,EAA8B;AAC1B,mBAAO,kBAASI,KAAT,CAAe,IAAf,EAAqBJ,MAArB,CAAP;AACH;AACD;AACA,eAAOA,OAAO,CAAP,EAAUK,KAAV,CAAgB,UAAUC,CAAV,EAAa;AAChC,gBAAIC,UAAU,kBAASC,IAAT,CAAc,IAAd,EAAoBF,EAAEG,IAAtB,EAA4BR,QAA5B,CAAd;AACA,gBAAG,CAACM,OAAJ,EAAa;AACTV,0BAAUa,OAAV,GAAoBJ,EAAEI,OAAtB;AACH;AACD,mBAAOH,OAAP;AACH,SANM,CAAP;AAOH,KAjB+B;AAkBhCG,aAAS;AAlBuB,CAApC;;AAqBA,mBAAGrB,UAAH,CAAcO,KAAd,CAAoB,cAApB,IAAsC;AAClCC,eAAW,mBAAUC,GAAV,EAAeC,CAAf,EAAkB;AAC1B,YAAG,CAACD,GAAJ,EAAQ;AACJ,mBAAO,IAAP,CADI,CACS;AAChB;;AAED,eAAO,iBAAEa,SAAF,CAAYZ,CAAZ,EAAe,CAAC,OAAD,EAAUD,GAAV,CAAf,IAAiC,CAAC,CAAzC;AACF,KAPiC;AAQlCY,aAAS;AARyB,CAAtC;;AAWA,mBAAGrB,UAAH,CAAcO,KAAd,CAAoB,aAApB,IAAqC;AACjCC,eAAW,mBAAUC,GAAV,EAAec,KAAf,EAAsB;AAC7B,YAAIA,KAAJ,EAAW;AACP,iBAAKF,OAAL,GAAeE,KAAf;AACA,mBAAO,KAAP;AACH;AACD,eAAO,IAAP;AACH,KAPgC;AAQjCF,aAAS;AARwB,CAArC;;AAWA,IAAIG,mBAAmB,mBAAGxB,UAAH,CAAcO,KAAd,CAAoB,SAApB,EAA+BC,SAAtD;AACA,mBAAGR,UAAH,CAAcO,KAAd,CAAoB,SAApB,EAA+BC,SAA/B,GAA2C,UAAUC,GAAV,EAAeE,MAAf,EAAuB;AAC9D,QAAIH,YAAY,IAAhB;AACA,QAAIK,MAAMC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACvB,eAAOA,OAAOK,KAAP,CAAa,UAAUS,KAAV,EAAiB;AACjC,gBAAIP,UAAUM,iBAAiBf,GAAjB,EAAsBgB,MAAMd,MAA5B,CAAd;AACA,gBAAI,CAACO,OAAL,EAAc;AACVV,0BAAUa,OAAV,GAAoBI,MAAMJ,OAA1B;AACH;AACD,mBAAOH,OAAP;AACH,SANM,CAAP;AAOH;AACD,WAAOM,iBAAiBf,GAAjB,EAAsBE,MAAtB,CAAP;AACH,CAZD;;AAcA,mBAAGX,UAAH,CAAc0B,iBAAd","file":"validationEngine.js","sourcesContent":["import { evaluate } from 'scalejs.expression-jsep';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\nimport 'knockout.validation';\r\n       \r\n    /*\r\n    * made validation engine its own file to support more complex logic\r\n    */\r\n\r\n    //set the generic validation on the knockout binding\r\n    ko.validation.init({\r\n        insertMessages: false,\r\n        messagesOnModified: true,\r\n        decorateElement: false,\r\n        decorateElementOnModified: false,\r\n        decorateInputElement: false\r\n    });\r\n\r\n    ko.validation.rules['expression'] = {\r\n        validator: function (val, p) {\r\n            var params = p.params ? p.params : p,\r\n                getValue = params[1],\r\n                validator = this;\r\n            // option 1: params[0] is not an array so it is just the term\r\n            if(!Array.isArray(params[0])) {\r\n                return evaluate.apply(null, params);\r\n            }\r\n            // option 2: params[0] is an array so it is many terms\r\n            return params[0].every(function (e) {\r\n                var isValid = evaluate.call(null, e.term, getValue);\r\n                if(!isValid) {\r\n                    validator.message = e.message;\r\n                }\r\n                return isValid;\r\n            });\r\n        },\r\n        message: 'Expression is not correct'\r\n    };\r\n\r\n    ko.validation.rules['autocomplete'] = {\r\n        validator: function (val, p) {\r\n           if(!val){\r\n               return true; //if the value is undefined, then we ignore the validation.\r\n           }\r\n\r\n           return _.findIndex(p, ['value', val]) > -1;\r\n        },\r\n        message: 'Expression is not correct'\r\n    };\r\n\r\n    ko.validation.rules['customError'] = {\r\n        validator: function (val, error) {\r\n            if (error) {\r\n                this.message = error;\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        message: 'Value is not valid'\r\n    };\r\n    \r\n    var patternValidator = ko.validation.rules['pattern'].validator;\r\n    ko.validation.rules['pattern'].validator = function (val, params) {\r\n        var validator = this;\r\n        if (Array.isArray(params)) {\r\n            return params.every(function (param) {\r\n                var isValid = patternValidator(val, param.params);\r\n                if (!isValid) {\r\n                    validator.message = param.message;\r\n                }\r\n                return isValid;\r\n            });\r\n        }\r\n        return patternValidator(val, params);\r\n    }   \r\n    \r\n    ko.validation.registerExtenders();\r\n\r\n"]}