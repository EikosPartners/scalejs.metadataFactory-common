{"version":3,"sources":["../../../src/input/validation/validationEngine.js"],"names":["validation","init","insertMessages","messagesOnModified","decorateElement","decorateElementOnModified","decorateInputElement","rules","validator","val","p","params","getValue","Array","isArray","apply","every","e","isValid","call","term","message","findIndex","error","patternValidator","param","registerExtenders"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEI;;;;AAIA;AACA,mBAAGA,UAAH,CAAcC,IAAd,CAAmB;AACfC,oBAAgB,KADD;AAEfC,wBAAoB,IAFL;AAGfC,qBAAiB,KAHF;AAIfC,+BAA2B,KAJZ;AAKfC,0BAAsB;AALP,CAAnB;;AAQA,mBAAGN,UAAH,CAAcO,KAAd,CAAoB,YAApB,IAAoC;AAChCC,eAAW,mBAAUC,GAAV,EAAeC,CAAf,EAAkB;AACzB,YAAIC,SAASD,EAAEC,MAAF,GAAWD,EAAEC,MAAb,GAAsBD,CAAnC;AAAA,YACIE,WAAWD,OAAO,CAAP,CADf;AAAA,YAEIH,YAAY,IAFhB;AAGA;AACA,YAAG,CAACK,MAAMC,OAAN,CAAcH,OAAO,CAAP,CAAd,CAAJ,EAA8B;AAC1B,mBAAO,kBAASI,KAAT,CAAe,IAAf,EAAqBJ,MAArB,CAAP;AACH;AACD;AACA,eAAOA,OAAO,CAAP,EAAUK,KAAV,CAAgB,UAAUC,CAAV,EAAa;AAChC,gBAAIC,UAAU,kBAASC,IAAT,CAAc,IAAd,EAAoBF,EAAEG,IAAtB,EAA4BR,QAA5B,CAAd;AACA,gBAAG,CAACM,OAAJ,EAAa;AACTV,0BAAUa,OAAV,GAAoBJ,EAAEI,OAAtB;AACH;AACD,mBAAOH,OAAP;AACH,SANM,CAAP;AAOH,KAjB+B;AAkBhCG,aAAS;AAlBuB,CAApC;;AAqBA,mBAAGrB,UAAH,CAAcO,KAAd,CAAoB,cAApB,IAAsC;AAClCC,eAAW,mBAAUC,GAAV,EAAeC,CAAf,EAAkB;AAC1B,YAAG,CAACD,GAAJ,EAAQ;AACJ,mBAAO,IAAP,CADI,CACS;AAChB;;AAED,eAAO,iBAAEa,SAAF,CAAYZ,CAAZ,EAAe,CAAC,OAAD,EAAUD,GAAV,CAAf,IAAiC,CAAC,CAAzC;AACF,KAPiC;AAQlCY,aAAS;AARyB,CAAtC;;AAWA,mBAAGrB,UAAH,CAAcO,KAAd,CAAoB,aAApB,IAAqC;AACjCC,eAAW,mBAAUC,GAAV,EAAec,KAAf,EAAsB;AAC7B,YAAIA,KAAJ,EAAW;AACP,iBAAKF,OAAL,GAAeE,KAAf;AACA,mBAAO,KAAP;AACH;AACD,eAAO,IAAP;AACH,KAPgC;AAQjCF,aAAS;AARwB,CAArC;;AAWA,IAAIG,mBAAmB,mBAAGxB,UAAH,CAAcO,KAAd,CAAoB,SAApB,EAA+BC,SAAtD;AACA,mBAAGR,UAAH,CAAcO,KAAd,CAAoB,SAApB,EAA+BC,SAA/B,GAA2C,UAAUC,GAAV,EAAeE,MAAf,EAAuB;AAC9D,QAAIH,YAAY,IAAhB;AACA,QAAIK,MAAMC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACvB,eAAOA,OAAOK,KAAP,CAAa,UAAUS,KAAV,EAAiB;AACjC,gBAAIP,UAAUM,iBAAiBf,GAAjB,EAAsBgB,MAAMd,MAA5B,CAAd;AACA,gBAAI,CAACO,OAAL,EAAc;AACVV,0BAAUa,OAAV,GAAoBI,MAAMJ,OAA1B;AACH;AACD,mBAAOH,OAAP;AACH,SANM,CAAP;AAOH;AACD,WAAOM,iBAAiBf,GAAjB,EAAsBE,MAAtB,CAAP;AACH,CAZD;;AAcA,mBAAGX,UAAH,CAAc0B,iBAAd","file":"validationEngine.js","sourcesContent":["import { evaluate } from 'scalejs.expression-jsep';\nimport ko from 'knockout';\nimport _ from 'lodash';\nimport 'knockout.validation';\n       \n    /*\n    * made validation engine its own file to support more complex logic\n    */\n\n    //set the generic validation on the knockout binding\n    ko.validation.init({\n        insertMessages: false,\n        messagesOnModified: true,\n        decorateElement: false,\n        decorateElementOnModified: false,\n        decorateInputElement: false\n    });\n\n    ko.validation.rules['expression'] = {\n        validator: function (val, p) {\n            var params = p.params ? p.params : p,\n                getValue = params[1],\n                validator = this;\n            // option 1: params[0] is not an array so it is just the term\n            if(!Array.isArray(params[0])) {\n                return evaluate.apply(null, params);\n            }\n            // option 2: params[0] is an array so it is many terms\n            return params[0].every(function (e) {\n                var isValid = evaluate.call(null, e.term, getValue);\n                if(!isValid) {\n                    validator.message = e.message;\n                }\n                return isValid;\n            });\n        },\n        message: 'Expression is not correct'\n    };\n\n    ko.validation.rules['autocomplete'] = {\n        validator: function (val, p) {\n           if(!val){\n               return true; //if the value is undefined, then we ignore the validation.\n           }\n\n           return _.findIndex(p, ['value', val]) > -1;\n        },\n        message: 'Expression is not correct'\n    };\n\n    ko.validation.rules['customError'] = {\n        validator: function (val, error) {\n            if (error) {\n                this.message = error;\n                return false;\n            }\n            return true;\n        },\n        message: 'Value is not valid'\n    };\n    \n    var patternValidator = ko.validation.rules['pattern'].validator;\n    ko.validation.rules['pattern'].validator = function (val, params) {\n        var validator = this;\n        if (Array.isArray(params)) {\n            return params.every(function (param) {\n                var isValid = patternValidator(val, param.params);\n                if (!isValid) {\n                    validator.message = param.message;\n                }\n                return isValid;\n            });\n        }\n        return patternValidator(val, params);\n    }   \n    \n    ko.validation.registerExtenders();\n\n"]}