{"version":3,"sources":["../../../src/input/validation/validationEngine.js"],"names":["validation","init","insertMessages","messagesOnModified","decorateElement","decorateElementOnModified","decorateInputElement","rules","expression","validator","val","p","params","getValue","Array","isArray","every","e","isValid","call","term","message","autocomplete","findIndex","customError","error","patternValidator","pattern","param","registerExtenders"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA;AACA,mBAAGA,UAAH,CAAcC,IAAd,CAAmB;AACfC,oBAAgB,KADD;AAEfC,wBAAoB,IAFL;AAGfC,qBAAiB,KAHF;AAIfC,+BAA2B,KAJZ;AAKfC,0BAAsB;AALP,CAAnB;;AAQA,mBAAGN,UAAH,CAAcO,KAAd,CAAoBC,UAApB,GAAiC;AAC7BC,eAAW,mBAAUC,GAAV,EAAeC,CAAf,EAAkB;AACzB,YAAMC,SAASD,EAAEC,MAAF,GAAWD,EAAEC,MAAb,GAAsBD,CAArC;AAAA,YACIE,WAAWD,OAAO,CAAP,CADf;AAAA,YAEIH,YAAY,IAFhB;AAGA;AACA,YAAI,CAACK,MAAMC,OAAN,CAAcH,OAAO,CAAP,CAAd,CAAL,EAA+B;AAC3B,mBAAO,sDAAYA,MAAZ,EAAP;AACH;AACD;AACA,eAAOA,OAAO,CAAP,EAAUI,KAAV,CAAgB,UAACC,CAAD,EAAO;AAC1B,gBAAMC,UAAU,kBAASC,IAAT,CAAc,IAAd,EAAoBF,EAAEG,IAAtB,EAA4BP,QAA5B,CAAhB;AACA,gBAAI,CAACK,OAAL,EAAc;AACVT,0BAAUY,OAAV,GAAoBJ,EAAEI,OAAtB;AACH;AACD,mBAAOH,OAAP;AACH,SANM,CAAP;AAOH,KAjB4B;AAkB7BG,aAAS;AAlBoB,CAAjC;;AAqBA,mBAAGrB,UAAH,CAAcO,KAAd,CAAoBe,YAApB,GAAmC;AAC/Bb,eAAW,mBAAUC,GAAV,EAAeC,CAAf,EAAkB;AACzB,YAAI,CAACD,GAAL,EAAU;AACN,mBAAO,IAAP,CADM,CACO;AAChB;;AAED,eAAO,iBAAEa,SAAF,CAAYZ,CAAZ,EAAe,CAAC,OAAD,EAAUD,GAAV,CAAf,IAAiC,CAAC,CAAzC;AACH,KAP8B;AAQ/BW,aAAS;AARsB,CAAnC;;AAWA,mBAAGrB,UAAH,CAAcO,KAAd,CAAoBiB,WAApB,GAAkC;AAC9Bf,eAAW,mBAAUC,GAAV,EAAee,KAAf,EAAsB;AAC7B,YAAIA,KAAJ,EAAW;AACP,iBAAKJ,OAAL,GAAeI,KAAf;AACA,mBAAO,KAAP;AACH;AACD,eAAO,IAAP;AACH,KAP6B;AAQ9BJ,aAAS;AARqB,CAAlC;;AAWA,IAAMK,mBAAmB,mBAAG1B,UAAH,CAAcO,KAAd,CAAoBoB,OAApB,CAA4BlB,SAArD;AACA,mBAAGT,UAAH,CAAcO,KAAd,CAAoBoB,OAApB,CAA4BlB,SAA5B,GAAwC,UAAUC,GAAV,EAAeE,MAAf,EAAuB;AAC3D,QAAMH,YAAY,IAAlB;AACA,QAAIK,MAAMC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACvB,eAAOA,OAAOI,KAAP,CAAa,UAACY,KAAD,EAAW;AAC3B,gBAAMV,UAAUQ,iBAAiBhB,GAAjB,EAAsBkB,MAAMhB,MAA5B,CAAhB;AACA,gBAAI,CAACM,OAAL,EAAc;AACVT,0BAAUY,OAAV,GAAoBO,MAAMP,OAA1B;AACH;AACD,mBAAOH,OAAP;AACH,SANM,CAAP;AAOH;AACD,WAAOQ,iBAAiBhB,GAAjB,EAAsBE,MAAtB,CAAP;AACH,CAZD;;AAcA,mBAAGZ,UAAH,CAAc6B,iBAAd","file":"validationEngine.js","sourcesContent":["import { evaluate } from 'scalejs.expression-jsep';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\nimport 'knockout.validation';\r\n\r\n/*\r\n* made validation engine its own file to support more complex logic\r\n*/\r\n\r\n// set the generic validation on the knockout binding\r\nko.validation.init({\r\n    insertMessages: false,\r\n    messagesOnModified: true,\r\n    decorateElement: false,\r\n    decorateElementOnModified: false,\r\n    decorateInputElement: false\r\n});\r\n\r\nko.validation.rules.expression = {\r\n    validator: function (val, p) {\r\n        const params = p.params ? p.params : p,\r\n            getValue = params[1],\r\n            validator = this;\r\n        // option 1: params[0] is not an array so it is just the term\r\n        if (!Array.isArray(params[0])) {\r\n            return evaluate(...params);\r\n        }\r\n        // option 2: params[0] is an array so it is many terms\r\n        return params[0].every((e) => {\r\n            const isValid = evaluate.call(null, e.term, getValue);\r\n            if (!isValid) {\r\n                validator.message = e.message;\r\n            }\r\n            return isValid;\r\n        });\r\n    },\r\n    message: 'Expression is not correct'\r\n};\r\n\r\nko.validation.rules.autocomplete = {\r\n    validator: function (val, p) {\r\n        if (!val) {\r\n            return true; // if the value is undefined, then we ignore the validation.\r\n        }\r\n\r\n        return _.findIndex(p, ['value', val]) > -1;\r\n    },\r\n    message: 'Expression is not correct'\r\n};\r\n\r\nko.validation.rules.customError = {\r\n    validator: function (val, error) {\r\n        if (error) {\r\n            this.message = error;\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n    message: 'Value is not valid'\r\n};\r\n\r\nconst patternValidator = ko.validation.rules.pattern.validator;\r\nko.validation.rules.pattern.validator = function (val, params) {\r\n    const validator = this;\r\n    if (Array.isArray(params)) {\r\n        return params.every((param) => {\r\n            const isValid = patternValidator(val, param.params);\r\n            if (!isValid) {\r\n                validator.message = param.message;\r\n            }\r\n            return isValid;\r\n        });\r\n    }\r\n    return patternValidator(val, params);\r\n};\r\n\r\nko.validation.registerExtenders();"]}