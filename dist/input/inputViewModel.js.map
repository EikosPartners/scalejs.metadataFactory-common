{"version":3,"sources":["../../src/input/inputViewModel.js"],"names":["inputViewModel","inputTypes","autocomplete","select","multiselect","node","inputVM","options","addBlank","call","n","merge","input_defaults","keyMap","context","inputValue","createInputValue","values","Array","isArray","isShown","hidden","hasFocus","hover","validations","required","customError","disabled","readonly","deriveReadonly","maxlength","maxLength","pattern","getPattern","tooltipShown","shake","datePlaceholder","inputType","pureComputed","placeholder","setValueFuncs","checkboxList","setCheckboxListValue","checkbox","setCheckboxValue","subs","computedValueExpression","registeredAction","initialRegisteredAction","initial","formatters","dateFormatter","format","textFormatter","identity","viewmodel","mapItem","getValue","hasOwnProperty","emptyValue","setValue","data","opts","value","wasModified","isModified","update","error","validate","isValid","rendered","severity","visibleMessage","inputMessage","message","length","errorLabel","label","onClick","assignDate","params","console","newDate","add","rawFormat","setReadonly","bool","warn","undefined","includes","alias","regex","readonlyParam","override","read","write","date","mapper","delimiter","delimeter","val","key","map","k","join","text","textKey","valueKey","original","minDate","observable","maxDate","registered","fetchData","newValue","action","id","callback","Object","keys","forEach","storeKey","valueToStore","dictionary","type","actionType","subscribe","push","cloneDeep","expression","term","unique","oldValue","remove","deleteFlag","deleted","occurances","filter","extend","valueExpression","allowSet","isFinite","Number","toFixed","shook","setTimeout","dispose","sub"],"mappings":"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","file":"inputViewModel.js","sourcesContent":["import { observable, observableArray, computed } from 'knockout';\r\nimport { createViewModel, globalMetadata } from 'scalejs.metadataFactory';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport { has, get, is, merge } from 'scalejs';\r\nimport dataservice from 'dataservice';\r\nimport { extend } from 'lodash';\r\nimport moment from 'moment';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\nimport noticeboard from 'scalejs.noticeboard';\r\n\r\nimport autocompleteViewModel from './autocomplete/autocompleteViewModel';\r\nimport selectViewModel from './select/selectViewModel';\r\n\r\nlet inputTypes = {\r\n    autocomplete: autocompleteViewModel,\r\n    select: selectViewModel,\r\n    multiselect: function (node, inputVM) {\r\n        node.options = merge(node.options || {}, {\r\n            addBlank: false\r\n        }); // do not add blanks in multiselect\r\n\r\n        return selectViewModel.call(this, node, inputVM);\r\n    }\r\n}\r\n\r\nexport default function inputViewModel(n) {\r\n    var // metadata node + context\r\n        node = _.merge({}, globalMetadata().input_defaults || {}, n),\r\n        options = node.options || {},\r\n        keyMap = node.keyMap || {},\r\n        context = this || {},\r\n\r\n        // inputValue: accepts user input via KO Binding\r\n        inputValue = createInputValue(),\r\n\r\n        // values which can be chosen from\r\n        values = observableArray(Array.isArray(options.values) ? options.values : []),\r\n\r\n        // Depricated? //TODO: Yes isShown is depricated in favor of rendered\r\n        isShown = observable(!node.hidden),\r\n\r\n        // 2-way binding with state of focus\r\n        hasFocus = observable(),\r\n\r\n        // 1-way binding with state of hover\r\n        hover = observable(),\r\n\r\n        // validations\r\n        validations = options.validations || null,\r\n        required = validations ? validations.required : false,\r\n        customError = observable(),\r\n\r\n        // attributes\r\n        disabled = observable(!!options.disabled),\r\n        readonly = deriveReadonly(options.readonly),\r\n        maxlength = validations && validations.maxLength,\r\n\r\n        // patterns\r\n        pattern = options.pattern === true ? getPattern() : options.pattern,\r\n        tooltipShown = observable(false), //for patterns\r\n        shake = observable(false),\r\n\r\n        //specific datepicker\r\n        datePlaceholder = node.inputType === 'datepicker' && ko.pureComputed(function () {\r\n            var placeholder = !hover() || hasFocus() ? '' : 'mm/dd/yyyy';\r\n            return placeholder;\r\n        }),\r\n\r\n        // custom setValue functions for input types\r\n        setValueFuncs = {\r\n            checkboxList: setCheckboxListValue,\r\n            multiselect: setCheckboxListValue,\r\n            checkbox: setCheckboxValue\r\n        },\r\n\r\n        // subs disposable array\r\n        subs = [],\r\n\r\n        computedValueExpression,\r\n\r\n        // registered action vars\r\n        registeredAction,\r\n        initialRegisteredAction,\r\n        initial,\r\n\r\n        // move out to utility?\r\n        formatters = {\r\n            dateFormatter: dateFormatter\r\n        },\r\n        format = options.values && options.values.textFormatter ? formatters[options.values.textFormatter] : _.identity,\r\n\r\n        // BaseViewModel to be passed to Mixins\r\n        viewmodel = {\r\n            mapItem: mapItem,\r\n            inputValue: inputValue,\r\n            hasFocus: hasFocus,\r\n            format: format,\r\n            subs: subs,\r\n            readonly: readonly,\r\n            values: values\r\n        };\r\n\r\n    /*\r\n     * PJSON API (refine)\r\n     */\r\n    function getValue() {\r\n        if (node.inputType === 'checkbox') {\r\n            return inputValue() ?\r\n                get(options, 'checkedValue', true) :\r\n                get(options, 'uncheckedValue', false);\r\n        }\r\n        return inputValue() !== '' ? inputValue() :\r\n            options.hasOwnProperty('emptyValue') ? options.emptyValue :  '';\r\n    }\r\n\r\n    function setValue(data, opts = {}) {\r\n        let value = is(data, 'object') ? data.value : data,  // TODO: Refactor - should only accept \"value\", not \"data\".\r\n            wasModified = inputValue.isModified();\r\n\r\n        initial = opts.initial;\r\n\r\n        if (data === getValue()) {\r\n            return;\r\n        }\r\n         // uses setValueFunc if defined, else updates inputValue\r\n        if (setValueFuncs[node.inputType]) {\r\n            setValueFuncs[node.inputType](data);\r\n        } else if (viewmodel.setValue) {\r\n            viewmodel.setValue(data);\r\n        } else {\r\n            inputValue(value);\r\n        }\r\n\r\n        // programtically setting the inputValue will not cause isModified to become true\r\n        if (!wasModified) { inputValue.isModified(false); }\r\n\r\n        initial = false;\r\n    }\r\n\r\n    function update(data) {\r\n        if (data.hasOwnProperty('value')) {\r\n            setValue(data.value);\r\n        }\r\n        if (data.hasOwnProperty('error')) {\r\n            customError(data.error);\r\n        }\r\n        if (data.hasOwnProperty('values')) {\r\n            values(data.values);\r\n        }\r\n    }\r\n\r\n    function validate() {\r\n        // can rely on \"this\" when properties are garuenteed from MD factory and used with compliance\r\n        inputValue.isModified(true);\r\n        return !inputValue.isValid() && isShown() && this.rendered() && inputValue.severity() === 1;\r\n    }\r\n\r\n    // TODO: How to allow for custom visible message specific to project?\r\n    function visibleMessage() {\r\n        // returns the message to be displayed (based on validations)\r\n        var inputMessage, message,\r\n            severity = inputValue.severity();\r\n\r\n        if (!inputValue.isModified() || inputValue.isValid() || !this.rendered() || !isShown()) {\r\n            // the user has yet to modify the input\r\n            // or there is no message. return nothing\r\n            return;\r\n        }\r\n\r\n        inputMessage = inputValue.error();\r\n        inputMessage = inputMessage[inputMessage.length - 1] === '.' ? inputMessage : inputMessage + '.';\r\n\r\n        if (inputMessage === 'Required.') {\r\n            message = (node.errorLabel || node.label) + ' is required.';\r\n        } else {\r\n            message = (node.errorLabel || node.label) + ' is invalid. ' + inputMessage;\r\n        }\r\n\r\n        return {\r\n            message,\r\n            severity,\r\n            onClick() {\r\n                hasFocus(true);\r\n            }\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Rule Engine (todo - Refactor out)\r\n     */\r\n\r\n    function assignDate(value, params) {\r\n        if (!is(params, 'object')) {\r\n            console.error('Assign date only supports object params', params);\r\n            return;\r\n        }\r\n        var newDate = moment(value).add(params).format(options.rawFormat || 'YYYY-MM-DD');\r\n        setValue(newDate);\r\n    }\r\n\r\n    function setReadonly(bool) {\r\n        readonly(bool)\r\n    }\r\n\r\n    function setCheckboxListValue(data) {\r\n        if (data && data.value) {\r\n            console.warn('Using depricated setValue { value: <> } interface. Please update code.');\r\n        }\r\n        if (Array.isArray(data)) {\r\n            inputValue(data);\r\n        } else if (data !== null && data !== undefined) {\r\n            console.warn('Setting a checkbox list with a non-array value. Converting to array...');\r\n            inputValue([data]);\r\n        } else {\r\n            inputValue([]);\r\n        }\r\n    }\r\n\r\n    function setCheckboxValue(data) {\r\n        inputValue(data === get(options, 'checkedValue', true) ? true : false);\r\n    }\r\n\r\n    /*\r\n     * Internal\r\n     */\r\n    function createInputValue() {\r\n        // checkboxList can have multiple answers so make it an array\r\n        if (['checkboxList', 'multiselect'].includes(node.inputType)) {\r\n            return observableArray(options.value || []);\r\n        } else {\r\n            // if there is no initial value, set it to empty string,\r\n            // so that isModified does not get triggered for empty dropdowns\r\n            let value = options.value;\r\n            if (node.inputType === 'checkbox') {\r\n                value = (options.value === get(options, 'checkedValue', true) ? true : false);\r\n            }\r\n            return observable(has(options.value) ? value : '');\r\n        }\r\n    }\r\n\r\n\r\n    function getPattern() {\r\n        // implicitly determine pattern (inputmask) if there is a Regex validation\r\n        if (validations && validations.pattern) {\r\n\r\n            if(!validations.pattern.params) {\r\n                console.error('Pattern validation must have params and message', node);\r\n                return;\r\n            }\r\n\r\n            return {\r\n                alias: 'Regex',\r\n                regex: validations.pattern.params\r\n            };\r\n        }\r\n    }\r\n\r\n    function deriveReadonly(readonlyParam) {\r\n        if (is(readonlyParam, 'string')) {\r\n            let override = observable();\r\n            return computed({\r\n                read: function () {\r\n                    return has(override()) ?\r\n                        override()\r\n                        : evaluate(readonlyParam, context.getValue);\r\n                },\r\n                write: function (value) {\r\n                    override(value);\r\n                }\r\n            });\r\n        }\r\n        return observable(!!readonlyParam);\r\n    }\r\n    /*\r\n     * Utils (can be Refactored to common)\r\n     */\r\n\r\n    function dateFormatter(date) {\r\n        return moment(date).format('MM/DD/YYYY');\r\n    }\r\n\r\n    function mapItem(mapper) {\r\n        var textFormatter = formatters[mapper.textFormatter] || _.identity,\r\n            delimiter = mapper.delimeter || ' / ';\r\n\r\n        function format(val, key) {\r\n           if(Array.isArray(key)) {\r\n               return key.map((k) => { return val[k]; }).join(delimiter)\r\n           } else {\r\n               return val[key]\r\n           }\r\n        }\r\n\r\n        return function (val) {\r\n            return {\r\n                text: textFormatter(format(val, mapper.textKey)),\r\n                value: format(val, mapper.valueKey),\r\n                original: val\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Init\r\n     */\r\n\r\n    // Mixin the viewModel specific to the inputType\r\n    if (inputTypes[node.inputType]) {\r\n        extend(viewmodel, inputTypes[node.inputType].call(context, node, viewmodel));\r\n    }\r\n\r\n    // TODO: Specific to data, move into custom viewModel?\r\n    // make min/max date into observables\r\n    if (options.minDate) {\r\n        viewmodel.minDate = ko.observable(options.minDate);\r\n    }\r\n    if (options.maxDate) {\r\n        viewmodel.maxDate = ko.observable(options.maxDate);\r\n    }\r\n\r\n    if (options.registered) {\r\n        registeredAction = createViewModel.call(this, {\r\n            type: 'action',\r\n            actionType: 'ajax',\r\n            options: merge(options.registered.update || options.registered, { data: {} })\r\n        });\r\n\r\n        initialRegisteredAction = createViewModel.call(this, {\r\n            type: 'action',\r\n            actionType: 'ajax',\r\n            options: merge(options.registered.initial || options.registered, { data: {} })\r\n        });\r\n\r\n        function fetchData() {\r\n            let newValue = inputValue(),\r\n                action = initial ? initialRegisteredAction : registeredAction;\r\n\r\n            action.options.data[node.id] = newValue; //our own sub gets called before context is updated\r\n\r\n            if (newValue !== '') {\r\n                action.action({\r\n                    callback: (error, data) => {\r\n                        if (error) {\r\n                            return;\r\n                        }\r\n                        Object.keys(data).forEach((key) => {\r\n                            if (key === 'store') {\r\n                                Object.keys(data[key]).forEach(function (storeKey) {\r\n                                    let valueToStore = data[key][storeKey];\r\n                                    noticeboard.setValue(storeKey, valueToStore);\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (!context.dictionary && !context.data) {\r\n                                console.warn('Using a registered input when no data/dictionary available in context', node);\r\n                                return;\r\n                            }\r\n                            var node = context.dictionary && context.dictionary()[key];\r\n                            if (node && node.update) {\r\n                                node.update(data[key]);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        inputValue.subscribe(function (newValue) {\r\n            fetchData()\r\n        });\r\n\r\n        // listen for 'refresh' event\r\n        subs.push(receive(node.id + '.refreshRegistered', function(options) {\r\n            //console.log('--> refreshing registered', node);\r\n            fetchData(options);\r\n        }));\r\n\r\n        fetchData();    //make initial call if default value is set--fetchData checks if inputValue() is ''\r\n    }\r\n\r\n    // TODO: Clean up validation Code\r\n    // add validations to the inputvalue\r\n    validations = merge(_.cloneDeep(options.validations), { customError: customError });\r\n    if (validations.expression) {\r\n        if(options.validations.expression.message && !options.validations.expression.term) {\r\n            console.error(\"[input] if providing a message for expression validation, must also provide term\");\r\n            options.validations.expression.term = \"true\"; // don't cause exceptions.\r\n        }\r\n        validations.expression.params = [\r\n            options.validations.expression.message ?\r\n                options.validations.expression.term\r\n                : options.validations.expression,\r\n            context.getValue\r\n        ]\r\n    }\r\n\r\n    if (options.unique && node.inputType !== 'autocomplete') {\r\n        inputValue.subscribe(function (oldValue) {\r\n            context.unique[node.id].remove(oldValue);\r\n        }, null, 'beforeChange');\r\n\r\n        inputValue.subscribe(function (newValue) {\r\n            if(context.deleteFlag && context.deleteFlag()) { return; }\r\n            context.unique[node.id].push(newValue);\r\n        });\r\n\r\n        if(context.deleteFlag) {\r\n            context.deleteFlag.subscribe(function(deleted) {\r\n                if (deleted) {\r\n                    context.unique[node.id].remove(inputValue());\r\n                }\r\n            });\r\n        }\r\n\r\n        context.unique[node.id].subscribe(function (values) {\r\n            var occurances = values.filter(function (value) {\r\n                return value === inputValue();\r\n            }).length;\r\n\r\n            customError(occurances > 1 ? 'Identifier must be unique' : undefined);\r\n        })\r\n    }\r\n\r\n    if (viewmodel.validations) {\r\n        validations = merge(validations, viewmodel.validations);\r\n    }\r\n    inputValue = inputValue.extend(validations);\r\n\r\n    // Allows us to set values on an input from expression\r\n    if (options.valueExpression) {\r\n        computedValueExpression = computed(() => {\r\n            if (options.allowSet === false) {\r\n                inputValue(); // re-eval when inputValue is set\r\n            }\r\n            return evaluate(options.valueExpression, context.getValue);\r\n        });\r\n        setValue(computedValueExpression());\r\n        computedValueExpression.subscribe(function(value){\r\n            setValue(value)\r\n        });\r\n\r\n        subs.push(computedValueExpression)\r\n    }\r\n\r\n    // TODO: make into insert zeros option?\r\n    if (get(options, 'pattern.alias') === 'percent') {\r\n        inputValue.subscribe((value) => {\r\n            if (value && isFinite(Number(value))) {\r\n                inputValue(Number(value).toFixed(3));\r\n            }\r\n        });\r\n    }\r\n\r\n    shake.subscribe((shook) => {\r\n        shook && setTimeout(() => {\r\n            shake(false);\r\n        }, 1000);\r\n    });\r\n\r\n    return merge(node, viewmodel, {\r\n        inputValue,\r\n        visibleMessage,\r\n        customError,\r\n        hasFocus,\r\n        hover,\r\n        datePlaceholder,\r\n        assignDate,\r\n        isShown,\r\n        required,\r\n        readonly,\r\n        disabled,\r\n        maxlength,\r\n        pattern,\r\n        tooltipShown,\r\n        shake,\r\n        options,\r\n        setValue,\r\n        update,\r\n        context: this,\r\n        error: inputValue.error,\r\n\r\n        // Mixin-Overrides\r\n        getValue: viewmodel.getValue || getValue,\r\n        values: viewmodel.values || values,\r\n        setReadonly: viewmodel.setReadonly || setReadonly,\r\n        validate: viewmodel.validate || validate,\r\n\r\n        dispose: function () {\r\n            if (viewmodel.dispose) {\r\n                viewmodel.dispose();\r\n            }\r\n            (subs || []).forEach(function (sub) {\r\n                sub.dispose && sub.dispose();\r\n            });\r\n\r\n            if (options.unique) {\r\n                context.unique[node.id].remove(inputValue());\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n\r\n\r\n    // implements an input of type\r\n    // text, select, date, radio, checkbox, checkboxList\r\n\r\n    //TODO: Refactor Session\r\n    //- createJSDocs\r\n    //- revisit and de-tangle bindings\r\n    //- refactor validations so that the tooltip works without inputText wrapper in the inputType template\r\n    //- move tooltip/helpText in options\r\n\r\n    /**\r\n     *  input is the component to use when accepting user-input.\r\n     *  This is the best way to create an interactive UI and\r\n     *  autogenerate your underlying data model by using an adapter in the parent chain.\r\n     *\r\n     * @module input\r\n     *\r\n     * @param {object} node\r\n     *  The configuration specs for the component.\r\n     * @param {string} [node.id]\r\n     *  By specifying an \"id\" on your input, you are automatically adding your input's data to the data context model.\r\n     * @param {object} node.options\r\n     *  The options pertaining to your specific inputType\r\n     * @param {boolean|string} [node.rendered=true]\r\n     *  Boolean or expression to render the input (or not)\r\n     * @param {array} [node.options.values]\r\n     *  The values that can be chosen from for inputTypes that have selections (e.g. radio, checkboxList)\r\n     * @param {object} [node.options.validations]\r\n     *  KO validations object to validate the inputValue\r\n     * @param {boolean} [node.options.validations.required]\r\n     *  Required validation for ko - also will show * next to label indicating it is required\r\n     * @param {boolean|string} [node.options.readonly=false]\r\n     *  Boolean or expression to set the input as readonly\r\n     * @param {boolean} [node.options.disabled]np\r\n     *  Disables the input (different from readonly)\r\n     * @param {object|string|boolean} [node.options.pattern]\r\n     *  Sets an inputmask for the input. If a string, this is the mask. If an object, gets passed as is.\r\n     *  If boolean = true, uses pattern validation.\r\n     * @param {boolean} [node.options.vertical=false]\r\n     *  For multi-option types (e.g. checkboxList, radio), sets the display to block if true for the options\r\n     */\r\n"]}