{"version":3,"sources":["../../src/input/inputViewModel.js"],"names":[],"mappings":"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","file":"inputViewModel.js","sourcesContent":["import { observable, observableArray, computed } from 'knockout';\r\nimport { createViewModel } from 'scalejs.metadataFactory';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { receive } from 'scalejs.messagebus';\r\nimport { has, get, is, merge } from 'scalejs';\r\nimport dataservice from 'dataservice';\r\nimport { extend } from 'lodash';\r\nimport moment from 'moment';\r\nimport ko from 'knockout';\r\nimport _ from 'lodash';\r\nimport noticeboard from 'scalejs.noticeboard';\r\n\r\nimport autocompleteViewModel from './autocomplete/autocompleteViewModel';\r\nimport selectViewModel from './select/selectViewModel';\r\n\r\nlet inputTypes = {\r\n    autocomplete: autocompleteViewModel,\r\n    select: selectViewModel,\r\n    multiselect: function (node, inputVM) {\r\n        node.options = merge(node.options || {}, {\r\n            addBlank: false\r\n        }); // do not add blanks in multiselect\r\n\r\n        return selectViewModel.call(this, node, inputVM);\r\n    }\r\n}\r\n\r\nexport default function inputViewModel(node) {\r\n    var // metadata node + context\r\n        options = node.options || {},\r\n        keyMap = node.keyMap || {},\r\n        context = this || {},\r\n\r\n        // inputValue: accepts user input via KO Binding\r\n        inputValue = createInputValue(),\r\n\r\n        // values which can be chosen from\r\n        values = observableArray(Array.isArray(options.values) ? options.values : []),\r\n\r\n        // Depricated? //TODO: Yes isShown is depricated in favor of rendered\r\n        isShown = observable(!node.hidden),\r\n\r\n        // 2-way binding with state of focus\r\n        hasFocus = observable(),\r\n\r\n        // 1-way binding with state of hover\r\n        hover = observable(),\r\n\r\n        // validations\r\n        validations = options.validations || null,\r\n        required = validations ? validations.required : false,\r\n        customError = observable(),\r\n\r\n        // attributes\r\n        disabled = observable(!!options.disabled),\r\n        readonly = deriveReadonly(options.readonly),\r\n        maxlength = validations && validations.maxLength,\r\n\r\n        // patterns\r\n        pattern = options.pattern === true ? getPattern() : options.pattern,\r\n        tooltipShown = observable(false), //for patterns\r\n        shake = observable(false),\r\n\r\n        //specific datepicker\r\n        datePlaceholder = node.inputType === 'datepicker' && ko.pureComputed(function () {\r\n            var placeholder = !hover() || hasFocus() ? '' : 'mm/dd/yyyy';\r\n            return placeholder;\r\n        }),\r\n\r\n        // custom setValue functions for input types\r\n        setValueFuncs = {\r\n            checkboxList: setCheckboxListValue,\r\n            multiselect: setCheckboxListValue\r\n        },\r\n\r\n        // subs disposable array\r\n        subs = [],\r\n\r\n        computedValueExpression,\r\n\r\n        // registered action vars\r\n        registeredAction,\r\n        initialRegisteredAction,\r\n        initial,\r\n\r\n        // move out to utility?\r\n        formatters = {\r\n            dateFormatter: dateFormatter\r\n        },\r\n        format = options.values && options.values.textFormatter ? formatters[options.values.textFormatter] : _.identity,\r\n\r\n        // BaseViewModel to be passed to Mixins\r\n        viewmodel = {\r\n            mapItem: mapItem,\r\n            inputValue: inputValue,\r\n            hasFocus: hasFocus,\r\n            format: format,\r\n            subs: subs,\r\n            readonly: readonly,\r\n            values: values\r\n        };\r\n\r\n    /*\r\n     * PJSON API (refine)\r\n     */\r\n    function getValue() {\r\n        return inputValue() || '';\r\n    }\r\n\r\n    function setValue(data, opts = {}) {\r\n        let value = is(data, 'object') ? data.value : data,  // TODO: Refactor - should only accept \"value\", not \"data\".\r\n            wasModified = inputValue.isModified();\r\n\r\n        initial = opts.initial;\r\n\r\n         // uses setValueFunc if defined, else updates inputValue\r\n        if (setValueFuncs[node.inputType]) {\r\n            setValueFuncs[node.inputType](data);\r\n        } else if (viewmodel.setValue) {\r\n            viewmodel.setValue(data);\r\n        } else {\r\n            inputValue(value);\r\n        }\r\n\r\n        // programtically setting the inputValue will not cause isModified to become true\r\n        if (!wasModified) { inputValue.isModified(false); }\r\n\r\n        initial = false;\r\n    }\r\n\r\n    function update(data) {\r\n        if (data.hasOwnProperty('value')) {\r\n            setValue(data.value);\r\n        }\r\n        if (data.hasOwnProperty('error')) {\r\n            customError(data.error);\r\n        }\r\n        if (data.hasOwnProperty('values')) {\r\n            values(data.values);\r\n        }\r\n    }\r\n\r\n    function validate() {\r\n        console.error('Relying on \"this\" for rendered in validate. REFACTOR');\r\n        inputValue.isModified(true);\r\n        return !inputValue.isValid() && isShown() && this.rendered() && inputValue.severity() === 1;\r\n    }\r\n\r\n    // TODO: How to allow for custom visible message specific to project?\r\n    function visibleMessage() {\r\n        // returns the message to be displayed (based on validations)\r\n        var inputMessage, message,\r\n            severity = inputValue.severity();\r\n\r\n        if (!inputValue.isModified() || inputValue.isValid() || !this.rendered() || !isShown()) {\r\n            // the user has yet to modify the input\r\n            // or there is no message. return nothing\r\n            return;\r\n        }\r\n\r\n        inputMessage = inputValue.error();\r\n        inputMessage = inputMessage[inputMessage.length - 1] === '.' ? inputMessage : inputMessage + '.';\r\n\r\n        if (inputMessage === 'Required.') {\r\n            message = (node.errorLabel || node.label) + ' is required.';\r\n        } else {\r\n            message = (node.errorLabel || node.label) + ' is invalid. ' + inputMessage;\r\n        }\r\n\r\n        return {\r\n            message,\r\n            severity,\r\n            onClick() {\r\n                hasFocus(true);\r\n            }\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Rule Engine (todo - Refactor out)\r\n     */\r\n\r\n    function assignDate(value, params) {\r\n        if (!is(params, 'object')) {\r\n            console.error('Assign date only supports object params', params);\r\n            return;\r\n        }\r\n        var newDate = moment(value).add(params).format(options.rawFormat || 'YYYY-MM-DD');\r\n        setValue(newDate);\r\n    }\r\n\r\n    function setReadonly(bool) {\r\n        readonly(bool)\r\n    }\r\n\r\n    function setCheckboxListValue(data) {\r\n        if (data && data.value) {\r\n            console.warn('Using depricated setValue { value: <> } interface. Please update code.');\r\n        }\r\n        if (Array.isArray(data)) {\r\n            inputValue(data);\r\n        } else if (data !== null && data !== undefined) {\r\n            console.warn('Setting a checkbox list with a non-array value. Converting to array...');\r\n            inputValue([data]);\r\n        } else {\r\n            inputValue([]);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal\r\n     */\r\n    function createInputValue() {\r\n        // checkboxList can have multiple answers so make it an array\r\n        if (['checkboxList', 'multiselect'].includes(node.inputType)) {\r\n            return observableArray(options.value || []);\r\n        } else {\r\n            // if there is no initial value, set it to empty string,\r\n            // so that isModified does not get triggered for empty dropdowns\r\n            return observable(has(options.value) ? options.value : '');\r\n        }\r\n    }\r\n\r\n\r\n    function getPattern() {\r\n        // implicitly determine pattern (inputmask) if there is a Regex validation\r\n        if (validations && validations.pattern) {\r\n\r\n            if(!validations.pattern.params) {\r\n                console.error('Pattern validation must have params and message', node);\r\n                return;\r\n            }\r\n\r\n            return {\r\n                alias: 'Regex',\r\n                regex: validations.pattern.params\r\n            };\r\n        }\r\n    }\r\n\r\n    function deriveReadonly(readonlyParam) {\r\n        if (is(readonlyParam, 'string')) {\r\n            let override = observable();\r\n            return computed({\r\n                read: function () {\r\n                    return has(override()) ?\r\n                        override()\r\n                        : evaluate(readonlyParam, context.getValue);\r\n                },\r\n                write: function (value) {\r\n                    override(value);\r\n                }\r\n            });\r\n        }\r\n        return observable(!!readonlyParam);\r\n    }\r\n    /*\r\n     * Utils (can be Refactored to common)\r\n     */\r\n\r\n    function dateFormatter(date) {\r\n        return moment(date).format('MM/DD/YYYY');\r\n    }\r\n\r\n    function mapItem(mapper) {\r\n        var textFormatter = formatters[mapper.textFormatter] || _.identity,\r\n            delimiter = mapper.delimeter || ' / ';\r\n\r\n        function format(val, key) {\r\n           if(Array.isArray(key)) {\r\n               return key.map((k) => { return val[k]; }).join(delimiter)\r\n           } else {\r\n               return val[key]\r\n           }\r\n        }\r\n\r\n        return function (val) {\r\n            return {\r\n                text: textFormatter(format(val, mapper.textKey)),\r\n                value: format(val, mapper.valueKey),\r\n                original: val\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Init\r\n     */\r\n\r\n    // Mixin the viewModel specific to the inputType\r\n    if (inputTypes[node.inputType]) {\r\n        extend(viewmodel, inputTypes[node.inputType].call(context, node, viewmodel));\r\n    }\r\n    // Checkbox underlying value is Array because of knockout, maybe refactor to a custom binding?\r\n    // TODO: ^ not sure if this is correct anymore. Checkbox may accept true/false - need to investigate\r\n    if (node.inputType === 'checkbox') {\r\n        values.subscribe((newValues) => {\r\n            if (newValues.indexOf(options.checked) !== -1) {\r\n                inputValue(options.checked);\r\n            } else {\r\n                inputValue(options.unchecked);\r\n            }\r\n        });\r\n        if (inputValue() === options.checked) {\r\n            values.push(options.checked);\r\n        }\r\n    }\r\n\r\n    // TODO: Specific to data, move into custom viewModel?\r\n    // make min/max date into observables\r\n    if (options.minDate) {\r\n        viewmodel.minDate = ko.observable(options.minDate);\r\n    }\r\n    if (options.maxDate) {\r\n        viewmodel.maxDate = ko.observable(options.maxDate);\r\n    }\r\n\r\n    if (options.registered) {\r\n        registeredAction = createViewModel.call(this, {\r\n            type: 'action',\r\n            actionType: 'ajax',\r\n            options: merge(options.registered.update || options.registered, { data: {} })\r\n        });\r\n\r\n        initialRegisteredAction = createViewModel.call(this, {\r\n            type: 'action',\r\n            actionType: 'ajax',\r\n            options: merge(options.registered.initial || options.registered, { data: {} })\r\n        });\r\n\r\n        function fetchData() {\r\n            let newValue = inputValue(),\r\n                action = initial ? initialRegisteredAction : registeredAction;\r\n\r\n            action.options.data[node.id] = newValue; //our own sub gets called before context is updated\r\n\r\n            if (newValue !== '') {\r\n                action.action({\r\n                    callback: (error, data) => {\r\n                        Object.keys(data).forEach((key) => {\r\n                            if (key === 'store') {\r\n                                Object.keys(data[key]).forEach(function (storeKey) {\r\n                                    let valueToStore = data[key][storeKey];\r\n                                    noticeboard.setValue(storeKey, valueToStore);\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            if (!context.dictionary && !context.data) {\r\n                                console.warn('Using a registered input when no data/dictionary available in context', node);\r\n                                return;\r\n                            }\r\n                            var node = context.dictionary && context.dictionary()[key];\r\n                            if (node && node.update) {\r\n                                node.update(data[key]);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        inputValue.subscribe(function (newValue) {\r\n            fetchData()\r\n        });\r\n\r\n        // listen for 'refresh' event\r\n        subs.push(receive(node.id + '.refreshRegistered', function(options) {\r\n            //console.log('--> refreshing registered', node);\r\n            fetchData(options);\r\n        }));\r\n\r\n        fetchData();    //make initial call if default value is set--fetchData checks if inputValue() is ''\r\n    }\r\n\r\n    // TODO: Clean up validation Code\r\n    // add validations to the inputvalue\r\n    validations = merge(_.cloneDeep(options.validations), { customError: customError });\r\n    if (validations.expression) {\r\n        if(options.validations.expression.message && !options.validations.expression.term) {\r\n            console.error(\"[input] if providing a message for expression validation, must also provide term\");\r\n            options.validations.expression.term = \"true\"; // don't cause exceptions.\r\n        }\r\n        validations.expression.params = [\r\n            options.validations.expression.message ?\r\n                options.validations.expression.term\r\n                : options.validations.expression,\r\n            context.getValue\r\n        ]\r\n    }\r\n\r\n    if (options.unique && node.inputType !== 'autocomplete') {\r\n        inputValue.subscribe(function (oldValue) {\r\n            context.unique[node.id].remove(oldValue);\r\n        }, null, 'beforeChange');\r\n\r\n        inputValue.subscribe(function (newValue) {\r\n            if(context.deleteFlag && context.deleteFlag()) { return; }\r\n            context.unique[node.id].push(newValue);\r\n        });\r\n\r\n        if(context.deleteFlag) {\r\n            context.deleteFlag.subscribe(function(deleted) {\r\n                if (deleted) {\r\n                    context.unique[node.id].remove(inputValue());\r\n                }\r\n            });\r\n        }\r\n\r\n        context.unique[node.id].subscribe(function (values) {\r\n            var occurances = values.filter(function (value) {\r\n                return value === inputValue();\r\n            }).length;\r\n\r\n            customError(occurances > 1 ? 'Identifier must be unique' : undefined);\r\n        })\r\n    }\r\n\r\n    if (viewmodel.validations) {\r\n        validations = merge(validations, viewmodel.validations);\r\n    }\r\n    inputValue = inputValue.extend(validations);\r\n\r\n    // Allows us to set values on an input from expression\r\n    if (options.valueExpression) {\r\n        computedValueExpression = computed(() => {\r\n            if (options.allowSet === false) {\r\n                inputValue(); // re-eval when inputValue is set\r\n            }\r\n            return evaluate(options.valueExpression, context.getValue);\r\n        });\r\n        setValue(computedValueExpression());\r\n        computedValueExpression.subscribe(function(value){\r\n            setValue(value)\r\n        });\r\n\r\n        subs.push(computedValueExpression)\r\n    }\r\n\r\n    // TODO: make into insert zeros option?\r\n    if (get(options, 'pattern.alias') === 'percent') {\r\n        inputValue.subscribe((value) => {\r\n            if (value && isFinite(Number(value))) {\r\n                inputValue(Number(value).toFixed(3));\r\n            }\r\n        });\r\n    }\r\n\r\n    shake.subscribe((shook) => {\r\n        shook && setTimeout(() => {\r\n            shake(false);\r\n        }, 1000);\r\n    });\r\n\r\n    return merge(node, viewmodel, {\r\n        inputValue,\r\n        visibleMessage,\r\n        customError,\r\n        hasFocus,\r\n        hover,\r\n        datePlaceholder,\r\n        assignDate,\r\n        isShown,\r\n        required,\r\n        readonly,\r\n        disabled,\r\n        maxlength,\r\n        pattern,\r\n        tooltipShown,\r\n        shake,\r\n        options,\r\n        setValue,\r\n        update,\r\n        context: this,\r\n        error: inputValue.error,\r\n\r\n        // Mixin-Overrides\r\n        getValue: viewmodel.getValue || getValue,\r\n        values: viewmodel.values || values,\r\n        setReadonly: viewmodel.setReadonly || setReadonly,\r\n        validate: viewmodel.validate || validate,\r\n\r\n        dispose: function () {\r\n            if (viewmodel.dispose) {\r\n                viewmodel.dispose();\r\n            }\r\n            (subs || []).forEach(function (sub) {\r\n                sub.dispose && sub.dispose();\r\n            });\r\n\r\n            if (options.unique) {\r\n                context.unique[node.id].remove(inputValue());\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n\r\n\r\n    // implements an input of type\r\n    // text, select, date, radio, checkbox, checkboxList\r\n\r\n    //TODO: Refactor Session\r\n    //- createJSDocs\r\n    //- revisit and de-tangle bindings\r\n    //- refactor validations so that the tooltip works without inputText wrapper in the inputType template\r\n    //- move tooltip/helpText in options\r\n\r\n    /**\r\n     *  input is the component to use when accepting user-input.\r\n     *  This is the best way to create an interactive UI and\r\n     *  autogenerate your underlying data model by using an adapter in the parent chain.\r\n     *\r\n     * @module input\r\n     *\r\n     * @param {object} node\r\n     *  The configuration specs for the component.\r\n     * @param {string} [node.id]\r\n     *  By specifying an \"id\" on your input, you are automatically adding your input's data to the data context model.\r\n     * @param {object} node.options\r\n     *  The options pertaining to your specific inputType\r\n     * @param {boolean|string} [node.rendered=true]\r\n     *  Boolean or expression to render the input (or not)\r\n     * @param {array} [node.options.values]\r\n     *  The values that can be chosen from for inputTypes that have selections (e.g. radio, checkboxList)\r\n     * @param {object} [node.options.validations]\r\n     *  KO validations object to validate the inputValue\r\n     * @param {boolean} [node.options.validations.required]\r\n     *  Required validation for ko - also will show * next to label indicating it is required\r\n     * @param {boolean|string} [node.options.readonly=false]\r\n     *  Boolean or expression to set the input as readonly\r\n     * @param {boolean} [node.options.disabled]np\r\n     *  Disables the input (different from readonly)\r\n     * @param {object|string|boolean} [node.options.pattern]\r\n     *  Sets an inputmask for the input. If a string, this is the mask. If an object, gets passed as is.\r\n     *  If boolean = true, uses pattern validation.\r\n     * @param {boolean} [node.options.vertical=false]\r\n     *  For multi-option types (e.g. checkboxList, radio), sets the display to block if true for the options\r\n     */\r\n"]}