{"version":3,"sources":["../../src/input/inputViewModel.js"],"names":["inputViewModel","inputTypes","autocomplete","select","multiselect","node","inputVM","options","addBlank","call","n","merge","input_defaults","context","values","Array","isArray","isShown","hidden","hasFocus","hover","required","validations","customError","disabled","readonly","deriveReadonly","maxlength","maxLength","pattern","getPattern","tooltipShown","shake","datePlaceholder","inputType","pureComputed","placeholder","setValueFuncs","checkboxList","setCheckboxListValue","checkbox","setCheckboxValue","subs","formatters","dateFormatter","format","textFormatter","identity","viewmodel","computedValueExpression","registeredAction","initialRegisteredAction","inputValue","createInputValue","initial","mapItem","getValue","hasOwnProperty","emptyValue","number","Number","setValue","data","opts","value","wasModified","isModified","update","error","validate","isValid","rendered","severity","visibleMessage","inputMessage","message","length","errorLabel","label","onClick","assignDate","params","console","newDate","add","rawFormat","setReadonly","bool","warn","undefined","indexOf","alias","regex","readonlyParam","override","read","write","date","mapper","delimiter","delimeter","formatText","val","key","map","k","join","text","textKey","valueKey","original","fetchData","newValue","action","id","callback","Object","keys","forEach","storeKey","valueToStore","dictionary","updateNode","minDate","observable","maxDate","registered","type","actionType","subscribe","push","eventOptions","cloneDeep","expression","term","unique","oldValue","remove","deleteFlag","deleted","newValues","occurances","filter","extend","valueExpression","allowSet","isFinite","toFixed","shook","setTimeout","dispose","sub"],"mappings":"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","file":"inputViewModel.js","sourcesContent":["import { observable, observableArray, computed } from 'knockout';\nimport { createViewModel, globalMetadata } from 'scalejs.metadataFactory';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport { receive } from 'scalejs.messagebus';\nimport { has, get, is, merge } from 'scalejs';\nimport { extend } from 'lodash';\nimport moment from 'moment';\nimport ko from 'knockout';\nimport _ from 'lodash';\nimport noticeboard from 'scalejs.noticeboard';\n\nimport autocompleteViewModel from './autocomplete/autocompleteViewModel';\nimport selectViewModel from './select/selectViewModel';\n\nconst inputTypes = {\n    autocomplete: autocompleteViewModel,\n    select: selectViewModel,\n    multiselect: function (node, inputVM) {\n        node.options = merge(node.options || {}, {\n            addBlank: false\n        }); // do not add blanks in multiselect\n\n        return selectViewModel.call(this, node, inputVM);\n    }\n};\n\nexport default function inputViewModel(n) {\n    const // metadata node + context\n        node = _.merge({}, globalMetadata().input_defaults || {}, n),\n        options = node.options || {},\n        context = this || {},\n\n        // values which can be chosen from\n        values = observableArray(Array.isArray(options.values) ? options.values : []),\n\n        // Depricated? //TODO: Yes isShown is depricated in favor of rendered\n        isShown = observable(!node.hidden),\n\n        // 2-way binding with state of focus\n        hasFocus = observable(),\n\n        // 1-way binding with state of hover\n        hover = observable(),\n\n        // validations\n        required = options.validations ? options.validations.required : false,\n        customError = observable(),\n\n        // attributes\n        disabled = observable(!!options.disabled),\n        readonly = deriveReadonly(options.readonly),\n        maxlength = options.validations && options.validations.maxLength,\n\n        // patterns\n        pattern = options.pattern === true ? getPattern() : options.pattern,\n        tooltipShown = observable(false), // for patterns\n        shake = observable(false),\n\n        // specific datepicker\n        datePlaceholder = node.inputType === 'datepicker' && ko.pureComputed(() => {\n            const placeholder = !hover() || hasFocus() ? '' : 'mm/dd/yyyy';\n            return placeholder;\n        }),\n\n        // custom setValue functions for input types\n        setValueFuncs = {\n            checkboxList: setCheckboxListValue,\n            multiselect: setCheckboxListValue,\n            checkbox: setCheckboxValue\n        },\n\n        // subs disposable array\n        subs = [],\n\n        // move out to utility?\n        formatters = {\n            dateFormatter\n        },\n        format = options.values && options.values.textFormatter ?\n            formatters[options.values.textFormatter] :\n            _.identity;\n\n    let viewmodel = { },\n        validations = options.validations || null,\n        computedValueExpression,\n        // registered action vars\n        registeredAction,\n        initialRegisteredAction,\n        // inputValue: accepts user input via KO Binding\n        inputValue = createInputValue(),\n        initial;\n\n    viewmodel = {\n        mapItem,\n        inputValue,\n        hasFocus,\n        format,\n        subs,\n        readonly,\n        values\n    };\n\n    /*\n     * PJSON API (refine)\n     */\n    function getValue() {\n        if (node.inputType === 'checkbox') {\n            return inputValue() ?\n                get(options, 'checkedValue', true) :\n                get(options, 'uncheckedValue', false);\n        }\n        if (inputValue() === '') {\n            return {}.hasOwnProperty.call(options, 'emptyValue') ? options.emptyValue : '';\n        }\n        if (options.number) {\n            return Number(inputValue());\n        }\n        return inputValue();\n    }\n\n    function setValue(data, opts = {}) {\n        const value = is(data, 'object') ? data.value : data,  // TODO: Refactor - should only accept \"value\", not \"data\".\n            wasModified = inputValue.isModified();\n\n        initial = opts.initial;\n\n        if (data === getValue()) {\n            return;\n        }\n         // uses setValueFunc if defined, else updates inputValue\n        if (setValueFuncs[node.inputType]) {\n            setValueFuncs[node.inputType](data);\n        } else if (viewmodel.setValue) {\n            viewmodel.setValue(data);\n        } else {\n            inputValue(value);\n        }\n\n        // programtically setting the inputValue will not cause isModified to become true\n        if (!wasModified) { inputValue.isModified(false); }\n\n        initial = false;\n    }\n\n    function update(data) {\n        if ({}.hasOwnProperty.call(data, 'value')) {\n            setValue(data.value);\n        }\n        if ({}.hasOwnProperty.call(data, 'error')) {\n            customError(data.error);\n        }\n        if ({}.hasOwnProperty.call(data, 'values')) {\n            values(data.values);\n        }\n    }\n\n    function validate() {\n        // can rely on \"this\" when properties are garuenteed\n        // from MD factory and used with compliance\n        inputValue.isModified(true);\n        return !inputValue.isValid() && isShown() && this.rendered() && inputValue.severity() === 1;\n    }\n\n    // TODO: How to allow for custom visible message specific to project?\n    function visibleMessage() {\n        // returns the message to be displayed (based on validations)\n        const severity = inputValue.severity();\n        let inputMessage,\n            message;\n\n        if (!inputValue.isModified() || inputValue.isValid() || !this.rendered() || !isShown()) {\n            // the user has yet to modify the input\n            // or there is no message. return nothing\n            return;\n        }\n\n        inputMessage = inputValue.error();\n        inputMessage = inputMessage[inputMessage.length - 1] === '.' ? inputMessage : `${inputMessage}.`;\n\n        if (inputMessage === 'Required.') {\n            message = `${node.errorLabel || node.label} is required.`;\n        } else {\n            message = `${node.errorLabel || node.label} is invalid. ${inputMessage}`;\n        }\n\n        return {\n            message,\n            severity,\n            onClick() {\n                hasFocus(true);\n            }\n        };\n    }\n\n    /*\n     * Rule Engine (todo - Refactor out)\n     */\n\n    function assignDate(value, params) {\n        if (!is(params, 'object')) {\n            console.error('Assign date only supports object params', params);\n            return;\n        }\n        const newDate = moment(value).add(params).format(options.rawFormat || 'YYYY-MM-DD');\n        setValue(newDate);\n    }\n\n    function setReadonly(bool) {\n        readonly(bool);\n    }\n\n    function setCheckboxListValue(data) {\n        if (data && data.value) {\n            console.warn('Using depricated setValue { value: <> } interface. Please update code.');\n        }\n        if (Array.isArray(data)) {\n            inputValue(data);\n        } else if (data !== null && data !== undefined) {\n            console.warn('Setting a checkbox list with a non-array value. Converting to array...');\n            inputValue([data]);\n        } else {\n            inputValue([]);\n        }\n    }\n\n    function setCheckboxValue(data) {\n        inputValue(data === get(options, 'checkedValue', true));\n    }\n\n    /*\n     * Internal\n     */\n    function createInputValue() {\n        // checkboxList can have multiple answers so make it an array\n        if (['checkboxList', 'multiselect'].indexOf(node.inputType) !== -1) {\n            return observableArray(options.value || []);\n        }\n        // if there is no initial value, set it to empty string,\n        // so that isModified does not get triggered for empty dropdowns\n        let value = options.value;\n        if (node.inputType === 'checkbox') {\n            value = (options.value === get(options, 'checkedValue', true));\n        }\n        return observable(has(options.value) ? value : '');\n    }\n\n\n    function getPattern() {\n        // implicitly determine pattern (inputmask) if there is a Regex validation\n        if (options.validations && options.validations.pattern) {\n            if (!options.validations.pattern.params) {\n                console.error('Pattern validation must have params and message', node);\n                return;\n            }\n\n            return {\n                alias: 'Regex',\n                regex: options.validations.pattern.params\n            };\n        }\n    }\n\n    function deriveReadonly(readonlyParam) {\n        if (is(readonlyParam, 'string')) {\n            const override = observable();\n            return computed({\n                read: function () {\n                    return has(override()) ?\n                        override()\n                        : evaluate(readonlyParam, context.getValue);\n                },\n                write: function (value) {\n                    override(value);\n                }\n            });\n        }\n        return observable(!!readonlyParam);\n    }\n    /*\n     * Utils (can be Refactored to common)\n     */\n\n    function dateFormatter(date) {\n        return moment(date).format('MM/DD/YYYY');\n    }\n\n    function mapItem(mapper) {\n        const textFormatter = formatters[mapper.textFormatter] || _.identity,\n            delimiter = mapper.delimeter || ' / ';\n\n        function formatText(val, key) {\n            if (Array.isArray(key)) {\n                return key.map(k => val[k]).join(delimiter);\n            }\n            return val[key];\n        }\n\n        return function (val) {\n            return {\n                text: textFormatter(formatText(val, mapper.textKey)),\n                value: formatText(val, mapper.valueKey),\n                original: val\n            };\n        };\n    }\n\n\n    function fetchData() {\n        const newValue = inputValue(),\n            action = initial ? initialRegisteredAction : registeredAction;\n        // our own sub gets called before context is updated\n        action.options.data[node.id] = newValue;\n\n        if (newValue !== '') {\n            action.action({\n                callback: (error, data) => {\n                    if (error) {\n                        return;\n                    }\n                    Object.keys(data).forEach((key) => {\n                        if (key === 'store') {\n                            Object.keys(data[key]).forEach((storeKey) => {\n                                const valueToStore = data[key][storeKey];\n                                noticeboard.setValue(storeKey, valueToStore);\n                            });\n                            return;\n                        }\n\n                        if (!context.dictionary && !context.data) {\n                            console.warn('Using a registered input when no data/dictionary available in context', node);\n                            return;\n                        }\n                        const updateNode = context.dictionary && context.dictionary()[key];\n                        if (updateNode && updateNode.update) {\n                            updateNode.update(data[key]);\n                        }\n                    });\n                }\n            });\n        }\n    }\n    /*\n     * Init\n     */\n\n    // Mixin the viewModel specific to the inputType\n    if (inputTypes[node.inputType]) {\n        extend(viewmodel, inputTypes[node.inputType].call(context, node, viewmodel));\n    }\n\n    // TODO: Specific to data, move into custom viewModel?\n    // make min/max date into observables\n    if (options.minDate) {\n        viewmodel.minDate = ko.observable(options.minDate);\n    }\n    if (options.maxDate) {\n        viewmodel.maxDate = ko.observable(options.maxDate);\n    }\n\n    if (options.registered) {\n        registeredAction = createViewModel.call(this, {\n            type: 'action',\n            actionType: 'ajax',\n            options: merge(options.registered.update || options.registered, { data: {} })\n        });\n\n        initialRegisteredAction = createViewModel.call(this, {\n            type: 'action',\n            actionType: 'ajax',\n            options: merge(options.registered.initial || options.registered, { data: {} })\n        });\n\n        inputValue.subscribe(() => {\n            fetchData();\n        });\n\n        // listen for 'refresh' event\n        subs.push(receive(`${node.id}.refreshRegistered`, (eventOptions) => {\n            // console.log('--> refreshing registered', node);\n            fetchData(eventOptions);\n        }));\n\n        // make initial call if default value is set--fetchData checks if inputValue() is ''\n        fetchData();\n    }\n\n    // TODO: Clean up validation Code\n    // add validations to the inputvalue\n    validations = merge(_.cloneDeep(options.validations), { customError });\n    if (validations.expression) {\n        if (options.validations.expression.message && !options.validations.expression.term) {\n            console.error('[input] if providing a message for expression validation, must also provide term');\n            options.validations.expression.term = 'true'; // don't cause exceptions.\n        }\n        validations.expression.params = [\n            options.validations.expression.message ?\n                options.validations.expression.term\n                : options.validations.expression,\n            context.getValue\n        ];\n    }\n\n    // Updates input component\n    subs.push(receive(`${node.id}.update`, update));\n\n    if (options.unique && node.inputType !== 'autocomplete') {\n        inputValue.subscribe((oldValue) => {\n            context.unique[node.id].remove(oldValue);\n        }, null, 'beforeChange');\n\n        inputValue.subscribe((newValue) => {\n            if (context.deleteFlag && context.deleteFlag()) { return; }\n            context.unique[node.id].push(newValue);\n        });\n\n        if (context.deleteFlag) {\n            context.deleteFlag.subscribe((deleted) => {\n                if (deleted) {\n                    context.unique[node.id].remove(inputValue());\n                }\n            });\n        }\n\n        context.unique[node.id].subscribe((newValues) => {\n            const occurances = newValues.filter(value =>\n                 value === inputValue()\n            ).length;\n\n            customError(occurances > 1 ? 'Identifier must be unique' : undefined);\n        });\n    }\n\n    if (viewmodel.validations) {\n        validations = merge(validations, viewmodel.validations);\n    }\n    inputValue = inputValue.extend(validations);\n\n    // Allows us to set values on an input from expression\n    if (options.valueExpression) {\n        computedValueExpression = computed(() => {\n            if (options.allowSet === false) {\n                inputValue(); // re-eval when inputValue is set\n            }\n            return evaluate(options.valueExpression, context.getValue);\n        });\n        setValue(computedValueExpression());\n        computedValueExpression.subscribe((value) => {\n            setValue(value);\n        });\n\n        subs.push(computedValueExpression);\n    }\n\n    // TODO: make into insert zeros option?\n    if (get(options, 'pattern.alias') === 'percent') {\n        inputValue.subscribe((value) => {\n            if (value && isFinite(Number(value))) {\n                inputValue(Number(value).toFixed(3));\n            }\n        });\n    }\n\n    shake.subscribe((shook) => {\n        shook && setTimeout(() => {\n            shake(false);\n        }, 1000);\n    });\n\n    return merge(node, viewmodel, {\n        inputValue,\n        visibleMessage,\n        customError,\n        hasFocus,\n        hover,\n        datePlaceholder,\n        assignDate,\n        isShown,\n        required,\n        readonly,\n        disabled,\n        maxlength,\n        pattern,\n        tooltipShown,\n        shake,\n        options,\n        setValue,\n        update,\n        context: this,\n        error: inputValue.error,\n\n        // Mixin-Overrides\n        getValue: viewmodel.getValue || getValue,\n        values: viewmodel.values || values,\n        setReadonly: viewmodel.setReadonly || setReadonly,\n        validate: viewmodel.validate || validate,\n\n        dispose() {\n            if (viewmodel.dispose) {\n                viewmodel.dispose();\n            }\n            (subs || []).forEach((sub) => {\n                sub.dispose && sub.dispose();\n            });\n\n            if (options.unique) {\n                context.unique[node.id].remove(inputValue());\n            }\n        }\n    });\n}\n\n\n    // implements an input of type\n    // text, select, date, radio, checkbox, checkboxList\n\n    // TODO: Refactor Session\n    // - createJSDocs\n    // - revisit and de-tangle bindings\n    // - refactor validations so that the tooltip works without\n    // inputText wrapper in the inputType template\n    // - move tooltip/helpText in options\n\n    /**\n     *  input is the component to use when accepting user-input.\n     *  This is the best way to create an interactive UI and\n     *  autogenerate your underlying data model by using an adapter in the parent chain.\n     *\n     * @module input\n     *\n     * @param {object} node\n     *  The configuration specs for the component.\n     * @param {string} [node.id]\n     *  By specifying an \"id\" on your input, you are automatically\n     * adding your input's data to the data context model.\n     * @param {object} node.options\n     *  The options pertaining to your specific inputType\n     * @param {boolean|string} [node.rendered=true]\n     *  Boolean or expression to render the input (or not)\n     * @param {array} [node.options.values]\n     *  The values that can be chosen from for inputTypes that have selections\n     * (e.g. radio, checkboxList)\n     * @param {object} [node.options.validations]\n     *  KO validations object to validate the inputValue\n     * @param {boolean} [node.options.validations.required]\n     *  Required validation for ko - also will show * next to label indicating it is required\n     * @param {boolean|string} [node.options.readonly=false]\n     *  Boolean or expression to set the input as readonly\n     * @param {boolean} [node.options.disabled]np\n     *  Disables the input (different from readonly)\n     * @param {object|string|boolean} [node.options.pattern]\n     *  Sets an inputmask for the input. If a string, this is the mask.\n     * If an object, gets passed as is.\n     *  If boolean = true, uses pattern validation.\n     * @param {boolean} [node.options.vertical=false]\n     *  For multi-option types (e.g. checkboxList, radio),\n     * sets the display to block if true for the options\n     */\n"]}