{"version":3,"sources":["../../src/input/inputViewModel.js"],"names":["inputViewModel","inputTypes","autocomplete","select","multiselect","node","inputVM","options","addBlank","call","keyMap","context","inputValue","createInputValue","values","Array","isArray","isShown","hidden","hasFocus","hover","validations","required","customError","disabled","readonly","deriveReadonly","maxlength","maxLength","pattern","getPattern","tooltipShown","shake","datePlaceholder","inputType","pureComputed","placeholder","setValueFuncs","checkboxList","setCheckboxListValue","subs","computedValueExpression","registeredAction","initialRegisteredAction","initial","formatters","dateFormatter","format","textFormatter","identity","viewmodel","mapItem","getValue","setValue","data","opts","value","wasModified","isModified","update","hasOwnProperty","error","validate","console","isValid","rendered","severity","visibleMessage","inputMessage","message","length","errorLabel","label","onClick","assignDate","params","newDate","add","rawFormat","setReadonly","bool","warn","undefined","includes","alias","regex","readonlyParam","override","read","write","date","mapper","delimiter","delimeter","val","key","map","k","join","text","textKey","valueKey","original","subscribe","newValues","indexOf","checked","unchecked","push","minDate","observable","maxDate","registered","fetchData","newValue","action","id","callback","Object","keys","forEach","storeKey","valueToStore","dictionary","type","actionType","cloneDeep","expression","term","unique","oldValue","remove","deleteFlag","deleted","occurances","filter","extend","valueExpression","allowSet","isFinite","Number","toFixed","shook","setTimeout","dispose","sub"],"mappings":"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","file":"inputViewModel.js","sourcesContent":["import { observable, observableArray, computed } from 'knockout';\nimport { createViewModel } from 'scalejs.metadataFactory';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport { receive } from 'scalejs.messagebus';\nimport { has, get, is, merge } from 'scalejs';\nimport dataservice from 'dataservice';\nimport { extend } from 'lodash';\nimport moment from 'moment';\nimport ko from 'knockout';\nimport _ from 'lodash';\nimport noticeboard from 'scalejs.noticeboard';\n\nimport autocompleteViewModel from './autocomplete/autocompleteViewModel';\nimport selectViewModel from './select/selectViewModel';\n\nlet inputTypes = {\n    autocomplete: autocompleteViewModel,\n    select: selectViewModel,\n    multiselect: function (node, inputVM) {\n        node.options = merge(node.options || {}, {\n            addBlank: false\n        }); // do not add blanks in multiselect\n\n        return selectViewModel.call(this, node, inputVM);\n    }\n}\n\nexport default function inputViewModel(node) {\n    var // metadata node + context\n        options = node.options || {},\n        keyMap = node.keyMap || {},\n        context = this || {},\n\n        // inputValue: accepts user input via KO Binding\n        inputValue = createInputValue(),\n\n        // values which can be chosen from\n        values = observableArray(Array.isArray(options.values) ? options.values : []),\n\n        // Depricated? //TODO: Yes isShown is depricated in favor of rendered\n        isShown = observable(!node.hidden),\n\n        // 2-way binding with state of focus\n        hasFocus = observable(),\n\n        // 1-way binding with state of hover\n        hover = observable(),\n\n        // validations\n        validations = options.validations || null,\n        required = validations ? validations.required : false,\n        customError = observable(),\n\n        // attributes\n        disabled = observable(!!options.disabled),\n        readonly = deriveReadonly(options.readonly),\n        maxlength = validations && validations.maxLength,\n\n        // patterns\n        pattern = options.pattern === true ? getPattern() : options.pattern,\n        tooltipShown = observable(false), //for patterns\n        shake = observable(false),\n\n        //specific datepicker\n        datePlaceholder = node.inputType === 'datepicker' && ko.pureComputed(function () {\n            var placeholder = !hover() || hasFocus() ? '' : 'mm/dd/yyyy';\n            return placeholder;\n        }),\n\n        // custom setValue functions for input types\n        setValueFuncs = {\n            checkboxList: setCheckboxListValue,\n            multiselect: setCheckboxListValue\n        },\n\n        // subs disposable array\n        subs = [],\n\n        computedValueExpression, \n\n        // registered action vars\n        registeredAction, \n        initialRegisteredAction,\n        initial,\n\n        // move out to utility?\n        formatters = {\n            dateFormatter: dateFormatter\n        },\n        format = options.values && options.values.textFormatter ? formatters[options.values.textFormatter] : _.identity,\n\n        // BaseViewModel to be passed to Mixins\n        viewmodel = {\n            mapItem: mapItem,\n            inputValue: inputValue,\n            hasFocus: hasFocus,\n            format: format,\n            subs: subs,\n            readonly: readonly,\n            values: values\n        };\n\n    /*\n     * PJSON API (refine)\n     */\n    function getValue() {\n        return inputValue() || '';\n    }\n\n    function setValue(data, opts = {}) {\n        let value = is(data, 'object') ? data.value : data,  // TODO: Refactor - should only accept \"value\", not \"data\".\n            wasModified = inputValue.isModified();\n        \n        initial = opts.initial;\n\n         // uses setValueFunc if defined, else updates inputValue\n        if (setValueFuncs[node.inputType]) {\n            setValueFuncs[node.inputType](data);\n        } else if (viewmodel.setValue) {\n            viewmodel.setValue(data);\n        } else {\n            inputValue(value);\n        }\n\n        // programtically setting the inputValue will not cause isModified to become true\n        if (!wasModified) { inputValue.isModified(false); }\n\n        initial = false;\n    }\n\n    function update(data) {\n        if (data.hasOwnProperty('value')) {\n            setValue(data.value);\n        }\n        if (data.hasOwnProperty('error')) {\n            customError(data.error);\n        }\n        if (data.hasOwnProperty('values')) {\n            values(data.values);\n        }\n    }\n\n    function validate() {\n        console.error('Relying on \"this\" for rendered in validate. REFACTOR');\n        inputValue.isModified(true);\n        return !inputValue.isValid() && isShown() && this.rendered() && inputValue.severity() === 1;\n    }\n\n    // TODO: How to allow for custom visible message specific to project?\n    function visibleMessage() {\n        // returns the message to be displayed (based on validations)\n        var inputMessage, message,\n            severity = inputValue.severity();\n\n        if (!inputValue.isModified() || inputValue.isValid() || !this.rendered() || !isShown()) {\n            // the user has yet to modify the input\n            // or there is no message. return nothing\n            return;\n        }\n\n        inputMessage = inputValue.error();\n        inputMessage = inputMessage[inputMessage.length - 1] === '.' ? inputMessage : inputMessage + '.';\n\n        if (inputMessage === 'Required.') {\n            message = (node.errorLabel || node.label) + ' is required.';\n        } else {\n            message = (node.errorLabel || node.label) + ' is invalid. ' + inputMessage;\n        }\n\n        return {\n            message,\n            severity,\n            onClick() {\n                hasFocus(true);\n            }\n        };\n    }\n\n    /*\n     * Rule Engine (todo - Refactor out)\n     */\n\n    function assignDate(value, params) {\n        if (!is(params, 'object')) {\n            console.error('Assign date only supports object params', params);\n            return;\n        }\n        var newDate = moment(value).add(params).format(options.rawFormat || 'YYYY-MM-DD');\n        setValue(newDate);\n    }\n\n    function setReadonly(bool) {\n        readonly(bool)\n    }\n\n    function setCheckboxListValue(data) {\n        if (data && data.value) {\n            console.warn('Using depricated setValue { value: <> } interface. Please update code.');\n        }\n        if (Array.isArray(data)) {\n            inputValue(data);\n        } else if (data !== null && data !== undefined) {\n            console.warn('Setting a checkbox list with a non-array value. Converting to array...');\n            inputValue([data]);\n        } else {\n            inputValue([]);\n        }\n    }\n\n    /*\n     * Internal\n     */\n    function createInputValue() {\n        // checkboxList can have multiple answers so make it an array\n        if (['checkboxList', 'multiselect'].includes(node.inputType)) {\n            return observableArray(options.value || []);\n        } else {\n            // if there is no initial value, set it to empty string,\n            // so that isModified does not get triggered for empty dropdowns\n            return observable(has(options.value) ? options.value : '');\n        }\n    }\n\n\n    function getPattern() {\n        // implicitly determine pattern (inputmask) if there is a Regex validation\n        if (validations && validations.pattern) {\n            \n            if(!validations.pattern.params) {\n                console.error('Pattern validation must have params and message', node);\n                return;\n            }\n\n            return {\n                alias: 'Regex',\n                regex: validations.pattern.params\n            };\n        }\n    }\n\n    function deriveReadonly(readonlyParam) {\n        if (is(readonlyParam, 'string')) {\n            let override = observable();\n            return computed({\n                read: function () {\n                    return has(override()) ?\n                        override()\n                        : evaluate(readonlyParam, context.getValue);\n                },\n                write: function (value) {\n                    override(value);\n                }\n            });\n        }\n        return observable(!!readonlyParam);\n    }\n    /*\n     * Utils (can be Refactored to common)\n     */\n\n    function dateFormatter(date) {\n        return moment(date).format('MM/DD/YYYY');\n    }\n\n    function mapItem(mapper) {\n        var textFormatter = formatters[mapper.textFormatter] || _.identity,\n            delimiter = mapper.delimeter || ' / ';\n        \n        function format(val, key) {\n           if(Array.isArray(key)) {\n               return key.map((k) => { return val[k]; }).join(delimiter)\n           } else {\n               return val[key]\n           }\n        }\n        \n        return function (val) {\n            return {\n                text: textFormatter(format(val, mapper.textKey)),\n                value: format(val, mapper.valueKey),\n                original: val\n            }\n        }\n    }\n\n\n    /*\n     * Init\n     */\n\n    // Mixin the viewModel specific to the inputType\n    if (inputTypes[node.inputType]) {\n        extend(viewmodel, inputTypes[node.inputType].call(context, node, viewmodel));\n    }\n    // Checkbox underlying value is Array because of knockout, maybe refactor to a custom binding?\n    // TODO: ^ not sure if this is correct anymore. Checkbox may accept true/false - need to investigate\n    if (node.inputType === 'checkbox') {\n        values.subscribe((newValues) => {\n            if (newValues.indexOf(options.checked) !== -1) {\n                inputValue(options.checked);\n            } else {\n                inputValue(options.unchecked);\n            }\n        });\n        if (inputValue() === options.checked) {\n            values.push(options.checked);\n        }\n    }\n\n    // TODO: Specific to data, move into custom viewModel?\n    // make min/max date into observables\n    if (options.minDate) {\n        viewmodel.minDate = ko.observable(options.minDate);\n    }\n    if (options.maxDate) {\n        viewmodel.maxDate = ko.observable(options.maxDate);\n    }\n\n    if (options.registered) {\n        registeredAction = createViewModel.call(this, {\n            type: 'action',\n            actionType: 'ajax',\n            options: merge(options.registered.update || options.registered, { data: {} })\n        });\n        \n        initialRegisteredAction = createViewModel.call(this, {\n            type: 'action',\n            actionType: 'ajax',\n            options: merge(options.registered.initial || options.registered, { data: {} })\n        });\n\n        function fetchData() {        \n            let newValue = inputValue(),\n                action = initial ? initialRegisteredAction : registeredAction;\n\n            action.options.data[node.id] = newValue; //our own sub gets called before context is updated\n\n            if (newValue !== '') {\n                action.action({\n                    callback: (error, data) => {\n                        Object.keys(data).forEach((key) => {\n                            if (key === 'store') {\n                                Object.keys(data[key]).forEach(function (storeKey) {\n                                    let valueToStore = data[key][storeKey];\n                                    noticeboard.setValue(storeKey, valueToStore);\n                                });\n                                return;\n                            }\n\n                            if (!context.dictionary && !context.data) {\n                                console.warn('Using a registered input when no data/dictionary available in context', node);\n                                return;\n                            }                            \n                            var node = context.dictionary && context.dictionary()[key];\n                            if (node && node.update) {\n                                node.update(data[key]);\n                            }\n                        });\n                    }\n                });\n            }\n        }\n\n        inputValue.subscribe(function (newValue) {\n            fetchData()\n        });\n\n        // listen for 'refresh' event\n        subs.push(receive(node.id + '.refreshRegistered', function(options) {\n            //console.log('--> refreshing registered', node);\n            fetchData(options);\n        }));\n    }\n\n    // TODO: Clean up validation Code\n    // add validations to the inputvalue\n    validations = merge(_.cloneDeep(options.validations), { customError: customError });\n    if (validations.expression) {\n        if(options.validations.expression.message && !options.validations.expression.term) {\n            console.error(\"[input] if providing a message for expression validation, must also provide term\");\n            options.validations.expression.term = \"true\"; // don't cause exceptions.\n        }\n        validations.expression.params = [\n            options.validations.expression.message ?\n                options.validations.expression.term\n                : options.validations.expression,\n            context.getValue\n        ]\n    }\n\n    if (options.unique && node.inputType !== 'autocomplete') {\n        inputValue.subscribe(function (oldValue) {\n            context.unique[node.id].remove(oldValue);\n        }, null, 'beforeChange');\n\n        inputValue.subscribe(function (newValue) {\n            if(context.deleteFlag && context.deleteFlag()) { return; }\n            context.unique[node.id].push(newValue);\n        });\n\n        if(context.deleteFlag) {\n            context.deleteFlag.subscribe(function(deleted) {\n                if (deleted) {\n                    context.unique[node.id].remove(inputValue());\n                }\n            });\n        }\n\n        context.unique[node.id].subscribe(function (values) {\n            var occurances = values.filter(function (value) {\n                return value === inputValue();\n            }).length;\n\n            customError(occurances > 1 ? 'Identifier must be unique' : undefined);\n        })\n    }\n\n    if (viewmodel.validations) {\n        validations = merge(validations, viewmodel.validations);\n    }\n    inputValue = inputValue.extend(validations);\n\n    // Allows us to set values on an input from expression\n    if (options.valueExpression) {\n        computedValueExpression = computed(() => {\n            if (options.allowSet === false) {\n                inputValue(); // re-eval when inputValue is set\n            }\n            return evaluate(options.valueExpression, context.getValue);\n        });\n        setValue(computedValueExpression());\n        computedValueExpression.subscribe(function(value){\n            setValue(value)\n        });\n\n        subs.push(computedValueExpression)\n    }\n\n    // TODO: make into insert zeros option?\n    if (get(options, 'pattern.alias') === 'percent') {\n        inputValue.subscribe((value) => {\n            if (value && isFinite(Number(value))) {\n                inputValue(Number(value).toFixed(3));\n            }\n        });\n    }\n\n    shake.subscribe((shook) => {\n        shook && setTimeout(() => {\n            shake(false);\n        }, 1000);\n    });\n\n    return merge(node, viewmodel, {\n        inputValue,\n        visibleMessage,\n        customError,\n        hasFocus,\n        hover,\n        datePlaceholder,\n        assignDate,\n        isShown,\n        required,\n        readonly,\n        disabled,\n        maxlength,\n        pattern,\n        tooltipShown,\n        shake,\n        options,\n        setValue,\n        update,\n        context: this,\n        error: inputValue.error,\n\n        // Mixin-Overrides\n        getValue: viewmodel.getValue || getValue,\n        values: viewmodel.values || values,\n        setReadonly: viewmodel.setReadonly || setReadonly,\n        validate: viewmodel.validate || validate,\n\n        dispose: function () {\n            if (viewmodel.dispose) {\n                viewmodel.dispose();\n            }\n            (subs || []).forEach(function (sub) {\n                sub.dispose && sub.dispose();\n            });\n\n            if (options.unique) {\n                context.unique[node.id].remove(inputValue());\n            }\n        }\n    });\n};\n\n\n\n    // implements an input of type\n    // text, select, date, radio, checkbox, checkboxList\n\n    //TODO: Refactor Session\n    //- createJSDocs\n    //- revisit and de-tangle bindings\n    //- refactor validations so that the tooltip works without inputText wrapper in the inputType template\n    //- move tooltip/helpText in options\n\n    /**\n     *  input is the component to use when accepting user-input.\n     *  This is the best way to create an interactive UI and\n     *  autogenerate your underlying data model by using an adapter in the parent chain.\n     *\n     * @module input\n     *\n     * @param {object} node\n     *  The configuration specs for the component.\n     * @param {string} [node.id]\n     *  By specifying an \"id\" on your input, you are automatically adding your input's data to the data context model.\n     * @param {object} node.options\n     *  The options pertaining to your specific inputType\n     * @param {boolean|string} [node.rendered=true]\n     *  Boolean or expression to render the input (or not)\n     * @param {array} [node.options.values]\n     *  The values that can be chosen from for inputTypes that have selections (e.g. radio, checkboxList)\n     * @param {object} [node.options.validations]\n     *  KO validations object to validate the inputValue\n     * @param {boolean} [node.options.validations.required]\n     *  Required validation for ko - also will show * next to label indicating it is required\n     * @param {boolean|string} [node.options.readonly=false]\n     *  Boolean or expression to set the input as readonly\n     * @param {boolean} [node.options.disabled]np\n     *  Disables the input (different from readonly)\n     * @param {object|string|boolean} [node.options.pattern]\n     *  Sets an inputmask for the input. If a string, this is the mask. If an object, gets passed as is.\n     *  If boolean = true, uses pattern validation.\n     * @param {boolean} [node.options.vertical=false]\n     *  For multi-option types (e.g. checkboxList, radio), sets the display to block if true for the options\n     */\n"]}