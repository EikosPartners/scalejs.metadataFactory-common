{"version":3,"sources":["../../../src/input/autocomplete/autocompleteViewModel.js"],"names":[],"mappings":"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","file":"autocompleteViewModel.js","sourcesContent":["import { observable, observableArray, computed, unwrap } from 'knockout';\nimport { createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport { merge, has, is } from 'scalejs';\nimport dataservice from 'dataservice';\nimport _ from 'lodash';\n\n\n//TODO: Refactor multi-input functionality out or to its own viewmodel\n\n    export default function autocompleteViewModel(node, inputViewModel) {\n        var context = this,\n            dataSourceEndpoint = node.dataSourceEndpoint,\n            keyMap = node.keyMap || {},\n            createViewModels = createViewModelsUnbound.bind(this),\n            // inputViewModel\n            inputValue = inputViewModel.inputValue,\n            subs = inputViewModel.subs,\n            mapItem = inputViewModel.mapItem,\n            hasFocus = inputViewModel.hasFocus,\n            readonly = inputViewModel.readonly,\n            isShown = inputViewModel.isShown,            \n            autocompleteSource = inputViewModel.values, //todo: just use values\n            // props\n            sourceArray,\n            validations,\n            options = node.options || {},\n            unique = options.unique,\n            computedSource,\n            itemMapper = mapItem(keyMap),\n            objectValue,\n            autocompleteSourceDef;\n        \n        if(node.autocompleteSource) {\n            console.warn('[autocomplete] please move the autocompleteSource into options');\n            autocompleteSourceDef = _.cloneDeep(node.autocompleteSource);\n        } else {\n            autocompleteSourceDef = _.cloneDeep(node.options && node.options.autocompleteSource)\n        }\n\n        function mapAutocompleteSource(source) {\n            return source.map(function(src) {\n                if (typeof src === 'string') {\n                    return {\n                        value: src,\n                        label: src\n                    }\n                } else {\n                    return src;\n                }\n            });\n        }\n\n        function getAutocompleteSource() {\n            dataservice.ajax(dataSourceEndpoint, function(error, data) {\n                if (error) {\n                    console.error('Data retrieval failure', error);\n                    return;\n                }\n                if (keyMap.dataKey) {\n                    sourceArray  =  data[keyMap.dataKey];\n                    // todo: update to use mapItem\n                    var mappedData = data[keyMap.dataKey].map(function(d) {\n                        return keyMap.textKey && keyMap.valueKey ?\n                            {\n                                label: (Array.isArray(keyMap.textKey) ? keyMap.textKey : [keyMap.textKey]).map(function(k) {\n                                    return d[k];\n                                }).join(keyMap.delimiter || ' / '),\n                                value: d[keyMap.valueKey]\n                            }\n                            : d[node.id]; //todo: remove this and add mapping!\n                    })\n                    autocompleteSource(mapAutocompleteSource(_.uniqBy(mappedData, function(item) {\n                            return item ?  has(item, 'value') ? item.value : item : '';\n                    }).filter(Boolean))) // remove empty values\n                } else {\n                    sourceArray = data.SearchResults;\n                    autocompleteSource(mapAutocompleteSource(data.SearchResults));\n                }\n            });\n        }\n\n        function getAutocompleteSourceFromContext() {\n            var source = _.toArray(evaluate(autocompleteSourceDef.fromArray || [], context.getValue));\n\n            // storing source array before any mapping\n            sourceArray = source;\n            if (Array.isArray(source)) {\n                autocompleteSource(\n                    _.uniqBy(\n                        source\n                            .map(itemMapper)\n                            //todo: remove additional mapping - using binding options\n                            .map(function(item) {\n                                return {\n                                    label: item.text,\n                                    value: item.value,\n                                    original: item.original\n                                };\n                            }),\n                        function(item) {\n                            return item.value;\n                        }\n                    )\n                );\n            }\n        }\n\n        // function setReadonly(bool) {\n        //     readonly(bool);\n        // }\n\n        if (dataSourceEndpoint) {\n            subs.push(computed(getAutocompleteSource));\n        }\n\n        if (Array.isArray(autocompleteSourceDef)) {\n            sourceArray = autocompleteSourceDef;\n            autocompleteSource(mapAutocompleteSource(autocompleteSourceDef));\n        }\n\n        if (autocompleteSourceDef && !Array.isArray(autocompleteSourceDef)) {\n            subs.push(computed(getAutocompleteSourceFromContext).extend({ deferred: true }));\n        }\n\n        if (!options.addNew) {\n            validations = _.cloneDeep(options.validations) || {};\n            if (!validations || !validations.autocomplete ) {\n                validations.autocomplete = {\n                    message: 'Please choose a valid selection from the options.',\n                    params: autocompleteSource\n                }\n            } else {\n                validations.autocomplete = {\n                    message: validations.autocomplete.message || 'Please choose a valid selection from the options.',\n                    params: autocompleteSource\n                }\n            }\n        }\n\n        if (unique) {\n\n            inputValue.subscribe(function (oldValue) {\n                context.unique[node.id].remove(oldValue);\n            }, null, 'beforeChange');\n            inputValue.subscribe(function (newValue) {\n                if(context.deleteFlag && context.deleteFlag()) { return; }\n                context.unique[node.id].push(newValue);\n            });\n\n            if(context.deleteFlag) {\n                context.deleteFlag.subscribe(function(deleted) {\n                    if (deleted) {\n                        context.unique[node.id].remove(inputValue());\n                    }\n                });\n            }\n\n            computedSource = computed({\n                read: function () {\n                    var selectedItems = _.difference(context.unique[node.id](), [inputValue()]).map(function (item) {\n                            return {\n                                value: item\n                            };\n                        }),\n                        newSource = _.differenceBy(autocompleteSource(), selectedItems, 'value');\n                    return newSource;\n                },\n                write: function (newValues) {\n                    autocompleteSource(newValues);\n                }\n            }).extend({ deferred: true });\n        }\n\n        return {\n            autocompleteSource: unique ? computedSource : autocompleteSource,\n            validations,\n            mappedChildNodes: observableArray(), // todo: still need?\n            // setReadonly: setReadonly,\n            dispose: () => {\n                if(unique) {\n                    context.unique[node.id].remove(inputValue());\n                }\n            }\n        }\n    };\n"]}