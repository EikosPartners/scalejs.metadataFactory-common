{"version":3,"sources":["../../../src/input/autocomplete/autocompleteViewModel.js"],"names":["autocompleteViewModel","node","inputViewModel","context","dataSourceEndpoint","keyMap","createViewModels","bind","inputValue","subs","mapItem","hasFocus","readonly","isShown","autocompleteSource","values","sourceArray","validations","options","unique","computedSource","itemMapper","objectValue","autocompleteSourceDef","console","warn","cloneDeep","mapAutocompleteSource","source","map","src","value","label","getAutocompleteSource","ajax","error","data","dataKey","mappedData","d","textKey","valueKey","Array","isArray","k","join","delimiter","id","uniqBy","item","filter","Boolean","SearchResults","getAutocompleteSourceFromContext","toArray","fromArray","getValue","text","original","push","extend","deferred","addNew","autocomplete","message","params","subscribe","oldValue","remove","newValue","deleteFlag","deleted","read","selectedItems","difference","newSource","differenceBy","write","newValues","mappedChildNodes","dispose"],"mappings":"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","file":"autocompleteViewModel.js","sourcesContent":["import { observable, observableArray, computed, unwrap } from 'knockout';\r\nimport { createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { merge, has, is } from 'scalejs';\r\nimport dataservice from 'dataservice';\r\nimport _ from 'lodash';\r\n\r\n\r\n//TODO: Refactor multi-input functionality out or to its own viewmodel\r\n\r\n    export default function autocompleteViewModel(node, inputViewModel) {\r\n        var context = this,\r\n            dataSourceEndpoint = node.dataSourceEndpoint,\r\n            keyMap = node.keyMap || {},\r\n            createViewModels = createViewModelsUnbound.bind(this),\r\n            // inputViewModel\r\n            inputValue = inputViewModel.inputValue,\r\n            subs = inputViewModel.subs,\r\n            mapItem = inputViewModel.mapItem,\r\n            hasFocus = inputViewModel.hasFocus,\r\n            readonly = inputViewModel.readonly,\r\n            isShown = inputViewModel.isShown,            \r\n            autocompleteSource = inputViewModel.values, //todo: just use values\r\n            // props\r\n            sourceArray,\r\n            validations,\r\n            options = node.options || {},\r\n            unique = options.unique,\r\n            computedSource,\r\n            itemMapper = mapItem(keyMap),\r\n            objectValue,\r\n            autocompleteSourceDef;\r\n        \r\n        if(node.autocompleteSource) {\r\n            console.warn('[autocomplete] please move the autocompleteSource into options');\r\n            autocompleteSourceDef = _.cloneDeep(node.autocompleteSource);\r\n        } else {\r\n            autocompleteSourceDef = _.cloneDeep(node.options && node.options.autocompleteSource)\r\n        }\r\n\r\n        function mapAutocompleteSource(source) {\r\n            return source.map(function(src) {\r\n                if (typeof src === 'string') {\r\n                    return {\r\n                        value: src,\r\n                        label: src\r\n                    }\r\n                } else {\r\n                    return src;\r\n                }\r\n            });\r\n        }\r\n\r\n        function getAutocompleteSource() {\r\n            dataservice.ajax(dataSourceEndpoint, function(error, data) {\r\n                if (error) {\r\n                    console.error('Data retrieval failure', error);\r\n                    return;\r\n                }\r\n                if (keyMap.dataKey) {\r\n                    sourceArray  =  data[keyMap.dataKey];\r\n                    // todo: update to use mapItem\r\n                    var mappedData = data[keyMap.dataKey].map(function(d) {\r\n                        return keyMap.textKey && keyMap.valueKey ?\r\n                            {\r\n                                label: (Array.isArray(keyMap.textKey) ? keyMap.textKey : [keyMap.textKey]).map(function(k) {\r\n                                    return d[k];\r\n                                }).join(keyMap.delimiter || ' / '),\r\n                                value: d[keyMap.valueKey]\r\n                            }\r\n                            : d[node.id]; //todo: remove this and add mapping!\r\n                    })\r\n                    autocompleteSource(mapAutocompleteSource(_.uniqBy(mappedData, function(item) {\r\n                            return item ?  has(item, 'value') ? item.value : item : '';\r\n                    }).filter(Boolean))) // remove empty values\r\n                } else {\r\n                    sourceArray = data.SearchResults;\r\n                    autocompleteSource(mapAutocompleteSource(data.SearchResults));\r\n                }\r\n            });\r\n        }\r\n\r\n        function getAutocompleteSourceFromContext() {\r\n            var source = _.toArray(evaluate(autocompleteSourceDef.fromArray || [], context.getValue));\r\n\r\n            // storing source array before any mapping\r\n            sourceArray = source;\r\n            if (Array.isArray(source)) {\r\n                autocompleteSource(\r\n                    _.uniqBy(\r\n                        source\r\n                            .map(itemMapper)\r\n                            //todo: remove additional mapping - using binding options\r\n                            .map(function(item) {\r\n                                return {\r\n                                    label: item.text,\r\n                                    value: item.value,\r\n                                    original: item.original\r\n                                };\r\n                            }),\r\n                        function(item) {\r\n                            return item.value;\r\n                        }\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        // function setReadonly(bool) {\r\n        //     readonly(bool);\r\n        // }\r\n\r\n        if (dataSourceEndpoint) {\r\n            subs.push(computed(getAutocompleteSource));\r\n        }\r\n\r\n        if (Array.isArray(autocompleteSourceDef)) {\r\n            sourceArray = autocompleteSourceDef;\r\n            autocompleteSource(mapAutocompleteSource(autocompleteSourceDef));\r\n        }\r\n\r\n        if (autocompleteSourceDef && !Array.isArray(autocompleteSourceDef)) {\r\n            subs.push(computed(getAutocompleteSourceFromContext).extend({ deferred: true }));\r\n        }\r\n\r\n        if (!options.addNew) {\r\n            validations = _.cloneDeep(options.validations) || {};\r\n            if (!validations || !validations.autocomplete ) {\r\n                validations.autocomplete = {\r\n                    message: 'Please choose a valid selection from the options.',\r\n                    params: autocompleteSource\r\n                }\r\n            } else {\r\n                validations.autocomplete = {\r\n                    message: validations.autocomplete.message || 'Please choose a valid selection from the options.',\r\n                    params: autocompleteSource\r\n                }\r\n            }\r\n        }\r\n\r\n        if (unique) {\r\n\r\n            inputValue.subscribe(function (oldValue) {\r\n                context.unique[node.id].remove(oldValue);\r\n            }, null, 'beforeChange');\r\n            inputValue.subscribe(function (newValue) {\r\n                if(context.deleteFlag && context.deleteFlag()) { return; }\r\n                context.unique[node.id].push(newValue);\r\n            });\r\n\r\n            if(context.deleteFlag) {\r\n                context.deleteFlag.subscribe(function(deleted) {\r\n                    if (deleted) {\r\n                        context.unique[node.id].remove(inputValue());\r\n                    }\r\n                });\r\n            }\r\n\r\n            computedSource = computed({\r\n                read: function () {\r\n                    var selectedItems = _.difference(context.unique[node.id](), [inputValue()]).map(function (item) {\r\n                            return {\r\n                                value: item\r\n                            };\r\n                        }),\r\n                        newSource = _.differenceBy(autocompleteSource(), selectedItems, 'value');\r\n                    return newSource;\r\n                },\r\n                write: function (newValues) {\r\n                    autocompleteSource(newValues);\r\n                }\r\n            }).extend({ deferred: true });\r\n        }\r\n\r\n        return {\r\n            autocompleteSource: unique ? computedSource : autocompleteSource,\r\n            validations,\r\n            mappedChildNodes: observableArray(), // todo: still need?\r\n            // setReadonly: setReadonly,\r\n            dispose: () => {\r\n                if(unique) {\r\n                    context.unique[node.id].remove(inputValue());\r\n                }\r\n            }\r\n        }\r\n    };\r\n"]}