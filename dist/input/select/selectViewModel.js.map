{"version":3,"sources":["../../../src/input/select/selectViewModel.js"],"names":["selectViewModel","node","inputViewModel","context","options","values","inputValue","mapItem","format","subs","addBlank","currentFilter","computedValues","console","warn","arrayHasValue","valuesArr","valueOrObjectToCheck","valueToCheck","some","value","unshiftToValues","hasValue","unshift","text","setValuesFromOptionsArray","concat","slice","map","val","setValuesFromOptionsObject","push","peek","newValues","_","toArray","fromArray","getValue","filter","item","length","extend","deferred","setValue","data","hasOwnProperty","call","filterValues","valuesToKeep","isModified","valueHasMutated","Array","isArray","read","v","indexOf","write"],"mappings":"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","file":"selectViewModel.js","sourcesContent":["import { observable, computed } from 'knockout';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport { has, get, is } from 'scalejs';\nimport _ from 'lodash';\n\n/**\n *  select is a type of input that lets the\n *  user select the value from dropdown options\n *\n * @module input-select\n *\n * @param {object} node\n *  The configuration specs for the component.\n * @param {string} node.options\n *  Options specific to this component\n * @param {bool} [node.options.addBlank=true]\n *  Whether or not to add a blank to the beginning of the select options\n * @param {object|array} node.options.values\n *  Specifies either an array of values to use or an object describing the values\n * @param {string} node.options.values.fromArray\n *  A string to be evaluated that will be used to map the values\n * @param {string|array} node.options.values.textKey\n *  A string or array which refers to the text key (i.e. the label) for the options\n * @param {string} node.options.values.valueKey\n *  A string which referes to the value key for the options\n * @param {string} [node.options.values.delimeter=' / ']\n *  A delimeter for the label if the textKey is an array\n * @param {string} [node.options.values.textFormatter]\n *  The name of a function to format the label for the option (i.e. dateFormatter)\n *\n */\nexport default function selectViewModel(node, inputViewModel) {\n    const context = this,\n        options = node.options || { values: [] },\n        // inputViewModel\n        inputValue = inputViewModel.inputValue,\n        mapItem = inputViewModel.mapItem,\n        format = inputViewModel.format,\n        subs = inputViewModel.subs,\n        values = inputViewModel.values,\n        // props\n        addBlank = !has(options.addBlank) || options.addBlank,\n        currentFilter = observable();\n    let computedValues = {};\n\n    if (!options.values) {\n        console.warn('select input type being used without values');\n        options.values = [];\n    }\n\n    /**\n     * Helper function to check if the array has the value\n     *\n     * @param {array}   valuesArr   Array to check for value\n     * @param           value       The value to check in array\n     */\n    function arrayHasValue(valuesArr, valueOrObjectToCheck) {\n        const valueToCheck = get(valueOrObjectToCheck, 'value', valueOrObjectToCheck);\n        return valuesArr.some(value => get(value, 'value', value) === valueToCheck);\n    }\n\n    /**\n     * Helper function to takes valuesArr and a value.\n     * If the array does not contain the value, it unshifts it\n     *\n     * @param {array}   valuesArr   Array to check for value\n     * @param           value       The value to unshift if not found\n     */\n    function unshiftToValues(valuesArr, value) {\n        const hasValue = arrayHasValue(valuesArr, value);\n\n        if (options.unshiftToValues && !hasValue && has(value) && value !== '') {\n            valuesArr.unshift({\n                text: format(value),\n                value\n            });\n        }\n        return valuesArr;\n    }\n\n    /**\n     * Sets the values if the options.values is an array.\n     * Maps any string values to { text, value }\n     */\n    function setValuesFromOptionsArray() {\n        values((addBlank ? [''] : []).concat(options.values.slice()).map(val => (\n            is(val, 'string') ? { text: val, value: val } : val\n        )));\n    }\n\n    /**\n     * Sets the values if the options.values is an object and options.values.fromArray exists.\n     * fromArray is an expression which is evaluated to retrieve the values from context\n     */\n    function setValuesFromOptionsObject() {\n        // create a sub to subscribe to changes in values\n        subs.push(computed(() => {\n            const value = inputValue.peek();\n            let newValues = (_.toArray(evaluate(options.values.fromArray, context.getValue) || []))\n                    .filter(item => has(item))\n                    .map(mapItem(options.values));\n\n            newValues = (addBlank || newValues.length === 0 ? [{ text: '', value: '' }] : []).concat(newValues);\n\n            values(unshiftToValues(newValues, value));\n        }).extend({ deferred: true }));\n    }\n\n    /**\n     * setValue is Utilized by the form to set the value of the input after initialization\n     * If the value is not already in the values array, it will be unshifted\n     *\n     * @param {object|value}    data    Either an object with a value or the value to be set\n     */\n    function setValue(data) {\n        const value = is(data, 'object') &&\n            {}.hasOwnProperty.call(data, 'value') ? data.value : data;\n        values(unshiftToValues(values(), value));\n        inputValue(value);\n    }\n\n    /**\n     * Function which is utilized by rules engine\n     * Sets the currentFilter observable\n     * This will make the computedValues return only the valuesToKeep\n     *\n     * @param {array}   valuesToKeep    Array of values that will kept in the filter\n     */\n    function filterValues(valuesToKeep) {\n        currentFilter(valuesToKeep);\n        // changing the currentFilter can change the values\n        // this in turn, changing the inputValue. But for some reason,\n        // its not enough to trigger bindings.\n        // manually provoke a change to isModified, so validation bindings get re-evaled.\n        inputValue.isModified.valueHasMutated();\n    }\n\n    /**\n     * Initialize the values observable either with array or with object\n     */\n    if (Array.isArray(options.values)) { setValuesFromOptionsArray(); }\n    if (options.values.fromArray) { setValuesFromOptionsObject(); }\n\n    /**\n     * If currentFilter is defined, return only values which match\n     */\n    computedValues = computed({\n        read: function () {\n            if (!currentFilter()) {\n                return values();\n            }\n            return values().filter((v) => {\n                // || v; //we used to expect { value: ''} or '', now we always do mapping first\n                const value = v.value;\n                return currentFilter().indexOf(value) !== -1;\n            });\n        },\n        write: function (newValues) {\n            values(newValues);\n        }\n    });\n\n    return {\n        values: computedValues,\n        setValue,\n        filterValues\n    };\n}"]}