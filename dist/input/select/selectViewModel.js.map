{"version":3,"sources":["../../../src/input/select/selectViewModel.js"],"names":[],"mappings":";;;;;kBA+B4B,e;;AA/B5B;;AACA;;AACA;;AACA;;;;;;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;;AA0Be,SAAS,eAAT,CAAyB,IAAzB,EAA+B,cAA/B,EAA+C;AAC1D,QAAI,UAAU,IAAd;AAAA,QACI,UAAU,KAAK,OAAL,IAAgB,EAAE,QAAQ,EAAV,EAD9B;;AAEI;AACA,iBAAa,eAAe,UAHhC;AAAA,QAII,UAAU,eAAe,OAJ7B;AAAA,QAKI,SAAS,eAAe,MAL5B;AAAA,QAMI,OAAO,eAAe,IAN1B;AAAA,QAOI,SAAS,eAAe,MAP5B;;AAQI;AACA,eAAW,CAAC,mBAAI,QAAQ,QAAZ,CAAD,IAA0B,QAAQ,QATjD;AAAA,QAUI,gBAAgB,2BAVpB;AAAA,QAWI,cAXJ;;AAaA,QAAG,CAAC,QAAQ,MAAZ,EAAoB;AAChB,gBAAQ,IAAR,CAAa,6CAAb;AACA,gBAAQ,MAAR,GAAiB,EAAjB;AACH;;AAED;;;;;;AAMA,aAAS,aAAT,CAAuB,SAAvB,EAAkC,oBAAlC,EAAwD;AACpD,YAAI,eAAe,mBAAI,oBAAJ,EAA0B,OAA1B,EAAmC,oBAAnC,CAAnB;AACA,eAAO,UAAU,IAAV,CAAe,UAAS,KAAT,EAAgB;AAClC,mBAAO,mBAAI,KAAJ,EAAW,OAAX,EAAoB,KAApB,MAA+B,YAAtC;AACH,SAFM,CAAP;AAGH;;AAED;;;;;;;AAOA,aAAS,eAAT,CAAyB,SAAzB,EAAoC,KAApC,EAA2C;AACvC,YAAI,WAAW,cAAc,SAAd,EAAyB,KAAzB,CAAf;;AAEA,YAAI,CAAC,QAAD,IAAa,mBAAI,KAAJ,CAAb,IAA2B,SAAS,EAAxC,EAA4C;AACxC,sBAAU,OAAV,CAAkB;AACd,sBAAM,OAAO,KAAP,CADQ;AAEd,uBAAO;AAFO,aAAlB;AAIH;AACD,eAAO,SAAP;AACH;;AAED;;;;AAIA,aAAS,yBAAT,GAAqC;AACjC,eAAO,CAAC,WAAW,CAAC,EAAD,CAAX,GAAkB,EAAnB,EAAuB,MAAvB,CAA8B,QAAQ,MAAR,CAAe,KAAf,EAA9B,EAAsD,GAAtD,CAA0D,UAAS,GAAT,EAAc;AAC3E,mBAAO,kBAAG,GAAH,EAAQ,QAAR,IAAoB,EAAE,MAAM,GAAR,EAAa,OAAO,GAApB,EAApB,GAAgD,GAAvD;AACH,SAFM,CAAP;AAGH;;AAED;;;;AAIA,aAAS,0BAAT,GAAsC;AAClC;AACA,aAAK,IAAL,CAAU,wBAAS,YAAY;AAC3B,gBAAI,QAAQ,WAAW,IAAX,EAAZ;AAAA,gBACI,YAAa,iBAAE,OAAF,CAAU,uBAAS,QAAQ,MAAR,CAAe,SAAxB,EAAmC,QAAQ,QAA3C,KAAwD,EAAlE,CAAD,CACP,MADO,CACA,UAAS,IAAT,EAAe;AACnB,uBAAO,mBAAI,IAAJ,CAAP;AACH,aAHO,EAGL,GAHK,CAGD,QAAQ,QAAQ,MAAhB,CAHC,CADhB;;AAMA,wBAAY,CAAC,YAAY,UAAU,MAAV,KAAqB,CAAjC,GAAqC,CAAC,EAAE,MAAM,EAAR,EAAY,OAAO,EAAnB,EAAD,CAArC,GAAgE,EAAjE,EAAqE,MAArE,CAA4E,SAA5E,CAAZ;;AAEA,mBAAO,gBAAgB,SAAhB,EAA2B,KAA3B,CAAP;AACH,SAVS,EAUP,MAVO,CAUA,EAAE,UAAU,IAAZ,EAVA,CAAV;AAWH;;AAED;;;;;;AAMA,aAAS,QAAT,CAAkB,IAAlB,EAAwB;AACpB,YAAI,QAAQ,kBAAG,IAAH,EAAS,QAAT,KAAsB,KAAK,cAAL,CAAoB,OAApB,CAAtB,GAAqD,KAAK,KAA1D,GAAkE,IAA9E;AACA,eAAO,gBAAgB,QAAhB,EAA0B,KAA1B,CAAP;AACA,mBAAW,KAAX;AACH;;AAED;;;;;;;AAOA,aAAS,YAAT,CAAsB,YAAtB,EAAoC;AAClC,sBAAc,YAAd;AACA;AACA;AACA;AACA,mBAAW,UAAX,CAAsB,eAAtB;AACD;;AAED;;;AAGA,QAAI,MAAM,OAAN,CAAc,QAAQ,MAAtB,CAAJ,EAAmC;AAAE;AAA8B;AACnE,QAAI,QAAQ,MAAR,CAAe,SAAnB,EAA8B;AAAE;AAA+B;;AAE/D;;;AAGA,qBAAiB,wBAAS;AACtB,cAAM,gBAAY;AACd,gBAAG,CAAC,eAAJ,EAAqB;AACjB,uBAAO,QAAP;AACH;AACD,mBAAO,SAAS,MAAT,CAAgB,UAAU,CAAV,EAAa;AAChC,oBAAI,QAAQ,EAAE,KAAd,CADgC,CACX;AACrB,uBAAO,gBAAgB,OAAhB,CAAwB,KAAxB,MAAmC,CAAC,CAA3C;AACH,aAHM,CAAP;AAIH,SATqB;AAUtB,eAAO,eAAU,SAAV,EAAqB;AACxB,mBAAO,SAAP;AACH;AAZqB,KAAT,CAAjB;;AAeA,WAAO;AACH,gBAAQ,cADL;AAEH,kBAAU,QAFP;AAGH,sBAAc;AAHX,KAAP;AAKH","file":"selectViewModel.js","sourcesContent":["import { observable, observableArray, computed } from 'knockout';    \r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { has, get, is } from 'scalejs';\r\nimport _ from 'lodash';\r\n\r\n    /**\r\n     *  select is a type of input that lets the \r\n     *  user select the value from dropdown options\r\n     * \r\n     * @module input-select\r\n     * \r\n     * @param {object} node\r\n     *  The configuration specs for the component.\r\n     * @param {string} node.options\r\n     *  Options specific to this component\r\n     * @param {bool} [node.options.addBlank=true] \r\n     *  Whether or not to add a blank to the beginning of the select options\r\n     * @param {object|array} node.options.values\r\n     *  Specifies either an array of values to use or an object describing the values\r\n     * @param {string} node.options.values.fromArray\r\n     *  A string to be evaluated that will be used to map the values\r\n     * @param {string|array} node.options.values.textKey\r\n     *  A string or array which refers to the text key (i.e. the label) for the options\r\n     * @param {string} node.options.values.valueKey\r\n     *  A string which referes to the value key for the options\r\n     * @param {string} [node.options.values.delimeter=' / ']\r\n     *  A delimeter for the label if the textKey is an array\r\n     * @param {string} [node.options.values.textFormatter]\r\n     *  The name of a function to format the label for the option (i.e. dateFormatter)\r\n     *  \r\n     */\r\n    export default function selectViewModel(node, inputViewModel) {\r\n        var context = this,\r\n            options = node.options || { values: [] },\r\n            // inputViewModel\r\n            inputValue = inputViewModel.inputValue,            \r\n            mapItem = inputViewModel.mapItem,\r\n            format = inputViewModel.format,\r\n            subs = inputViewModel.subs,\r\n            values = inputViewModel.values,\r\n            // props            \r\n            addBlank = !has(options.addBlank) || options.addBlank,\r\n            currentFilter = observable(),\r\n            computedValues;\r\n\r\n        if(!options.values) {\r\n            console.warn('select input type being used without values');\r\n            options.values = [];\r\n        }\r\n                \r\n        /** \r\n         * Helper function to check if the array has the value\r\n         * \r\n         * @param {array}   valuesArr   Array to check for value\r\n         * @param           value       The value to check in array\r\n         */    \r\n        function arrayHasValue(valuesArr, valueOrObjectToCheck) {\r\n            var valueToCheck = get(valueOrObjectToCheck, 'value', valueOrObjectToCheck);\r\n            return valuesArr.some(function(value) {\r\n                return get(value, 'value', value) === valueToCheck;\r\n            });\r\n        }\r\n          \r\n        /** \r\n         * Helper function to takes valuesArr and a value.\r\n         * If the array does not contain the value, it unshifts it\r\n         * \r\n         * @param {array}   valuesArr   Array to check for value\r\n         * @param           value       The value to unshift if not found\r\n         */       \r\n        function unshiftToValues(valuesArr, value) {\r\n            var hasValue = arrayHasValue(valuesArr, value);\r\n\r\n            if (!hasValue && has(value) && value != '') {\r\n                valuesArr.unshift({\r\n                    text: format(value),\r\n                    value: value\r\n                });\r\n            }\r\n            return valuesArr;\r\n        }\r\n        \r\n        /** \r\n         * Sets the values if the options.values is an array.\r\n         * Maps any string values to { text, value }\r\n         */  \r\n        function setValuesFromOptionsArray() {\r\n            values((addBlank ? [''] : []).concat(options.values.slice()).map(function(val) {\r\n                return is(val, 'string') ? { text: val, value: val } : val;\r\n            }));         \r\n        }\r\n        \r\n        /** \r\n         * Sets the values if the options.values is an object and options.values.fromArray exists.\r\n         * fromArray is an expression which is evaluated to retrieve the values from context\r\n         */ \r\n        function setValuesFromOptionsObject() {\r\n            // create a sub to subscribe to changes in values\r\n            subs.push(computed(function () {\r\n                var value = inputValue.peek(), \r\n                    newValues = (_.toArray(evaluate(options.values.fromArray, context.getValue) || []))\r\n                        .filter(function(item) {\r\n                            return has(item);\r\n                        }).map(mapItem(options.values));\r\n\r\n                newValues = (addBlank || newValues.length === 0 ? [{ text: '', value: ''}] : []).concat(newValues);\r\n\r\n                values(unshiftToValues(newValues, value));\r\n            }).extend({ deferred: true }));\r\n        }\r\n                      \r\n        /** \r\n         * setValue is Utilized by the form to set the value of the input after initialization\r\n         * If the value is not already in the values array, it will be unshifted\r\n         * \r\n         * @param {object|value}    data    Either an object with a value or the value to be set\r\n         */    \r\n        function setValue(data) {\r\n            var value = is(data, 'object') && data.hasOwnProperty('value') ? data.value : data;             \r\n            values(unshiftToValues(values(), value));\r\n            inputValue(value);\r\n        }   \r\n        \r\n        /** \r\n         * Function which is utilized by rules engine\r\n         * Sets the currentFilter observable\r\n         * This will make the computedValues return only the valuesToKeep\r\n         * \r\n         * @param {array}   valuesToKeep    Array of values that will kept in the filter\r\n         */    \r\n        function filterValues(valuesToKeep) {\r\n          currentFilter(valuesToKeep);\r\n          // changing the currentFilter can change the values\r\n          // this in turn, changing the inputValue. But for some reason, its not enough to trigger bindings.\r\n          // manually provoke a change to isModified, so validation bindings get re-evaled.\r\n          inputValue.isModified.valueHasMutated();\r\n        }\r\n        \r\n        /**\r\n         * Initialize the values observable either with array or with object\r\n         */\r\n        if (Array.isArray(options.values)) { setValuesFromOptionsArray(); }\r\n        if (options.values.fromArray) { setValuesFromOptionsObject(); }        \r\n        \r\n        /**\r\n         * If currentFilter is defined, return only values which match\r\n         */\r\n        computedValues = computed({\r\n            read: function () {\r\n                if(!currentFilter()) {\r\n                    return values();\r\n                }\r\n                return values().filter(function (v) {\r\n                    var value = v.value; // || v; //we used to expect { value: ''} or '', now we always do mapping first\r\n                    return currentFilter().indexOf(value) !== -1;\r\n                });\r\n            },\r\n            write: function (newValues) {\r\n                values(newValues);\r\n            }\r\n        });\r\n        \r\n        return {\r\n            values: computedValues,\r\n            setValue: setValue,\r\n            filterValues: filterValues            \r\n        }\r\n    };\r\n\r\n"]}