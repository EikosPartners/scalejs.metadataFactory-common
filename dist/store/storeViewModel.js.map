{"version":3,"sources":["../../src/store/storeViewModel.js"],"names":["node","keyMap","storeKey","storeValue","dataSourceEndpoint","options","context","subs","console","warn","fetchData","uri","target","call","action","callback","error","results","setValue","value","resultsKey","mapArrayToDictionaryWithKey","reduce","obj","item","key","aggregateMappedItems","push","resultsValueKey","id","dispose","forEach","sub"],"mappings":";;;;;;kBAkCmB,UAAUA,IAAV,EAAgB;AAC3B,QAAIC,SAASD,KAAKC,MAAL,IAAe,EAA5B;AAAA,QACIC,WAAWF,KAAKE,QADpB;AAAA,QAEIC,aAAaH,KAAKG,UAFtB;AAAA,QAGIC,qBAAqBJ,KAAKI,kBAH9B;AAAA,QAIIC,UAAUL,KAAKK,OAAL,IAAgB,EAJ9B;AAAA,QAKIC,UAAU,IALd;AAAA,QAMIC,OAAO,EANX;;AAQA,QAAI,CAACL,QAAL,EAAe;AACXM,gBAAQC,IAAR,CAAa,sCAAb,EAAqDT,IAArD;AACA;AACH;;AAED,QAAI,CAACI,kBAAD,IAAuB,CAACD,UAA5B,EAAwC;AACpCK,gBAAQC,IAAR,CAAa,0EAAb,EAAyFT,IAAzF;AACA;AACH;;AAED;AACA;AACA,aAASU,SAAT,GAAqB;AACjB,YAAIN,mBAAmBO,GAAvB,EAA4B;AACxBH,oBAAQC,IAAR,CAAa,+FAAb,EAA8GT,IAA9G;AACAI,iCAAqB,qBAAMA,kBAAN,EAA0B;AAC3CQ,wBAAQR;AADmC,aAA1B,CAArB;AAGA,mBAAOA,mBAAmBO,GAA1B;AACH;;AAED,kCAAgBE,IAAhB,CAAqBP,OAArB,EAA8B;AAC1B,oBAAQ,QADkB;AAE1B,0BAAc,MAFY;AAG1B,uBAAWF;AAHe,SAA9B,EAIGU,MAJH,CAIU;AACNC,sBAAU,kBAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AAChC,oBAAID,KAAJ,EAAW;AACPR,4BAAQQ,KAAR,CAAc,qCAAd,EAAqDhB,IAArD,EAA2DgB,KAA3D;AACA,sCAAYE,QAAZ,CAAqBhB,QAArB,EAA+Bc,KAA/B;AACA;AACH;AACD,oBAAIG,QAAQlB,OAAOmB,UAAP,GAAoBH,QAAQhB,OAAOmB,UAAf,CAApB,GAAiDH,OAA7D;;AAEA,oBAAIZ,QAAQgB,2BAAZ,EAAyC;AACrCF,4BAAQA,MAAMG,MAAN,CAAa,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACtC,4BAAIC,MAAMpB,QAAQgB,2BAAlB;AACA,4BAAIhB,QAAQqB,oBAAZ,EAAkC;AAC9BH,gCAAIC,KAAKC,GAAL,CAAJ,IAAiBF,IAAIC,KAAKC,GAAL,CAAJ,KAAkB,EAAnC;AACAF,gCAAIC,KAAKC,GAAL,CAAJ,EAAeE,IAAf,CAAoBH,IAApB;AACH,yBAHD,MAGO;AACHD,gCAAIC,KAAKC,GAAL,CAAJ,IAAiBxB,OAAO2B,eAAP,GAAyBJ,KAAKvB,OAAO2B,eAAZ,CAAzB,GAAwDJ,IAAzE,CADG,CAC4E;AAClF;AACD,+BAAOD,GAAP;AACH,qBATO,EASL,EATK,CAAR;AAUH;AACD,kCAAYL,QAAZ,CAAqBhB,QAArB,EAA+BiB,KAA/B;AACH;AAtBK,SAJV;AA4BH;;AAED,QAAGf,kBAAH,EAAuB;AACnBM,oBADmB,CACN;;AAEb,YAAIV,KAAK6B,EAAT,EAAa;AAAE;AACXtB,iBAAKoB,IAAL,CAAU,uBAAQ3B,KAAK6B,EAAL,GAAU,UAAlB,EAA8B,YAAY;AAChDnB;AACH,aAFS,CAAV;AAGH;AACJ;;AAED,QAAGP,UAAH,EAAe;AACX,0BAAYe,QAAZ,CAAqBhB,QAArB,EAA+BC,UAA/B;AACH;;AAGD,WAAO;AACC2B,iBAAS,mBAAY;AACrBvB,iBAAKwB,OAAL,CAAa,UAAUC,GAAV,EAAe;AACxBA,oBAAIF,OAAJ;AACH,aAFD;AAGH;AALE,KAAP;AAOH,C;;AApHL;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAgHK;;AA9GD;;AAEA","file":"storeViewModel.js","sourcesContent":["import noticeboard from 'scalejs.noticeboard';\nimport dataservice from 'dataservice';\nimport { receive } from 'scalejs.messagebus';\nimport { createViewModel } from 'scalejs.metadataFactory';\nimport { merge } from 'scalejs';\n\n    //TODO: Rename results to resultsKey\n\n    /**\n     * Store: a component that takes a dataSourceEndpoint\n     * and adds the results to the noticeboard.\n     * It has no viewmodel and does not accept children.\n     *\n     * @module store\n     *\n     * @param {object} node\n     *  The configuation object for the module\n     * @param {string} node.type='store'\n     * The type of the node is store     *\n     * @param {object} node.storeKey\n     *  The key that the results are stored on in the noticeboard\n     * @param {object|Object[]} node.dataSourceEndpoint\n     *  An object defining the endpoint(s) that makes the ajax calls\n     * @param {string} node.dataSourceEndpoint.uri\n     *   The uri for the endpoint\n     * @param {string} [node.dataSourceEndpoint.url]\n     *  The url for the endpoint\n     * @param {object} [node.dataSourceEndpoint.options]\n     *  Options for the ajax call\n     * @param {object} [node.keyMap]\n     *  A mapper object to map keys\n     * @param {object} [node.keyMap.result]\n     *  Map the results from the ajax call with this key\n     */\n    export default function (node) {\n        var keyMap = node.keyMap || {},\n            storeKey = node.storeKey,\n            storeValue = node.storeValue,\n            dataSourceEndpoint = node.dataSourceEndpoint,\n            options = node.options || {},\n            context = this,\n            subs = [];\n\n        if (!storeKey) {\n            console.warn('Cannot store data without a storeKey', node);\n            return;\n        }\n\n        if (!dataSourceEndpoint && !storeValue) {\n            console.warn('Cannot set storeKey with data without a dataSourceEndpoint or storeValue', node);\n            return;\n        }\n\n        //todo: check if storeKey is already in the noticeboard\n        // option to persist data and not request endpoint multiple times\n        function fetchData() {\n            if (dataSourceEndpoint.uri) {\n                console.warn('dataSourceEndpoint expects URI in \"target\". Please update your JSON to reflect the new syntax', node);\n                dataSourceEndpoint = merge(dataSourceEndpoint, {\n                    target: dataSourceEndpoint\n                });\n                delete dataSourceEndpoint.uri;\n            }\n\n            createViewModel.call(context, {\n                \"type\": \"action\",\n                \"actionType\": \"ajax\",\n                \"options\": dataSourceEndpoint\n            }).action({\n                callback: function (error, results) {\n                    if (error) {\n                        console.error('Error when retrieving data for node', node, error);\n                        noticeboard.setValue(storeKey, error);\n                        return;\n                    }\n                    var value = keyMap.resultsKey ? results[keyMap.resultsKey] : results;\n\n                    if (options.mapArrayToDictionaryWithKey) {\n                        value = value.reduce(function (obj, item) {\n                            var key = options.mapArrayToDictionaryWithKey;\n                            if (options.aggregateMappedItems) {\n                                obj[item[key]] = obj[item[key]] || [];\n                                obj[item[key]].push(item);\n                            } else {\n                                obj[item[key]] = keyMap.resultsValueKey ? item[keyMap.resultsValueKey] : item; // will overwrite any existing items with the key\n                            }\n                            return obj;\n                        }, {})\n                    }\n                    noticeboard.setValue(storeKey, value);\n                }              \n            });\n        }\n\n        if(dataSourceEndpoint) {\n            fetchData(); //initial call\n\n            if (node.id) { //setup refresh receiver if store has id\n                subs.push(receive(node.id + '.refresh', function () {\n                    fetchData();\n                }));\n            }\n        }\n\n        if(storeValue) {\n            noticeboard.setValue(storeKey, storeValue);\n        }\n\n\n        return {\n                dispose: function () {\n                subs.forEach(function (sub) {\n                    sub.dispose();\n                });\n            }\n        }\n    };\n"]}