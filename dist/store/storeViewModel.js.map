{"version":3,"sources":["../../src/store/storeViewModel.js"],"names":[],"mappings":";;;;;;kBAgCmB,UAAU,IAAV,EAAgB;AAC3B,QAAI,SAAS,KAAK,MAAL,IAAe,EAA5B;AAAA,QACI,WAAW,KAAK,QADpB;AAAA,QAEI,aAAa,KAAK,UAFtB;AAAA,QAGI,qBAAqB,KAAK,kBAH9B;AAAA,QAII,UAAU,KAAK,OAAL,IAAgB,EAJ9B;AAAA,QAKI,OAAO,EALX;;AAOA,QAAI,CAAC,QAAL,EAAe;AACX,gBAAQ,IAAR,CAAa,sCAAb,EAAqD,IAArD;AACA;AACH;;AAED,QAAI,CAAC,kBAAD,IAAuB,CAAC,UAA5B,EAAwC;AACpC,gBAAQ,IAAR,CAAa,0EAAb,EAAyF,IAAzF;AACA;AACH;;AAED;AACA;AACA,aAAS,SAAT,GAAqB;AACjB,8BAAY,IAAZ,CAAiB,kBAAjB,EAAqC,UAAU,KAAV,EAAiB,OAAjB,EAA0B;AAC3D,gBAAI,KAAJ,EAAW;AACP,wBAAQ,KAAR,CAAc,qCAAd,EAAqD,IAArD,EAA2D,KAA3D;AACA,kCAAY,QAAZ,CAAqB,QAArB,EAA+B,KAA/B;AACA;AACH;AACD,gBAAI,QAAQ,OAAO,UAAP,GAAoB,QAAQ,OAAO,UAAf,CAApB,GAAiD,OAA7D;;AAEA,gBAAI,QAAQ,2BAAZ,EAAyC;AACrC,wBAAQ,MAAM,MAAN,CAAa,UAAU,GAAV,EAAe,IAAf,EAAqB;AACtC,wBAAI,MAAM,QAAQ,2BAAlB;AACA,wBAAI,QAAQ,oBAAZ,EAAkC;AAC9B,4BAAI,KAAK,GAAL,CAAJ,IAAiB,IAAI,KAAK,GAAL,CAAJ,KAAkB,EAAnC;AACA,4BAAI,KAAK,GAAL,CAAJ,EAAe,IAAf,CAAoB,IAApB;AACH,qBAHD,MAGO;AACH,4BAAI,KAAK,GAAL,CAAJ,IAAiB,OAAO,eAAP,GAAyB,KAAK,OAAO,eAAZ,CAAzB,GAAwD,IAAzE,CADG,CAC4E;AAClF;AACD,2BAAO,GAAP;AACH,iBATO,EASL,EATK,CAAR;AAUH;AACD,8BAAY,QAAZ,CAAqB,QAArB,EAA+B,KAA/B;AACH,SArBD;AAsBH;;AAED,QAAG,kBAAH,EAAuB;AACnB,oBADmB,CACN;;AAEb,YAAI,KAAK,EAAT,EAAa;AAAE;AACX,iBAAK,IAAL,CAAU,uBAAQ,KAAK,EAAL,GAAU,UAAlB,EAA8B,YAAY;AAChD;AACH,aAFS,CAAV;AAGH;AACJ;;AAED,QAAG,UAAH,EAAe;AACX,0BAAY,QAAZ,CAAqB,QAArB,EAA+B,UAA/B;AACH;;AAGD,WAAO;AACC,iBAAS,mBAAY;AACrB,iBAAK,OAAL,CAAa,UAAU,GAAV,EAAe;AACxB,oBAAI,OAAJ;AACH,aAFD;AAGH;AALE,KAAP;AAOH,C;;AAnGL;;;;AACA;;;;AACA;;;;AAiGK;;AA/FD;;AAEA","file":"storeViewModel.js","sourcesContent":["import noticeboard from 'scalejs.noticeboard';\r\nimport dataservice from 'dataservice';\r\nimport { receive } from 'scalejs.messagebus';\r\n\r\n    //TODO: Rename results to resultsKey\r\n\r\n    /**\r\n     * Store: a component that takes a dataSourceEndpoint\r\n     * and adds the results to the noticeboard.\r\n     * It has no viewmodel and does not accept children.\r\n     *\r\n     * @module store\r\n     *\r\n     * @param {object} node\r\n     *  The configuation object for the module\r\n     * @param {string} node.type='store'\r\n     * The type of the node is store     *\r\n     * @param {object} node.storeKey\r\n     *  The key that the results are stored on in the noticeboard\r\n     * @param {object|Object[]} node.dataSourceEndpoint\r\n     *  An object defining the endpoint(s) that makes the ajax calls\r\n     * @param {string} node.dataSourceEndpoint.uri\r\n     *   The uri for the endpoint\r\n     * @param {string} [node.dataSourceEndpoint.url]\r\n     *  The url for the endpoint\r\n     * @param {object} [node.dataSourceEndpoint.options]\r\n     *  Options for the ajax call\r\n     * @param {object} [node.keyMap]\r\n     *  A mapper object to map keys\r\n     * @param {object} [node.keyMap.result]\r\n     *  Map the results from the ajax call with this key\r\n     */\r\n    export default function (node) {\r\n        var keyMap = node.keyMap || {},\r\n            storeKey = node.storeKey,\r\n            storeValue = node.storeValue,\r\n            dataSourceEndpoint = node.dataSourceEndpoint,\r\n            options = node.options || {},\r\n            subs = [];\r\n\r\n        if (!storeKey) {\r\n            console.warn('Cannot store data without a storeKey', node);\r\n            return;\r\n        }\r\n\r\n        if (!dataSourceEndpoint && !storeValue) {\r\n            console.warn('Cannot set storeKey with data without a dataSourceEndpoint or storeValue', node);\r\n            return;\r\n        }\r\n\r\n        //todo: check if storeKey is already in the noticeboard\r\n        // option to persist data and not request endpoint multiple times\r\n        function fetchData() {\r\n            dataservice.ajax(dataSourceEndpoint, function (error, results) {\r\n                if (error) {\r\n                    console.error('Error when retrieving data for node', node, error);\r\n                    noticeboard.setValue(storeKey, error);\r\n                    return;\r\n                }\r\n                var value = keyMap.resultsKey ? results[keyMap.resultsKey] : results;\r\n\r\n                if (options.mapArrayToDictionaryWithKey) {\r\n                    value = value.reduce(function (obj, item) {\r\n                        var key = options.mapArrayToDictionaryWithKey;\r\n                        if (options.aggregateMappedItems) {\r\n                            obj[item[key]] = obj[item[key]] || [];\r\n                            obj[item[key]].push(item);\r\n                        } else {\r\n                            obj[item[key]] = keyMap.resultsValueKey ? item[keyMap.resultsValueKey] : item; // will overwrite any existing items with the key\r\n                        }\r\n                        return obj;\r\n                    }, {})\r\n                }\r\n                noticeboard.setValue(storeKey, value);\r\n            });\r\n        }\r\n\r\n        if(dataSourceEndpoint) {\r\n            fetchData(); //initial call\r\n\r\n            if (node.id) { //setup refresh receiver if store has id\r\n                subs.push(receive(node.id + '.refresh', function () {\r\n                    fetchData();\r\n                }));\r\n            }\r\n        }\r\n\r\n        if(storeValue) {\r\n            noticeboard.setValue(storeKey, storeValue);\r\n        }\r\n\r\n\r\n        return {\r\n                dispose: function () {\r\n                subs.forEach(function (sub) {\r\n                    sub.dispose();\r\n                });\r\n            }\r\n        }\r\n    };\r\n"]}