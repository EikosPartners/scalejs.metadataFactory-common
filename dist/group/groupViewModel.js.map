{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":[],"mappings":";;;;;;kBAoBmB,UAAU,IAAV,EAAgB;AAC3B,QAAI,UAAU,KAAK,OAAL,IAAgB,EAA9B;AAAA,QACI,aAAa,2BADjB;AAAA,QAEI,UAAU,IAFd;AAAA,QAGI,gBAHJ;;AAKA,aAAS,QAAT,CAAkB,MAAlB,EAA0B;AACtB,YAAI,QAAQ,kBAAI,MAAJ,EAAY,OAAZ,IAAuB,OAAO,KAA9B,GAAsC,MAAlD;AACA,eAAO,IAAP,CAAY,YAAZ,EAA0B,OAA1B,CAAkC,UAAS,EAAT,EAAa;AAC3C,gBAAI,QAAQ,aAAa,EAAb,CAAZ;AACA,gBAAG,MAAM,QAAN,IAAkB,MAAM,cAAN,CAAqB,MAAM,EAA3B,CAArB,EAAqD;AACjD,sBAAM,QAAN,CAAe,MAAM,MAAM,EAAZ,CAAf;AACH;AACJ,SALD;AAMH;;AAED,aAAS,QAAT,GAAoB;AAChB,YAAI,MAAM,OAAO,IAAP,CAAY,YAAZ,EAA0B,MAA1B,CAAiC,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC1D,gBAAI,QAAQ,aAAa,EAAb,CAAZ;AACA,gBAAG,MAAM,QAAT,EAAmB;AACf,oBAAI,MAAM,EAAV,IAAgB,MAAM,QAAN,EAAhB;AACH;AACD,mBAAO,GAAP;AACH,SANS,EAMP,EANO,CAAV;AAOA,eAAO,GAAP;AACH;;AAED,uBAAmB,2BAAiB,IAAjB,CAAsB,IAAtB,EAA4B,KAAK,QAAjC,CAAnB;;AAEA,eAAW,qBAAqB,gBAArB,CAAX;;AAEA,WAAO,oBAAM,IAAN,EAAY;AACf,0CADe;AAEf,8BAFe;AAGf,0BAHe;AAIf,0BAJe;AAKf;AALe,KAAZ,CAAP;AAOH,C;;AA1DL;;AACA;;AACA;;AAEI,SAAS,oBAAT,CAA8B,gBAA9B,EAAgD;AAC5C,QAAI,aAAa,EAAjB;;AAEA,aAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,YAAG,KAAK,EAAR,EAAY;AACR,uBAAW,KAAK,EAAhB,IAAsB,IAAtB;AACH;AACD,YAAI,CAAC,KAAK,QAAV,EAAoB;AAChB,aAAC,KAAK,gBAAL,IAAyB,EAA1B,EAA8B,OAA9B,CAAsC,eAAtC;AACH;AACJ;AACD,KAAC,oBAAoB,EAArB,EAAyB,OAAzB,CAAiC,eAAjC;;AAEA,WAAO,UAAP;AACH;;AAwCA","file":"groupViewModel.js","sourcesContent":["import { observable } from 'knockout';\nimport { has, merge } from 'scalejs';\nimport { createViewModels } from 'scalejs.metadataFactory'\n\n    function createNodeDictionary(mappedChildNodes) {\n        var dictionary = {};\n\n        function addToDictionary(node) {\n            if(node.id) {\n                dictionary[node.id] = node;\n            }\n            if (!node.getValue) {\n                (node.mappedChildNodes || []).forEach(addToDictionary);\n            }\n        }\n        (mappedChildNodes || []).forEach(addToDictionary);\n\n        return dictionary;\n    }\n\n    export default function (node) {\n        var options = node.options || {},\n            dictionary = observable(),\n            context = this,\n            mappedChildNodes;\n\n        function setValue(values) {\n            var value = has(values, 'value') ? values.value : values;\n            Object.keys(dictionary()).forEach(function(id) {\n                var child = dictionary()[id];\n                if(child.setValue && value.hasOwnProperty(child.id)) {\n                    child.setValue(value[child.id]);\n                }\n            });\n        }\n\n        function getValue() {\n            var ret = Object.keys(dictionary()).reduce(function (obj, id) {\n                var child = dictionary()[id];\n                if(child.getValue) {\n                    obj[child.id] = child.getValue();\n                }\n                return obj;\n            }, {});\n            return ret;\n        }\n\n        mappedChildNodes = createViewModels.call(this, node.children);\n\n        dictionary(createNodeDictionary(mappedChildNodes));\n\n        return merge(node, {\n            mappedChildNodes,\n            dictionary,\n            setValue,\n            getValue,\n            context\n        });\n    };\n\n"]}