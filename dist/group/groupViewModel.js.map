{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":["node","dictionary","context","mappedChildNodes","call","children","sub","createNodeDictionary","setValue","values","opts","value","Object","keys","forEach","id","child","prototype","hasOwnProperty","getValue","ret","reduce","obj","rendered","trackChildrenIfHidden","trackIfHidden","update","console","info","dispose","addToDictionary"],"mappings":";;;;;;kBAoBe,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,aAAa,2BAAnB;AAAA,QACIC,UAAU,IADd;AAAA,QAEIC,mBAAmB,2BAAiBC,IAAjB,CAAsB,IAAtB,EAA4BJ,KAAKK,QAAjC,CAFvB;AAAA,QAGIC,MAAM,wBAAS;AAAA,eAAML,WAAWM,qBAAqBJ,gBAArB,CAAX,CAAN;AAAA,KAAT,CAHV;;AAMA,aAASK,QAAT,CAAkBC,MAAlB,EAA0BC,IAA1B,EAAgC;AAC5B,YAAMC,QAAQ,CAAC,kBAAIF,MAAJ,EAAY,OAAZ,IAAuBA,OAAOE,KAA9B,GAAsCF,MAAvC,KAAkD,EAAhE;AACAG,eAAOC,IAAP,CAAYZ,YAAZ,EAA0Ba,OAA1B,CAAkC,UAACC,EAAD,EAAQ;AACtC,gBAAMC,QAAQf,aAAac,EAAb,CAAd;AACA,gBAAIC,MAAMR,QAAN,IAAkBI,OAAOK,SAAP,CAAiBC,cAAjB,CAAgCd,IAAhC,CAAqCO,KAArC,EAA4CK,MAAMD,EAAlD,CAAtB,EAA6E;AACzEC,sBAAMR,QAAN,CAAeG,MAAMK,MAAMD,EAAZ,CAAf,EAAgCL,IAAhC;AACH;AACJ,SALD;AAMH;;AAED,aAASS,QAAT,GAAoB;AAChB,YAAMC,MAAMR,OAAOC,IAAP,CAAYZ,YAAZ,EAA0BoB,MAA1B,CAAiC,UAACC,GAAD,EAAMP,EAAN,EAAa;AACtD,gBAAMC,QAAQf,aAAac,EAAb,CAAd;AACA,gBAAKC,MAAMG,QAAN,KACJH,MAAMO,QAAN,MAAoBvB,KAAKwB,qBAAL,KAA+B,KAAnD,IAA4DR,MAAMS,aAD9D,CAAL,EACoF;AAChFH,oBAAIN,MAAMD,EAAV,IAAgBC,MAAMG,QAAN,EAAhB;AACH,aAHD,MAGO;AACH,uBAAOG,IAAIN,MAAMD,EAAV,CAAP,CADG,CACmB;AACzB;AACD,mBAAOO,GAAP;AACH,SATW,EAST,EATS,CAAZ;AAUA,eAAOF,GAAP;AACH;;AAED,aAASM,MAAT,CAAgBf,KAAhB,EAAuB;AACnBgB,gBAAQC,IAAR,CAAa,qCAAb;AACApB,iBAASG,KAAT;AACH;;AAED,WAAO,oBAAMX,IAAN,EAAY;AACfG,0CADe;AAEfF,8BAFe;AAGfO,0BAHe;AAIfW,0BAJe;AAKfjB,wBALe;AAMfwB,sBANe;AAOfG,eAPe,qBAOL;AACNvB,gBAAIuB,OAAJ;AACH;AATc,KAAZ,CAAP;AAWH,C;;AAnED;;AACA;;AACA;;AAEA,SAAStB,oBAAT,CAA8BJ,gBAA9B,EAAgD;AAC5C,QAAMF,aAAa,EAAnB;;AAEA,aAAS6B,eAAT,CAAyB9B,IAAzB,EAA+B;AAC3B,YAAIA,KAAKe,EAAT,EAAa;AACTd,uBAAWD,KAAKe,EAAhB,IAAsBf,IAAtB;AACH;AACD,YAAI,CAACA,KAAKmB,QAAV,EAAoB;AAChB,aAAC,sBAAOnB,KAAKG,gBAAZ,KAAiC,EAAlC,EAAsCW,OAAtC,CAA8CgB,eAA9C;AACH;AACJ;AACD,KAAC,sBAAO3B,gBAAP,KAA4B,EAA7B,EAAiCW,OAAjC,CAAyCgB,eAAzC;;AAEA,WAAO7B,UAAP;AACH","file":"groupViewModel.js","sourcesContent":["import { observable, unwrap, computed } from 'knockout';\nimport { has, merge } from 'scalejs';\nimport { createViewModels } from 'scalejs.metadataFactory';\n\nfunction createNodeDictionary(mappedChildNodes) {\n    const dictionary = {};\n\n    function addToDictionary(node) {\n        if (node.id) {\n            dictionary[node.id] = node;\n        }\n        if (!node.getValue) {\n            (unwrap(node.mappedChildNodes) || []).forEach(addToDictionary);\n        }\n    }\n    (unwrap(mappedChildNodes) || []).forEach(addToDictionary);\n\n    return dictionary;\n}\n\nexport default function (node) {\n    const dictionary = observable(),\n        context = this,\n        mappedChildNodes = createViewModels.call(this, node.children),\n        sub = computed(() => dictionary(createNodeDictionary(mappedChildNodes)));\n\n\n    function setValue(values, opts) {\n        const value = (has(values, 'value') ? values.value : values) || {};\n        Object.keys(dictionary()).forEach((id) => {\n            const child = dictionary()[id];\n            if (child.setValue && Object.prototype.hasOwnProperty.call(value, child.id)) {\n                child.setValue(value[child.id], opts);\n            }\n        });\n    }\n\n    function getValue() {\n        const ret = Object.keys(dictionary()).reduce((obj, id) => {\n            const child = dictionary()[id];\n            if ((child.getValue &&\n            (child.rendered() || node.trackChildrenIfHidden !== false || child.trackIfHidden))) {\n                obj[child.id] = child.getValue();\n            } else {\n                delete obj[child.id]; // track if hidden functionality for group..\n            }\n            return obj;\n        }, {});\n        return ret;\n    }\n\n    function update(value) {\n        console.info('Group only supports udate for value');\n        setValue(value);\n    }\n\n    return merge(node, {\n        mappedChildNodes,\n        dictionary,\n        setValue,\n        getValue,\n        context,\n        update,\n        dispose() {\n            sub.dispose();\n        }\n    });\n}"]}