{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":["node","options","dictionary","context","mappedChildNodes","setValue","values","value","Object","keys","forEach","id","child","hasOwnProperty","getValue","ret","reduce","obj","call","children","createNodeDictionary","addToDictionary"],"mappings":";;;;;;kBAoBmB,UAAUA,IAAV,EAAgB;AAC3B,QAAIC,UAAUD,KAAKC,OAAL,IAAgB,EAA9B;AAAA,QACIC,aAAa,2BADjB;AAAA,QAEIC,UAAU,IAFd;AAAA,QAGIC,gBAHJ;;AAKA,aAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACtB,YAAIC,QAAQ,kBAAID,MAAJ,EAAY,OAAZ,IAAuBA,OAAOC,KAA9B,GAAsCD,MAAlD;AACAE,eAAOC,IAAP,CAAYP,YAAZ,EAA0BQ,OAA1B,CAAkC,UAASC,EAAT,EAAa;AAC3C,gBAAIC,QAAQV,aAAaS,EAAb,CAAZ;AACA,gBAAGC,MAAMP,QAAN,IAAkBE,MAAMM,cAAN,CAAqBD,MAAMD,EAA3B,CAArB,EAAqD;AACjDC,sBAAMP,QAAN,CAAeE,MAAMK,MAAMD,EAAZ,CAAf;AACH;AACJ,SALD;AAMH;;AAED,aAASG,QAAT,GAAoB;AAChB,YAAIC,MAAMP,OAAOC,IAAP,CAAYP,YAAZ,EAA0Bc,MAA1B,CAAiC,UAAUC,GAAV,EAAeN,EAAf,EAAmB;AAC1D,gBAAIC,QAAQV,aAAaS,EAAb,CAAZ;AACA,gBAAGC,MAAME,QAAT,EAAmB;AACfG,oBAAIL,MAAMD,EAAV,IAAgBC,MAAME,QAAN,EAAhB;AACH;AACD,mBAAOG,GAAP;AACH,SANS,EAMP,EANO,CAAV;AAOA,eAAOF,GAAP;AACH;;AAEDX,uBAAmB,2BAAiBc,IAAjB,CAAsB,IAAtB,EAA4BlB,KAAKmB,QAAjC,CAAnB;;AAEAjB,eAAWkB,qBAAqBhB,gBAArB,CAAX;;AAEA,WAAO,oBAAMJ,IAAN,EAAY;AACfI,0CADe;AAEfF,8BAFe;AAGfG,0BAHe;AAIfS,0BAJe;AAKfX;AALe,KAAZ,CAAP;AAOH,C;;AA1DL;;AACA;;AACA;;AAEI,SAASiB,oBAAT,CAA8BhB,gBAA9B,EAAgD;AAC5C,QAAIF,aAAa,EAAjB;;AAEA,aAASmB,eAAT,CAAyBrB,IAAzB,EAA+B;AAC3B,YAAGA,KAAKW,EAAR,EAAY;AACRT,uBAAWF,KAAKW,EAAhB,IAAsBX,IAAtB;AACH;AACD,YAAI,CAACA,KAAKc,QAAV,EAAoB;AAChB,aAACd,KAAKI,gBAAL,IAAyB,EAA1B,EAA8BM,OAA9B,CAAsCW,eAAtC;AACH;AACJ;AACD,KAACjB,oBAAoB,EAArB,EAAyBM,OAAzB,CAAiCW,eAAjC;;AAEA,WAAOnB,UAAP;AACH;;AAwCA","file":"groupViewModel.js","sourcesContent":["import { observable } from 'knockout';\r\nimport { has, merge } from 'scalejs';\r\nimport { createViewModels } from 'scalejs.metadataFactory'\r\n\r\n    function createNodeDictionary(mappedChildNodes) {\r\n        var dictionary = {};\r\n\r\n        function addToDictionary(node) {\r\n            if(node.id) {\r\n                dictionary[node.id] = node;\r\n            }\r\n            if (!node.getValue) {\r\n                (node.mappedChildNodes || []).forEach(addToDictionary);\r\n            }\r\n        }\r\n        (mappedChildNodes || []).forEach(addToDictionary);\r\n\r\n        return dictionary;\r\n    }\r\n\r\n    export default function (node) {\r\n        var options = node.options || {},\r\n            dictionary = observable(),\r\n            context = this,\r\n            mappedChildNodes;\r\n\r\n        function setValue(values) {\r\n            var value = has(values, 'value') ? values.value : values;\r\n            Object.keys(dictionary()).forEach(function(id) {\r\n                var child = dictionary()[id];\r\n                if(child.setValue && value.hasOwnProperty(child.id)) {\r\n                    child.setValue(value[child.id]);\r\n                }\r\n            });\r\n        }\r\n\r\n        function getValue() {\r\n            var ret = Object.keys(dictionary()).reduce(function (obj, id) {\r\n                var child = dictionary()[id];\r\n                if(child.getValue) {\r\n                    obj[child.id] = child.getValue();\r\n                }\r\n                return obj;\r\n            }, {});\r\n            return ret;\r\n        }\r\n\r\n        mappedChildNodes = createViewModels.call(this, node.children);\r\n\r\n        dictionary(createNodeDictionary(mappedChildNodes));\r\n\r\n        return merge(node, {\r\n            mappedChildNodes,\r\n            dictionary,\r\n            setValue,\r\n            getValue,\r\n            context\r\n        });\r\n    };\r\n\r\n"]}