{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":["node","dictionary","context","mappedChildNodes","call","children","setValue","values","opts","value","Object","keys","forEach","id","child","prototype","hasOwnProperty","getValue","ret","reduce","obj","createNodeDictionary","addToDictionary"],"mappings":";;;;;;kBAoBe,UAAUA,IAAV,EAAgB;AAC3B,QAAMC,aAAa,2BAAnB;AAAA,QACIC,UAAU,IADd;AAAA,QAEIC,mBAAmB,2BAAiBC,IAAjB,CAAsB,IAAtB,EAA4BJ,KAAKK,QAAjC,CAFvB;;AAIA,aAASC,QAAT,CAAkBC,MAAlB,EAA0BC,IAA1B,EAAgC;AAC5B,YAAMC,QAAQ,kBAAIF,MAAJ,EAAY,OAAZ,IAAuBA,OAAOE,KAA9B,GAAsCF,MAApD;AACAG,eAAOC,IAAP,CAAYV,YAAZ,EAA0BW,OAA1B,CAAkC,UAACC,EAAD,EAAQ;AACtC,gBAAMC,QAAQb,aAAaY,EAAb,CAAd;AACA,gBAAIC,MAAMR,QAAN,IAAkBI,OAAOK,SAAP,CAAiBC,cAAjB,CAAgCZ,IAAhC,CAAqCK,KAArC,EAA4CK,MAAMD,EAAlD,CAAtB,EAA6E;AACzEC,sBAAMR,QAAN,CAAeG,MAAMK,MAAMD,EAAZ,CAAf,EAAgCL,IAAhC;AACH;AACJ,SALD;AAMH;;AAED,aAASS,QAAT,GAAoB;AAChB,YAAMC,MAAMR,OAAOC,IAAP,CAAYV,YAAZ,EAA0BkB,MAA1B,CAAiC,UAACC,GAAD,EAAMP,EAAN,EAAa;AACtD,gBAAMC,QAAQb,aAAaY,EAAb,CAAd;AACA,gBAAIC,MAAMG,QAAV,EAAoB;AAChBG,oBAAIN,MAAMD,EAAV,IAAgBC,MAAMG,QAAN,EAAhB;AACH;AACD,mBAAOG,GAAP;AACH,SANW,EAMT,EANS,CAAZ;AAOA,eAAOF,GAAP;AACH;;AAEDjB,eAAWoB,qBAAqBlB,gBAArB,CAAX;;AAEA,WAAO,oBAAMH,IAAN,EAAY;AACfG,0CADe;AAEfF,8BAFe;AAGfK,0BAHe;AAIfW,0BAJe;AAKff;AALe,KAAZ,CAAP;AAOH,C;;AAvDD;;AACA;;AACA;;AAEA,SAASmB,oBAAT,CAA8BlB,gBAA9B,EAAgD;AAC5C,QAAMF,aAAa,EAAnB;;AAEA,aAASqB,eAAT,CAAyBtB,IAAzB,EAA+B;AAC3B,YAAIA,KAAKa,EAAT,EAAa;AACTZ,uBAAWD,KAAKa,EAAhB,IAAsBb,IAAtB;AACH;AACD,YAAI,CAACA,KAAKiB,QAAV,EAAoB;AAChB,aAAC,sBAAOjB,KAAKG,gBAAZ,KAAiC,EAAlC,EAAsCS,OAAtC,CAA8CU,eAA9C;AACH;AACJ;AACD,KAAC,sBAAOnB,gBAAP,KAA4B,EAA7B,EAAiCS,OAAjC,CAAyCU,eAAzC;;AAEA,WAAOrB,UAAP;AACH","file":"groupViewModel.js","sourcesContent":["import { observable, unwrap } from 'knockout';\r\nimport { has, merge } from 'scalejs';\r\nimport { createViewModels } from 'scalejs.metadataFactory';\r\n\r\nfunction createNodeDictionary(mappedChildNodes) {\r\n    const dictionary = {};\r\n\r\n    function addToDictionary(node) {\r\n        if (node.id) {\r\n            dictionary[node.id] = node;\r\n        }\r\n        if (!node.getValue) {\r\n            (unwrap(node.mappedChildNodes) || []).forEach(addToDictionary);\r\n        }\r\n    }\r\n    (unwrap(mappedChildNodes) || []).forEach(addToDictionary);\r\n\r\n    return dictionary;\r\n}\r\n\r\nexport default function (node) {\r\n    const dictionary = observable(),\r\n        context = this,\r\n        mappedChildNodes = createViewModels.call(this, node.children);\r\n\r\n    function setValue(values, opts) {\r\n        const value = has(values, 'value') ? values.value : values;\r\n        Object.keys(dictionary()).forEach((id) => {\r\n            const child = dictionary()[id];\r\n            if (child.setValue && Object.prototype.hasOwnProperty.call(value, child.id)) {\r\n                child.setValue(value[child.id], opts);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getValue() {\r\n        const ret = Object.keys(dictionary()).reduce((obj, id) => {\r\n            const child = dictionary()[id];\r\n            if (child.getValue) {\r\n                obj[child.id] = child.getValue();\r\n            }\r\n            return obj;\r\n        }, {});\r\n        return ret;\r\n    }\r\n\r\n    dictionary(createNodeDictionary(mappedChildNodes));\r\n\r\n    return merge(node, {\r\n        mappedChildNodes,\r\n        dictionary,\r\n        setValue,\r\n        getValue,\r\n        context\r\n    });\r\n}"]}