{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":["node","dictionary","context","mappedChildNodes","call","children","sub","createNodeDictionary","currentValue","setValue","values","opts","value","originalDict","Object","keys","forEach","id","child","prototype","hasOwnProperty","isEqual","getValue","ret","reduce","obj","rendered","trackChildrenIfHidden","trackIfHidden","persistData","update","console","info","dispose","addToDictionary"],"mappings":"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","file":"groupViewModel.js","sourcesContent":["import { observable, unwrap, computed } from 'knockout';\r\nimport { has, merge } from 'scalejs';\r\nimport { createViewModels } from 'scalejs.metadataFactory';\r\nimport _ from 'lodash';\r\n\r\nfunction createNodeDictionary(mappedChildNodes) {\r\n    const dictionary = {};\r\n\r\n    function addToDictionary(node) {\r\n        if (node.id) {\r\n            dictionary[node.id] = node;\r\n        }\r\n        if (!node.getValue) {\r\n            (unwrap(node.mappedChildNodes) || []).forEach(addToDictionary);\r\n        }\r\n    }\r\n    (unwrap(mappedChildNodes) || []).forEach(addToDictionary);\r\n\r\n    return dictionary;\r\n}\r\n\r\nexport default function (node) {\r\n    const dictionary = observable(),\r\n        context = this,\r\n        mappedChildNodes = createViewModels.call(this, node.children),\r\n        sub = computed(() => dictionary(createNodeDictionary(mappedChildNodes)));\r\n    let currentValue;\r\n\r\n    function setValue(values, opts) {\r\n        const value = (has(values, 'value') ? values.value : values) || {},\r\n            originalDict = Object.keys(dictionary());\r\n\r\n        currentValue = value;\r\n\r\n        Object.keys(dictionary()).forEach((id) => {\r\n            const child = dictionary()[id];\r\n            if (child.setValue && Object.prototype.hasOwnProperty.call(value, child.id)) {\r\n                child.setValue(value[child.id], opts);\r\n            }\r\n        });\r\n\r\n        if (!_.isEqual(originalDict, Object.keys(dictionary()))) {\r\n            setValue(values, opts);\r\n        }\r\n    }\r\n\r\n    function getValue() {\r\n        const ret = Object.keys(dictionary()).reduce((obj, id) => {\r\n            const child = dictionary()[id];\r\n            if ((child.getValue &&\r\n                (child.rendered() || node.trackChildrenIfHidden !== false || child.trackIfHidden))) {\r\n                obj[child.id] = child.getValue();\r\n            } else {\r\n                delete obj[child.id]; // track if hidden functionality for group..\r\n            }\r\n            return obj;\r\n        }, {});\r\n\r\n        if (node.persistData) {\r\n            return merge(currentValue, ret);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    function update(value) {\r\n        console.info('Group only supports udate for value');\r\n        setValue(value);\r\n    }\r\n\r\n    return merge(node, {\r\n        mappedChildNodes,\r\n        dictionary,\r\n        setValue,\r\n        getValue,\r\n        context,\r\n        update,\r\n        dispose() {\r\n            sub.dispose();\r\n        }\r\n    });\r\n}"]}