{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":["node","dictionary","context","mappedChildNodes","createViewModels","call","children","sub","createNodeDictionary","currentValue","setValue","values","opts","value","originalDict","Object","keys","forEach","id","child","prototype","hasOwnProperty","_","isEqual","getValue","ret","reduce","obj","rendered","trackChildrenIfHidden","trackIfHidden","persistData","update","console","info","dispose","addToDictionary"],"mappings":"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","file":"groupViewModel.js","sourcesContent":["import { observable, unwrap, computed } from 'knockout';\nimport { has, merge } from 'scalejs';\nimport { createViewModels } from 'scalejs.metadataFactory';\nimport _ from 'lodash';\n\nfunction createNodeDictionary(mappedChildNodes) {\n    const dictionary = {};\n\n    function addToDictionary(node) {\n        if (node.id) {\n            dictionary[node.id] = node;\n        }\n        if (!node.getValue) {\n            (unwrap(node.mappedChildNodes) || []).forEach(addToDictionary);\n        }\n    }\n    (unwrap(mappedChildNodes) || []).forEach(addToDictionary);\n\n    return dictionary;\n}\n\nexport default function (node) {\n    const dictionary = observable(),\n        context = this,\n        mappedChildNodes = createViewModels.call(this, node.children),\n        sub = computed(() => dictionary(createNodeDictionary(mappedChildNodes)));\n    let currentValue;\n\n    function setValue(values, opts) {\n        const value = (has(values, 'value') ? values.value : values) || {},\n            originalDict = Object.keys(dictionary());\n\n        currentValue = value;\n\n        Object.keys(dictionary()).forEach((id) => {\n            const child = dictionary()[id];\n            if (child.setValue && Object.prototype.hasOwnProperty.call(value, child.id)) {\n                child.setValue(value[child.id], opts);\n            }\n        });\n\n        if (!_.isEqual(originalDict, Object.keys(dictionary()))) {\n            setValue(values, opts);\n        }\n    }\n\n    function getValue() {\n        const ret = Object.keys(dictionary()).reduce((obj, id) => {\n            const child = dictionary()[id];\n            if ((child.getValue &&\n                (child.rendered() || node.trackChildrenIfHidden !== false || child.trackIfHidden))) {\n                obj[child.id] = child.getValue();\n            } else {\n                delete obj[child.id]; // track if hidden functionality for group..\n            }\n            return obj;\n        }, {});\n\n        if (node.persistData) {\n            return merge(currentValue, ret);\n        }\n\n        return ret;\n    }\n\n    function update(value) {\n        console.info('Group only supports udate for value');\n        setValue(value);\n    }\n\n    return merge(node, {\n        mappedChildNodes,\n        dictionary,\n        setValue,\n        getValue,\n        context,\n        update,\n        dispose() {\n            sub.dispose();\n        }\n    });\n}"]}