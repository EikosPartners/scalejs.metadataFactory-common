{"version":3,"sources":["../../src/group/groupViewModel.js"],"names":[],"mappings":";;;;;;kBAoBmB,UAAU,IAAV,EAAgB;AAC3B,QAAI,UAAU,KAAK,OAAL,IAAgB,EAA9B;AAAA,QACI,aAAa,2BADjB;AAAA,QAEI,UAAU,IAFd;AAAA,QAGI,gBAHJ;;AAKA,aAAS,QAAT,CAAkB,MAAlB,EAA0B;AACtB,YAAI,QAAQ,kBAAI,MAAJ,EAAY,OAAZ,IAAuB,OAAO,KAA9B,GAAsC,MAAlD;AACA,eAAO,IAAP,CAAY,YAAZ,EAA0B,OAA1B,CAAkC,UAAS,EAAT,EAAa;AAC3C,gBAAI,QAAQ,aAAa,EAAb,CAAZ;AACA,gBAAG,MAAM,QAAN,IAAkB,MAAM,cAAN,CAAqB,MAAM,EAA3B,CAArB,EAAqD;AACjD,sBAAM,QAAN,CAAe,MAAM,MAAM,EAAZ,CAAf;AACH;AACJ,SALD;AAMH;;AAED,aAAS,QAAT,GAAoB;AAChB,YAAI,MAAM,OAAO,IAAP,CAAY,YAAZ,EAA0B,MAA1B,CAAiC,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC1D,gBAAI,QAAQ,aAAa,EAAb,CAAZ;AACA,gBAAG,MAAM,QAAT,EAAmB;AACf,oBAAI,MAAM,EAAV,IAAgB,MAAM,QAAN,EAAhB;AACH;AACD,mBAAO,GAAP;AACH,SANS,EAMP,EANO,CAAV;AAOA,eAAO,GAAP;AACH;;AAED,uBAAmB,2BAAiB,IAAjB,CAAsB,IAAtB,EAA4B,KAAK,QAAjC,CAAnB;;AAEA,eAAW,qBAAqB,gBAArB,CAAX;;AAEA,WAAO,oBAAM,IAAN,EAAY;AACf,0CADe;AAEf,8BAFe;AAGf,0BAHe;AAIf,0BAJe;AAKf;AALe,KAAZ,CAAP;AAOH,C;;AA1DL;;AACA;;AACA;;AAEI,SAAS,oBAAT,CAA8B,gBAA9B,EAAgD;AAC5C,QAAI,aAAa,EAAjB;;AAEA,aAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC3B,YAAG,KAAK,EAAR,EAAY;AACR,uBAAW,KAAK,EAAhB,IAAsB,IAAtB;AACH;AACD,YAAI,CAAC,KAAK,QAAV,EAAoB;AAChB,aAAC,KAAK,gBAAL,IAAyB,EAA1B,EAA8B,OAA9B,CAAsC,eAAtC;AACH;AACJ;AACD,KAAC,oBAAoB,EAArB,EAAyB,OAAzB,CAAiC,eAAjC;;AAEA,WAAO,UAAP;AACH;;AAwCA","file":"groupViewModel.js","sourcesContent":["import { observable } from 'knockout';\r\nimport { has, merge } from 'scalejs';\r\nimport { createViewModels } from 'scalejs.metadataFactory'\r\n\r\n    function createNodeDictionary(mappedChildNodes) {\r\n        var dictionary = {};\r\n\r\n        function addToDictionary(node) {\r\n            if(node.id) {\r\n                dictionary[node.id] = node;\r\n            }\r\n            if (!node.getValue) {\r\n                (node.mappedChildNodes || []).forEach(addToDictionary);\r\n            }\r\n        }\r\n        (mappedChildNodes || []).forEach(addToDictionary);\r\n\r\n        return dictionary;\r\n    }\r\n\r\n    export default function (node) {\r\n        var options = node.options || {},\r\n            dictionary = observable(),\r\n            context = this,\r\n            mappedChildNodes;\r\n\r\n        function setValue(values) {\r\n            var value = has(values, 'value') ? values.value : values;\r\n            Object.keys(dictionary()).forEach(function(id) {\r\n                var child = dictionary()[id];\r\n                if(child.setValue && value.hasOwnProperty(child.id)) {\r\n                    child.setValue(value[child.id]);\r\n                }\r\n            });\r\n        }\r\n\r\n        function getValue() {\r\n            var ret = Object.keys(dictionary()).reduce(function (obj, id) {\r\n                var child = dictionary()[id];\r\n                if(child.getValue) {\r\n                    obj[child.id] = child.getValue();\r\n                }\r\n                return obj;\r\n            }, {});\r\n            return ret;\r\n        }\r\n\r\n        mappedChildNodes = createViewModels.call(this, node.children);\r\n\r\n        dictionary(createNodeDictionary(mappedChildNodes));\r\n\r\n        return merge(node, {\r\n            mappedChildNodes,\r\n            dictionary,\r\n            setValue,\r\n            getValue,\r\n            context\r\n        });\r\n    };\r\n\r\n"]}