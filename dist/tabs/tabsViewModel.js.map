{"version":3,"sources":["../../src/tabs/tabsViewModel.js"],"names":[],"mappings":"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","file":"tabsViewModel.js","sourcesContent":["import { createViewModel, createViewModels, createViewModel as createViewModelUnbound } from 'scalejs.metadataFactory';\r\nimport { registerTemplates, registerBindings, template } from 'scalejs.mvvm';\r\nimport { observable, observableArray, computed, unwrap } from 'knockout';\r\nimport { getCurrent, setRoute } from 'scalejs.navigation';\r\nimport { receive, notify } from 'scalejs.messagebus';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { objectContains, formatText } from './tabUtils';\r\nimport { extend, cloneDeep } from 'lodash';\r\nimport { is, has, merge } from 'scalejs';\r\nimport dataservice from 'dataservice';\r\n\r\n    // tabsViewModel\r\n    // tabs displays clickable links that can be used to modify the contents of an active section\r\n    // there is one special tabType right now called ajax which will make a new ajax request when the tab is clicked\r\n    // otherwise the tab will be the mappedChildNodes\r\n    // todo: refactor tabObj/tabDef to be more clear?\r\n    var tabTypes = {\r\n        ajax: ajax,\r\n        route: route,\r\n        lazy: lazy\r\n    };\r\n\r\n    function lazy(tabObj, tab) {\r\n        var mappedChildNodes = observableArray(),\r\n            setActiveTab = tabObj.setActiveTab,\r\n            tabTemplate = tabObj.tabTemplate,\r\n            context = this;\r\n        \r\n        tabObj.mappedChildNodes = mappedChildNodes;\r\n\r\n        tabObj.setActiveTab = function (newRoute) {\r\n            if (!mappedChildNodes().length) {\r\n                mappedChildNodes(createViewModels.call(context, tab.children));\r\n                tabTemplate({\r\n                    template: {\r\n                        name: 'metadata_items_template',\r\n                        data: mappedChildNodes()\r\n                    },\r\n                    tabObj: tabObj\r\n                });\r\n                setActiveTab(newRoute);\r\n            } else {\r\n                setActiveTab(newRoute);\r\n            }\r\n        };\r\n\r\n        return tabObj;\r\n    }\r\n\r\n    function ajax(tabObj, tab) {\r\n        var tabParams = tab.options && tab.options.params,\r\n            setActiveTab = tabObj.setActiveTab,\r\n            tabTemplate = tabObj.tabTemplate,\r\n            mappedChildNodes = observableArray(),\r\n            context = this;\r\n\r\n        // update everything when mapped child nodes changes\r\n        tabObj.mappedChildNodes = mappedChildNodes;\r\n\r\n        // override tab setActiveTab so that new ajax request is made for first load\r\n        tabObj.setActiveTab = function(newRoute) {\r\n            if (!tabTemplate() || !tabObj.keepCache) {\r\n                if(tabTemplate()) {\r\n                    tabTemplate().template.data.forEach(function (node) {\r\n                        // todo - call dispose on mapped child nodes of each node\r\n                        if (node.dispose) {\r\n                            node.dispose();\r\n                        }\r\n                    });\r\n                }\r\n                dataservice.get({uri:tab.ajax}, function (err, metadata) {\r\n                    if (err) {\r\n                        console.error('there is an error',err);\r\n                    }\r\n\r\n                    try {\r\n                        mappedChildNodes(createViewModels.call(context, Array.isArray(metadata) ? metadata : [metadata]));\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n\r\n\r\n                    // need to pass tabObj to the activeTabRegion to be able to code dynamic logic in custom binding\r\n                    tabTemplate({\r\n                        template: {\r\n                            name: 'metadata_items_template',\r\n                            data: mappedChildNodes()\r\n                        },\r\n                        tabObj: tabObj\r\n                    });\r\n                    setActiveTab(newRoute);\r\n                });\r\n            } else {\r\n                setActiveTab(newRoute);\r\n            }\r\n        }\r\n        // todo refactor to pass params\r\n        if (tabParams) {\r\n            tab.ajax = getCurrent().query && getCurrent().query[tabParams] ? tab.ajax + getCurrent().query[tabParams] : tab.ajax;\r\n        }\r\n\r\n        return tabObj;\r\n    }\r\n\r\n    // tabObj - the ViewModel for the tab itself (not the contents)\r\n    // tab - the definition of the Tab contents\r\n    function route(tabObj, tab) {\r\n        var context = this; // want to pass context incase it has data\r\n\r\n        // override tab setActiveTab so that a route is performed\r\n        tabObj.setActiveTab = function () {\r\n            // merge the params from route with current query as not to overwrite it\r\n            // also merge with the tabObj.tabDef.params so that the tab initializes correctly\r\n            // for the objectContains check below, if the tabDef.params is part of the query it will use that tab as the initial tab\r\n            // so we need to make sure, that if we're setting a tabRoute, that the params of the last tab are overwriten with the params in the current tab\r\n            // so you dont get another route accidentally\r\n            createViewModel.call(context, {\r\n                type: 'action',\r\n                actionType: 'route',\r\n                options: {\r\n                    target: tab.route.target,\r\n                    params: merge(\r\n                        getCurrent().query,\r\n                        tabObj.tabDef.params,\r\n                        tab.route.params\r\n                    )\r\n                }\r\n            }).action();\r\n        }\r\n        return tabObj;\r\n    }\r\n\r\n    export default function (node, metadata) {\r\n        var context = this,\r\n            createViewModel = createViewModelUnbound.bind(context), //ensures context is passed\r\n            options = node.options || {},\r\n            mappedChildNodes,\r\n            activeTabRegion = observable({}),\r\n            initialized = false,\r\n            subs = [],\r\n            query = getCurrent().query,\r\n            tabs = [],\r\n            initialActiveTab;\r\n\r\n        // when tabs are selected update the tab route\r\n        // do not update tabroute on initialization, just replace\r\n        function setTabRoute(tabDef) {\r\n            var currentRoute = getCurrent().route + (getCurrent().path ? '/' + getCurrent().path : '' ),\r\n                query = getCurrent().query;\r\n            setRoute(tabDef.target || currentRoute, merge(query,tabDef.params), false, initialized);\r\n            initialized = true;\r\n        }\r\n\r\n        // zip the children tabs with the tab defs\r\n        node.children.forEach(function (tab, index) {\r\n            var tabTemplate = observable(), // can by dynamic because of ajax tabs\r\n                tabDef = typeof node.headers[index] === 'string' ? { text: node.headers[index] } : node.headers[index],\r\n                tabName = tabDef.computed ? computed(function () {\r\n                    return formatText(tabDef.text, context.getValue);\r\n                }) : tabDef.text,\r\n                tabObj = {\r\n                    tabName: tabName,\r\n                    tabDef: tabDef,\r\n                    tabTemplate: tabTemplate,\r\n                    keepCache: tab.cache || node.cache\r\n                },\r\n                tabViewModel;\r\n\r\n           // sets the active tab region to the tab template\r\n           // sets newRoute if defined, else sets tabRoute\r\n           tabObj.setActiveTab = function (newRoute) {\r\n               if (options.validations && options.validations[tabDef.text]) {\r\n                   notify(options.validations[tabDef.text], {\r\n                       successCallback: function() {\r\n                           activeTabRegion(tabTemplate());\r\n                           setTabRoute(newRoute || tabDef);\r\n                       }\r\n                   });\r\n               } else {\r\n                    activeTabRegion(tabTemplate());\r\n                    setTabRoute(newRoute || tabDef);\r\n               }\r\n           };\r\n\r\n           // tab is active when the active region is the template\r\n           tabObj.isActive = computed(function () {\r\n                return activeTabRegion() === tabTemplate();\r\n            });\r\n\r\n            // create tabViewModel from type if defined\r\n            // else call createViewModel\r\n            if (tabTypes[tab.type]) {\r\n                tabViewModel = tabTypes[tab.type].call(context, tabObj, tab)\r\n            } else {\r\n                tabViewModel = createViewModel(tab)\r\n                tabTemplate(template('metadata_item_template', tabViewModel));\r\n            }\r\n\r\n            extend(tabObj, tabViewModel);\r\n\r\n            // visible expression binding using context' getValue\r\n            if(has(tabDef.visible)) {\r\n                tabObj.visible = is(tabDef.visible, 'boolean') ?\r\n                    tabDef.visible\r\n                    : computed(function() {\r\n                        return evaluate(tabDef.visible, context.getValue || function (id) {\r\n                            console.error('Trying to evaluate a binding when getValue isnt specified on the context', tabObj);\r\n                        });\r\n                    });\r\n            } else {\r\n                tabObj.visible = true;\r\n            }\r\n\r\n            tabs.push(tabObj);\r\n\r\n            // sets the active tab if defined in the query or tabDef\r\n            if(tabDef.isActive || tabDef.params && query && objectContains(query, tabDef.params)) {\r\n                initialActiveTab = tabObj;\r\n            }\r\n        });\r\n\r\n        if (initialActiveTab) {\r\n            initialActiveTab.setActiveTab();\r\n        } else if (!activeTabRegion().template) {\r\n            // initialize to first tab if we havent routed to a specific tab\r\n            \r\n            // will set first visible tab to active tab\r\n            let initialTab = tabs.filter((tab) => {\r\n                return unwrap(tab.visible);\r\n            })[0];\r\n\r\n            initialTab && initialTab.setActiveTab();\r\n        }\r\n\r\n        // receive events to set active tab\r\n        if(node.id) {\r\n            subs.push(receive(node.id +'.setActiveTab', function (params) {\r\n                tabs.some(function(tab) {\r\n                    // if activeTab: 'x' is in both objects, set the active tab\r\n                    // and write this better..maybe use ids\r\n                    if(objectContains(params, tab.tabDef.params)) {\r\n                        tab.setActiveTab(merge(cloneDeep(tab.tabDef), { params: params }));\r\n                    }\r\n                });\r\n            }));\r\n\r\n            subs.push(receive(node.id+'.setNextTab', function () {\r\n                var currentIndex =  0,\r\n                    newIndex;\r\n\r\n                tabs.some(function(tab, index) {\r\n                    if (activeTabRegion() == tab.tabTemplate()) {\r\n                        currentIndex = index;\r\n                    }\r\n                })\r\n\r\n                while(newIndex === undefined) {\r\n                    if (!tabs[(currentIndex+1) % tabs.length].isChild) {\r\n                        newIndex = currentIndex +1;\r\n                    } else {\r\n                        currentIndex++\r\n                    }\r\n                }\r\n\r\n                tabs[newIndex].setActiveTab();\r\n            }));\r\n        }\r\n\r\n        return merge(node, {\r\n            tabs: tabs,\r\n            mappedChildNodes: tabs,\r\n            activeTabRegion: activeTabRegion,\r\n            context: this,\r\n            dispose: function () {\r\n                subs.forEach(function (sub) {\r\n                    sub.dispose();\r\n                });\r\n\r\n                tabs.forEach(function (tab) {\r\n                    var tabViewModels = tab.tabTemplate() && tab.tabTemplate().template.data;\r\n                    // why is tab viewmodels an array, anyway?\r\n                    if (tabViewModels && !Array.isArray(tabViewModels)) {\r\n                        tabViewModels = [tabViewModels];\r\n                    }\r\n                    (tabViewModels || []).forEach(function(vm) {\r\n                        vm && vm.dispose && vm.dispose();\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n"]}