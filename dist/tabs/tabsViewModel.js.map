{"version":3,"sources":["../../src/tabs/tabsViewModel.js"],"names":["node","metadata","context","createViewModel","bind","options","mappedChildNodes","activeTabRegion","initialized","subs","query","tabs","initialActiveTab","setTabRoute","tabDef","currentRoute","route","path","target","params","children","forEach","tab","index","tabTemplate","headers","text","tabName","computed","getValue","tabObj","keepCache","cache","tabViewModel","setActiveTab","newRoute","validations","successCallback","setRoute","isActive","tabTypes","type","call","visible","id","console","error","push","template","initialTab","filter","some","currentIndex","newIndex","undefined","length","isChild","dispose","sub","tabViewModels","data","Array","isArray","vm","ajax","lazy","disposeNodes","nodes","name","tabParams","get","uri","err","actionType","action"],"mappings":"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","file":"tabsViewModel.js","sourcesContent":["import { createViewModel, createViewModels, createViewModel as createViewModelUnbound } from 'scalejs.metadataFactory';\r\nimport { registerTemplates, registerBindings, template } from 'scalejs.mvvm';\r\nimport { observable, observableArray, computed, unwrap } from 'knockout';\r\nimport { getCurrent, setRoute } from 'scalejs.navigation';\r\nimport { receive, notify } from 'scalejs.messagebus';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { objectContains, formatText } from './tabUtils';\r\nimport { extend, cloneDeep } from 'lodash';\r\nimport { is, has, merge } from 'scalejs';\r\nimport dataservice from 'dataservice';\r\n\r\n    // tabsViewModel\r\n    // tabs displays clickable links that can be used to modify the contents of an active section\r\n    // there is one special tabType right now called ajax which will make a new ajax request when the tab is clicked\r\n    // otherwise the tab will be the mappedChildNodes\r\n    // todo: refactor tabObj/tabDef to be more clear?\r\n    var tabTypes = {\r\n        ajax: ajax,\r\n        route: route,\r\n        lazy: lazy\r\n    };\r\n\r\n    function disposeNodes(nodes) {\r\n        unwrap(nodes).forEach(node => {\r\n            node.dispose && node.dispose();\r\n            disposeNodes(node.mappedChildNodes || []);\r\n        });\r\n    }\r\n\r\n    function lazy(tabObj, tab) {\r\n        var mappedChildNodes = observableArray(),\r\n            setActiveTab = tabObj.setActiveTab,\r\n            tabTemplate = tabObj.tabTemplate,\r\n            context = this;\r\n\r\n        tabObj.mappedChildNodes = mappedChildNodes;\r\n\r\n        tabObj.setActiveTab = function (newRoute) {\r\n            if (!mappedChildNodes().length || !tabObj.keepCache) {\r\n                if (mappedChildNodes().length) {\r\n                    disposeNodes(mappedChildNodes());\r\n                }\r\n                mappedChildNodes(createViewModels.call(context, tab.children));\r\n                tabTemplate({\r\n                    template: {\r\n                        name: 'metadata_items_template',\r\n                        data: mappedChildNodes()\r\n                    },\r\n                    tabObj: tabObj\r\n                });\r\n                setActiveTab(newRoute);\r\n            } else {\r\n                setActiveTab(newRoute);\r\n            }\r\n        };\r\n\r\n        return tabObj;\r\n    }\r\n\r\n    function ajax(tabObj, tab) {\r\n        var tabParams = tab.options && tab.options.params,\r\n            setActiveTab = tabObj.setActiveTab,\r\n            tabTemplate = tabObj.tabTemplate,\r\n            mappedChildNodes = observableArray(),\r\n            context = this;\r\n\r\n        // update everything when mapped child nodes changes\r\n        tabObj.mappedChildNodes = mappedChildNodes;\r\n\r\n        // override tab setActiveTab so that new ajax request is made for first load\r\n        tabObj.setActiveTab = function(newRoute) {\r\n            if (!tabTemplate() || !tabObj.keepCache) {\r\n                if(tabTemplate()) {\r\n                    tabTemplate().template.data.forEach(function (node) {\r\n                        // todo - call dispose on mapped child nodes of each node\r\n                        if (node.dispose) {\r\n                            node.dispose();\r\n                        }\r\n                    });\r\n                }\r\n                dataservice.get({uri:tab.ajax}, function (err, metadata) {\r\n                    if (err) {\r\n                        console.error('there is an error',err);\r\n                    }\r\n\r\n                    try {\r\n                        mappedChildNodes(createViewModels.call(context, Array.isArray(metadata) ? metadata : [metadata]));\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n\r\n\r\n                    // need to pass tabObj to the activeTabRegion to be able to code dynamic logic in custom binding\r\n                    tabTemplate({\r\n                        template: {\r\n                            name: 'metadata_items_template',\r\n                            data: mappedChildNodes()\r\n                        },\r\n                        tabObj: tabObj\r\n                    });\r\n                    setActiveTab(newRoute);\r\n                });\r\n            } else {\r\n                setActiveTab(newRoute);\r\n            }\r\n        }\r\n        // todo refactor to pass params\r\n        if (tabParams) {\r\n            tab.ajax = getCurrent().query && getCurrent().query[tabParams] ? tab.ajax + getCurrent().query[tabParams] : tab.ajax;\r\n        }\r\n\r\n        return tabObj;\r\n    }\r\n\r\n    // tabObj - the ViewModel for the tab itself (not the contents)\r\n    // tab - the definition of the Tab contents\r\n    function route(tabObj, tab) {\r\n        var context = this; // want to pass context incase it has data\r\n\r\n        // override tab setActiveTab so that a route is performed\r\n        tabObj.setActiveTab = function () {\r\n            // merge the params from route with current query as not to overwrite it\r\n            // also merge with the tabObj.tabDef.params so that the tab initializes correctly\r\n            // for the objectContains check below, if the tabDef.params is part of the query it will use that tab as the initial tab\r\n            // so we need to make sure, that if we're setting a tabRoute, that the params of the last tab are overwriten with the params in the current tab\r\n            // so you dont get another route accidentally\r\n            createViewModel.call(context, {\r\n                type: 'action',\r\n                actionType: 'route',\r\n                options: {\r\n                    target: tab.route.target,\r\n                    params: merge(\r\n                        getCurrent().query,\r\n                        tabObj.tabDef.params,\r\n                        tab.route.params\r\n                    )\r\n                }\r\n            }).action();\r\n        }\r\n        return tabObj;\r\n    }\r\n\r\n    export default function (node, metadata) {\r\n        var context = this,\r\n            createViewModel = createViewModelUnbound.bind(context), //ensures context is passed\r\n            options = node.options || {},\r\n            mappedChildNodes,\r\n            activeTabRegion = observable({}),\r\n            initialized = false,\r\n            subs = [],\r\n            query = getCurrent().query,\r\n            tabs = [],\r\n            initialActiveTab;\r\n\r\n        // when tabs are selected update the tab route\r\n        // do not update tabroute on initialization, just replace\r\n        function setTabRoute(tabDef) {\r\n            var currentRoute = getCurrent().route + (getCurrent().path ? '/' + getCurrent().path : '' ),\r\n                query = getCurrent().query;\r\n            setRoute(tabDef.target || currentRoute, merge(query,tabDef.params), false, initialized);\r\n            initialized = true;\r\n        }\r\n\r\n        // zip the children tabs with the tab defs\r\n        node.children.forEach(function (tab, index) {\r\n            var tabTemplate = observable(), // can by dynamic because of ajax tabs\r\n                tabDef = typeof node.headers[index] === 'string' ? { text: node.headers[index] } : node.headers[index],\r\n                tabName = tabDef.computed ? computed(function () {\r\n                    return formatText(tabDef.text, context.getValue);\r\n                }) : tabDef.text,\r\n                tabObj = {\r\n                    tabName: tabName,\r\n                    tabDef: tabDef,\r\n                    tabTemplate: tabTemplate,\r\n                    keepCache: tab.cache || node.cache\r\n                },\r\n                tabViewModel;\r\n\r\n           // sets the active tab region to the tab template\r\n           // sets newRoute if defined, else sets tabRoute\r\n           tabObj.setActiveTab = function (newRoute) {\r\n               if (options.validations && options.validations[tabDef.text]) {\r\n                   notify(options.validations[tabDef.text], {\r\n                       successCallback: function() {\r\n                           activeTabRegion(tabTemplate());\r\n                           if (options.setRoute !== false) {\r\n                               setTabRoute(newRoute || tabDef);\r\n                           }\r\n                       }\r\n                   });\r\n               } else {\r\n                    activeTabRegion(tabTemplate());\r\n                    if (options.setRoute !== false) {\r\n                        setTabRoute(newRoute || tabDef);\r\n                    }\r\n               }\r\n           };\r\n\r\n           // tab is active when the active region is the template\r\n           tabObj.isActive = computed(function () {\r\n                return activeTabRegion() === tabTemplate();\r\n            });\r\n\r\n            // create tabViewModel from type if defined\r\n            // else call createViewModel\r\n            if (tabTypes[tab.type]) {\r\n                tabViewModel = tabTypes[tab.type].call(context, tabObj, tab)\r\n            } else {\r\n                tabViewModel = createViewModel(tab)\r\n                tabTemplate(template('metadata_item_template', tabViewModel));\r\n            }\r\n\r\n            extend(tabObj, tabViewModel);\r\n\r\n            // visible expression binding using context' getValue\r\n            if(has(tabDef.visible)) {\r\n                tabObj.visible = is(tabDef.visible, 'boolean') ?\r\n                    tabDef.visible\r\n                    : computed(function() {\r\n                        return evaluate(tabDef.visible, context.getValue || function (id) {\r\n                            console.error('Trying to evaluate a binding when getValue isnt specified on the context', tabObj);\r\n                        });\r\n                    });\r\n            } else {\r\n                tabObj.visible = true;\r\n            }\r\n\r\n            tabs.push(tabObj);\r\n\r\n            // sets the active tab if defined in the query or tabDef\r\n            if(tabDef.isActive || tabDef.params && query && objectContains(query, tabDef.params)) {\r\n                initialActiveTab = tabObj;\r\n            }\r\n        });\r\n\r\n        if (initialActiveTab) {\r\n            initialActiveTab.setActiveTab();\r\n        } else if (!activeTabRegion().template) {\r\n            // initialize to first tab if we havent routed to a specific tab\r\n\r\n            // will set first visible tab to active tab\r\n            let initialTab = tabs.filter((tab) => {\r\n                return unwrap(tab.visible);\r\n            })[0];\r\n\r\n            initialTab && initialTab.setActiveTab();\r\n        }\r\n\r\n        // receive events to set active tab\r\n        if(node.id) {\r\n            subs.push(receive(node.id +'.setActiveTab', function (params) {\r\n                tabs.some(function(tab) {\r\n                    // if activeTab: 'x' is in both objects, set the active tab\r\n                    // and write this better..maybe use ids\r\n                    if(objectContains(params, tab.tabDef.params)) {\r\n                        tab.setActiveTab(merge(cloneDeep(tab.tabDef), { params: params }));\r\n                    }\r\n                });\r\n            }));\r\n\r\n            subs.push(receive(node.id+'.setNextTab', function () {\r\n                var currentIndex =  0,\r\n                    newIndex;\r\n\r\n                tabs.some(function(tab, index) {\r\n                    if (activeTabRegion() == tab.tabTemplate()) {\r\n                        currentIndex = index;\r\n                    }\r\n                })\r\n\r\n                while(newIndex === undefined) {\r\n                    if (!tabs[(currentIndex+1) % tabs.length].isChild) {\r\n                        newIndex = currentIndex +1;\r\n                    } else {\r\n                        currentIndex++\r\n                    }\r\n                }\r\n\r\n                tabs[newIndex].setActiveTab();\r\n            }));\r\n        }\r\n\r\n        return merge(node, {\r\n            tabs: tabs,\r\n            mappedChildNodes: tabs,\r\n            activeTabRegion: activeTabRegion,\r\n            context: this,\r\n            dispose: function () {\r\n                subs.forEach(function (sub) {\r\n                    sub.dispose();\r\n                });\r\n\r\n                tabs.forEach(function (tab) {\r\n                    var tabViewModels = tab.tabTemplate() && tab.tabTemplate().template.data;\r\n                    // why is tab viewmodels an array, anyway?\r\n                    if (tabViewModels && !Array.isArray(tabViewModels)) {\r\n                        tabViewModels = [tabViewModels];\r\n                    }\r\n                    (tabViewModels || []).forEach(function(vm) {\r\n                        vm && vm.dispose && vm.dispose();\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n"]}