{"version":3,"sources":["../../src/listAdvanced/listAdvancedBindings.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;;;;;AACI,SAAS,MAAT,CAAiB,GAAjB,EAAsB;AAClB,QAAI,KAAJ,CAAU,SAAV,GAAsB,gBAAc,KAAK,SAAnB,GAA6B,KAAnD;AACH;;kBAEc;AACX,0BAAsB,4BAAY;AAC9B,eAAO;AACH,iBAAK,KAAK,WADP;AAEH,kBAAM;AACF,yBAAS,KAAK,OAAL,IAAgB;AADvB;AAFH,SAAP;AAMH,KARU;AASX,kCAA8B,iCAAU,GAAV,EAAe;AACzC,YAAI,WAAW,KAAK,QAApB;AAAA,YACI,UAAU,IAAI,OAAJ,CAAY,OAAZ,IAAuB,EADrC;AAAA,YAEI,WAAW,QAAQ,QAAR,GAAmB,QAAQ,QAAR,EAAnB,GAAwC,KAFvD;;AAIA,eAAO;AACH,iBAAK;AACD,6BAAa,cAAc,CAAC;AAD3B,aADF;AAIH,mBAAO,iBAAY;AACf,yBAAS,IAAT;AACA,uBAAO,IAAP;AACH,aAPE;AAQH,sBAAU;AACN,0BAAU,CAAC,iBAAD,CADJ;AAEN,yBAAS,mBAAY;AACjB,6BAAS,KAAT;AACH;AAJK;AARP,SAAP;AAeH,KA7BU;AA8BX,mCAA+B,kCAAU,GAAV,EAAe;AAC1C,YAAI,QAAQ,IAAI,OAAhB;AAAA,YACI,gBAAgB,IAAI,QAAJ,CAAa,CAAb,CADpB;AAAA,YAEI,eAAe,iBAAE,SAAF,CAAY,cAAc,YAA1B,CAFnB;AAAA,YAGI,qBAHJ;;AAKA,YAAI,CAAC,YAAL,EAAmB;AACf;AACH;;AAED,gCAAwB,0BAAiB,IAAjB,CAAsB;AAC1C,sBAAU,EADgC;AAE1C,sBAAU,kBAAU,EAAV,EAAc;AACpB,oBAAI,OAAO,OAAX,EAAoB;AAChB,2BAAO,KAAP;AACH;AACD,uBAAO,cAAc,OAAd,CAAsB,QAAtB,CAA+B,EAA/B,CAAP;AACH;AAPyC,SAAtB,EAQrB,YARqB,CAAxB;;AAWA,eAAO;AACH,sBAAU;AACN,sBAAM,yBADA;AAEN,sBAAM;AAFA;AADP,SAAP;AAMH,KAzDU;AA0DX,sCAAkC,oCAAU,GAAV,EAAe;AAC7C,YAAI,aAAa,KAAjB;AAAA,YACI,oBAAoB,OAAO,IAAI,KAAX,IAAoB,CAD5C;;AAGA,qBAAa,OAAO,IAAP,CAAY,IAAI,OAAJ,CAAY,MAAZ,EAAZ,EACR,GADQ,CACJ,UAAU,QAAV,EAAoB;AACrB,mBAAO,IAAI,OAAJ,CAAY,MAAZ,GAAqB,QAArB,CAAP;AACH,SAHQ,EAIR,KAJQ,CAIF,CAJE,EAIC,oBAAmB,CAJpB,EAKR,MALQ,CAKD,UAAU,iBAAV,EAA6B,KAA7B,EAAoC,KAApC,EAA2C;AAC/C,gBAAI,GAAJ;AAAA,gBACI,gBAAgB,IAAI,OAAJ,CAAY,MAAZ,GAAqB,MAAM,QAAN,EAArB,CADpB;;AAGA,gBAAG,CAAC,aAAJ,EAAmB;AACf,uBAAO,KAAP;AACH;;AAED,gBAAI,CAAC,cAAc,MAAd,IAAwB,oBAAoB,CAApB,GAAwB,CAAhD,CAAD,IAAuD,CAAvD,KAA6D,CAAjE,EAAoE;AAChE,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAP;AACH;AACJ,SAlBQ,EAkBN,KAlBM,CAAb;;AAoBA,eAAO;AACH,gBAAI;AADD,SAAP;AAGH;AArFU,C","file":"listAdvancedBindings.js","sourcesContent":["import { createViewModels } from 'scalejs.metadataFactory';\nimport _ from 'lodash';\n    function sticky( _el ){\n        _el.style.transform = \"translateY(\"+this.scrollTop+\"px)\";\n    }\n\n    export default {\n        'list-advanced-cell': function () {\n            return {\n                css: this.cellClasses,\n                attr: {\n                    colspan: this.colspan || 1\n                }\n            };\n        },\n        'list-advanced-row-editable': function (ctx) {\n            var editMode = this.editMode,\n                context = ctx.$parent.context || {},\n                readonly = context.readonly ? context.readonly() : false;\n\n            return {\n                css: {\n                    'edit-mode': editMode() && !readonly\n                },\n                click: function () {\n                    editMode(true);\n                    return true;\n                },\n                clickOff: {\n                    excludes: ['ui-autocomplete'],\n                    handler: function () {\n                        editMode(false);\n                    }\n                }\n            }\n        },\n        'list-advanced-group-actions': function (ctx) {\n            var group = ctx.$parent,\n                listViewModel = ctx.$parents[1],\n                groupActions = _.cloneDeep(listViewModel.groupActions),\n                groupActionViewModels;\n\n            if (!groupActions) {\n                return;\n            }\n\n            groupActionViewModels = createViewModels.call({\n                metadata: [],\n                getValue: function (id) {\n                    if (id === 'group') {\n                        return group;\n                    }\n                    return listViewModel.context.getValue(id);\n                }\n            }, groupActions);\n\n\n            return {\n                template: {\n                    name: 'metadata_items_template',\n                    data: groupActionViewModels\n                }\n            };\n        },\n        'list-advanced-group-row-spacer': function (ctx) {\n            var showSpacer = false,\n                currentGroupIndex = Number(ctx.$data) - 1;\n\n            showSpacer = Object.keys(ctx.$parent.groups())\n                .map(function (groupKey) {\n                    return ctx.$parent.groups()[groupKey];\n                })\n                .slice(0, currentGroupIndex +1)\n                .reduce(function (previousHasSpacer, group, index) {\n                    var ret,\n                        previousGroup = ctx.$parent.groups()[index.toString()];\n\n                    if(!previousGroup) {\n                        return false;\n                    }\n\n                    if ((previousGroup.length + (previousHasSpacer ? 1 : 0)) % 2 !== 0) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }, false);\n\n            return {\n                if: showSpacer\n            };\n        }\n    };\n"]}