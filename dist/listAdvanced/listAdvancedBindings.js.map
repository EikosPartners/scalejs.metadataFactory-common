{"version":3,"sources":["../../src/listAdvanced/listAdvancedBindings.js"],"names":["sticky","_el","style","transform","scrollTop","css","cellClasses","attr","colspan","ctx","editMode","context","$parent","readonly","click","clickOff","excludes","handler","group","listViewModel","$parents","groupActions","cloneDeep","groupActionViewModels","call","metadata","getValue","id","template","name","data","showSpacer","currentGroupIndex","Number","$data","Object","keys","groups","map","groupKey","slice","reduce","previousHasSpacer","index","ret","previousGroup","toString","length","if"],"mappings":";;;;;;AAAA;;AACA;;;;;;AACI,SAASA,MAAT,CAAiBC,GAAjB,EAAsB;AAClBA,QAAIC,KAAJ,CAAUC,SAAV,GAAsB,gBAAc,KAAKC,SAAnB,GAA6B,KAAnD;AACH;;kBAEc;AACX,0BAAsB,4BAAY;AAC9B,eAAO;AACHC,iBAAK,KAAKC,WADP;AAEHC,kBAAM;AACFC,yBAAS,KAAKA,OAAL,IAAgB;AADvB;AAFH,SAAP;AAMH,KARU;AASX,kCAA8B,iCAAUC,GAAV,EAAe;AACzC,YAAIC,WAAW,KAAKA,QAApB;AAAA,YACIC,UAAUF,IAAIG,OAAJ,CAAYD,OAAZ,IAAuB,EADrC;AAAA,YAEIE,WAAWF,QAAQE,QAAR,GAAmBF,QAAQE,QAAR,EAAnB,GAAwC,KAFvD;;AAIA,eAAO;AACHR,iBAAK;AACD,6BAAaK,cAAc,CAACG;AAD3B,aADF;AAIHC,mBAAO,iBAAY;AACfJ,yBAAS,IAAT;AACA,uBAAO,IAAP;AACH,aAPE;AAQHK,sBAAU;AACNC,0BAAU,CAAC,iBAAD,CADJ;AAENC,yBAAS,mBAAY;AACjBP,6BAAS,KAAT;AACH;AAJK;AARP,SAAP;AAeH,KA7BU;AA8BX,mCAA+B,kCAAUD,GAAV,EAAe;AAC1C,YAAIS,QAAQT,IAAIG,OAAhB;AAAA,YACIO,gBAAgBV,IAAIW,QAAJ,CAAa,CAAb,CADpB;AAAA,YAEIC,eAAe,iBAAEC,SAAF,CAAYH,cAAcE,YAA1B,CAFnB;AAAA,YAGIE,qBAHJ;;AAKA,YAAI,CAACF,YAAL,EAAmB;AACf;AACH;;AAEDE,gCAAwB,0BAAiBC,IAAjB,CAAsB;AAC1CC,sBAAU,EADgC;AAE1CC,sBAAU,kBAAUC,EAAV,EAAc;AACpB,oBAAIA,OAAO,OAAX,EAAoB;AAChB,2BAAOT,KAAP;AACH;AACD,uBAAOC,cAAcR,OAAd,CAAsBe,QAAtB,CAA+BC,EAA/B,CAAP;AACH;AAPyC,SAAtB,EAQrBN,YARqB,CAAxB;;AAWA,eAAO;AACHO,sBAAU;AACNC,sBAAM,yBADA;AAENC,sBAAMP;AAFA;AADP,SAAP;AAMH,KAzDU;AA0DX,sCAAkC,oCAAUd,GAAV,EAAe;AAC7C,YAAIsB,aAAa,KAAjB;AAAA,YACIC,oBAAoBC,OAAOxB,IAAIyB,KAAX,IAAoB,CAD5C;;AAGAH,qBAAaI,OAAOC,IAAP,CAAY3B,IAAIG,OAAJ,CAAYyB,MAAZ,EAAZ,EACRC,GADQ,CACJ,UAAUC,QAAV,EAAoB;AACrB,mBAAO9B,IAAIG,OAAJ,CAAYyB,MAAZ,GAAqBE,QAArB,CAAP;AACH,SAHQ,EAIRC,KAJQ,CAIF,CAJE,EAICR,oBAAmB,CAJpB,EAKRS,MALQ,CAKD,UAAUC,iBAAV,EAA6BxB,KAA7B,EAAoCyB,KAApC,EAA2C;AAC/C,gBAAIC,GAAJ;AAAA,gBACIC,gBAAgBpC,IAAIG,OAAJ,CAAYyB,MAAZ,GAAqBM,MAAMG,QAAN,EAArB,CADpB;;AAGA,gBAAG,CAACD,aAAJ,EAAmB;AACf,uBAAO,KAAP;AACH;;AAED,gBAAI,CAACA,cAAcE,MAAd,IAAwBL,oBAAoB,CAApB,GAAwB,CAAhD,CAAD,IAAuD,CAAvD,KAA6D,CAAjE,EAAoE;AAChE,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAP;AACH;AACJ,SAlBQ,EAkBN,KAlBM,CAAb;;AAoBA,eAAO;AACHM,gBAAIjB;AADD,SAAP;AAGH;AArFU,C","file":"listAdvancedBindings.js","sourcesContent":["import { createViewModels } from 'scalejs.metadataFactory';\nimport _ from 'lodash';\n    function sticky( _el ){\n        _el.style.transform = \"translateY(\"+this.scrollTop+\"px)\";\n    }\n\n    export default {\n        'list-advanced-cell': function () {\n            return {\n                css: this.cellClasses,\n                attr: {\n                    colspan: this.colspan || 1\n                }\n            };\n        },\n        'list-advanced-row-editable': function (ctx) {\n            var editMode = this.editMode,\n                context = ctx.$parent.context || {},\n                readonly = context.readonly ? context.readonly() : false;\n\n            return {\n                css: {\n                    'edit-mode': editMode() && !readonly\n                },\n                click: function () {\n                    editMode(true);\n                    return true;\n                },\n                clickOff: {\n                    excludes: ['ui-autocomplete'],\n                    handler: function () {\n                        editMode(false);\n                    }\n                }\n            }\n        },\n        'list-advanced-group-actions': function (ctx) {\n            var group = ctx.$parent,\n                listViewModel = ctx.$parents[1],\n                groupActions = _.cloneDeep(listViewModel.groupActions),\n                groupActionViewModels;\n\n            if (!groupActions) {\n                return;\n            }\n\n            groupActionViewModels = createViewModels.call({\n                metadata: [],\n                getValue: function (id) {\n                    if (id === 'group') {\n                        return group;\n                    }\n                    return listViewModel.context.getValue(id);\n                }\n            }, groupActions);\n\n\n            return {\n                template: {\n                    name: 'metadata_items_template',\n                    data: groupActionViewModels\n                }\n            };\n        },\n        'list-advanced-group-row-spacer': function (ctx) {\n            var showSpacer = false,\n                currentGroupIndex = Number(ctx.$data) - 1;\n\n            showSpacer = Object.keys(ctx.$parent.groups())\n                .map(function (groupKey) {\n                    return ctx.$parent.groups()[groupKey];\n                })\n                .slice(0, currentGroupIndex +1)\n                .reduce(function (previousHasSpacer, group, index) {\n                    var ret,\n                        previousGroup = ctx.$parent.groups()[index.toString()];\n\n                    if(!previousGroup) {\n                        return false;\n                    }\n\n                    if ((previousGroup.length + (previousHasSpacer ? 1 : 0)) % 2 !== 0) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }, false);\n\n            return {\n                if: showSpacer\n            };\n        }\n    };\n"]}