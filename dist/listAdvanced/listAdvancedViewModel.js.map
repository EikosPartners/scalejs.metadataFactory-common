{"version":3,"sources":["../../src/listAdvanced/listAdvancedViewModel.js"],"names":[],"mappings":"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","file":"listAdvancedViewModel.js","sourcesContent":["import { computed, unwrap, observable, observableArray, pureComputed } from 'knockout';\r\nimport { createViewModel as createViewModelUnbound } from 'scalejs.metadataFactory';\r\nimport { evaluate } from 'scalejs.expression-jsep';\r\nimport { notify } from 'scalejs.messagebus';\r\nimport { is, has, merge } from 'scalejs';\r\n\r\n    // the list advanced component provides advanced features over the base list\r\n    // - Headers (TBD) and Footers (partially done)\r\n    // - ListItems such as ADD and EMPTY\r\n    // - GroupBy\r\n    let listItems = {\r\n            ADD: add,\r\n            EMPTY: empty,\r\n            TEXT: text,\r\n            TOTAL: total\r\n        };\r\n\r\n    // creates the Add ViewModel from the add def\r\n    function add(addDef, list) {\r\n        return merge({\r\n            template: 'list_advanced_add_item_template',\r\n            text: 'Add',\r\n            add: function () {\r\n                var lastRow = list.lastRow(),\r\n                    initialItems = {};\r\n\r\n                // autpopulate\r\n                // an array containing the items which should be autopopulated with the last row's values\r\n                if (addDef.autopopulate) {\r\n                    addDef.autopopulate.forEach(function (prop) {\r\n                        var lastProp = lastRow.itemDictionary()[prop];\r\n                        initialItems[prop] = lastProp.getValue();\r\n                    });\r\n                }\r\n\r\n                // increment\r\n                // a string indicating which property to incremement upon add\r\n                if (addDef.increment) {\r\n                    (Array.isArray(addDef.increment) ? addDef.increment : [addDef.increment]).forEach(function(prop) {\r\n                        initialItems[prop] = Number(lastRow.itemDictionary()[prop].getValue())+1;\r\n                    });\r\n                }\r\n\r\n                // defaults\r\n                // sets the value of an item to a default value\r\n                if (addDef.defaults) {\r\n                    Object.keys(addDef.defaults).forEach(function(key) {\r\n                        initialItems[key] = addDef.defaults[key]\r\n                    });\r\n                }\r\n\r\n                // creates new item in list\r\n                list.add(initialItems);\r\n            }\r\n        }, addDef)\r\n    }\r\n\r\n    // creates an empty space in table\r\n    function empty(emptyDef, base) {\r\n        return merge({\r\n            template: 'list_advanced_empty_item_template',\r\n            cellClasses: 'empty'\r\n        }, emptyDef);\r\n    }\r\n\r\n    function text(textDef, base) {\r\n        return merge({\r\n            template: 'list_advanced_text_item_template'\r\n        }, textDef)\r\n    }\r\n\r\n    function total(totalDef, list) {\r\n        // create a input vm\r\n        var totalJson = {\r\n                id: totalDef.id,\r\n                type: 'input',\r\n                inputType: 'text',\r\n                label: 'Total',\r\n                cellClasses: totalDef.cellClasses,\r\n                options: merge({\r\n                    readonly: true\r\n                }, totalDef.options)\r\n            },\r\n            // use input view model for instant formatting/validation\r\n            totalViewModel = createViewModelUnbound.call(this, totalJson),\r\n            total = computed(function () {\r\n                return list.rows().reduce(function (sum, row) {\r\n                    return sum + Number(row[totalDef.field]() || 0) // get the value for field\r\n                }, 0)\r\n            });\r\n\r\n        total.subscribe(function (sum) {\r\n            totalViewModel.setValue(sum.toFixed(2));\r\n        });\r\n\r\n        // adding totals to the dictionary from the context\r\n        if (totalDef.id) {\r\n            this.dictionary()[totalDef.id] = totalViewModel;\r\n            //this.dictionary.valueHasMutated();\r\n        }\r\n\r\n        return totalViewModel;\r\n    }\r\n\r\n    export default function (node) {\r\n        var createViewModel = createViewModelUnbound.bind(this),\r\n            context = this,\r\n            itemDictionary = observable({}),\r\n            listViewModel = createViewModel(merge({ id: node.id }, node.list)), // pass along id\r\n            headers = (node.headers || []).map(function (header) {\r\n                return {\r\n                    items: header.items.map(function (item) {\r\n                        if (listItems[item.type]) {\r\n                            return listItems[item.type].call(this, item, listViewModel);\r\n                        }\r\n                    })\r\n                }\r\n            }),\r\n            headerItems = (node.list.items || []).map(function (header) {\r\n                var classes = [];\r\n\r\n                if (header.id) {\r\n                    classes.push(header.id);\r\n                }\r\n                if (header.headerClasses) {\r\n                    classes.push(header.headerClasses);\r\n                }\r\n                return {\r\n                    text: header.label,\r\n                    classes: classes.join(' '),\r\n                    hidden: header.hidden\r\n                };\r\n            }),\r\n            footers = (node.footers || []).map(function (footer) {\r\n                var items, visible = true;\r\n\r\n                // maps footer item defs\r\n                items = footer.items.map(function (item) {\r\n                    if (listItems[item.type]) {\r\n                        return listItems[item.type].call(context, item, listViewModel);\r\n                    } else {\r\n                        return createViewModelUnbound.call({\r\n                            metadata: context.metadata,\r\n                            getValue: function (id) {\r\n                                var item = itemDictionary()[id];\r\n                                if (item && item.getValue) {\r\n                                    return item.getValue();\r\n                                }\r\n                                return context.getValue(id);\r\n                            }\r\n                        }, item)\r\n                    }\r\n                });\r\n\r\n                items.forEach(function (item) {\r\n                    if (item.id) {\r\n                        // add to dictionary for accessibility from expressions\r\n                        itemDictionary()[item.id] = item;\r\n                        itemDictionary.valueHasMutated();\r\n                    }\r\n                })\r\n\r\n                // creates expression binding for visible\r\n                if (has(footer.visible)) {\r\n                    visible = is(footer.visible, 'boolean') ? footer.visible : pureComputed(function() {\r\n                        return evaluate(footer.visible, function (id) {\r\n                            if (id === 'list') {\r\n                                return listViewModel.rows() || []\r\n                            }\r\n\r\n                            if (id === 'dict') {\r\n                                return itemDictionary();\r\n                            }\r\n\r\n                            if (id === 'readonly') {\r\n                                return context.readonly()\r\n                            }\r\n\r\n                            var item = itemDictionary()[id];\r\n                            if (item) {\r\n                                return item;\r\n                            }\r\n                            console.log(id);\r\n                            // returning empty string within string as catch all for evaluate function\r\n                            return '\"\"';\r\n                        });\r\n                    });\r\n                }\r\n\r\n                return  merge(footer, {\r\n                    items: items,\r\n                    visible: visible\r\n                });\r\n            }),\r\n            groups,\r\n            visibleRows = observableArray(),\r\n            viewmodel,\r\n            showInfinite;\r\n\r\n       // Updates rows within the list with additional properties in regards to their group\r\n       // all subscribers are notified\r\n       function updateRowsWithGroupValues(groupDict) {\r\n            Object.keys(groupDict).forEach(function(group) {\r\n                var groupArray = groupDict[group];\r\n                groupArray.forEach(function(row, index) {\r\n                    row.itemDictionary().group = groupArray;\r\n                    row.itemDictionary().groupIndex =index;\r\n                    row.itemDictionary.valueHasMutated();\r\n                })\r\n            });\r\n       }\r\n\r\n       // will group the nodes based on groupby prop\r\n       if (node.groupBy) {\r\n           groups = computed(function () {\r\n               var groupDict = {};\r\n               listViewModel.rows().forEach(function(row) {\r\n                   var group = unwrap(row[node.groupBy]);\r\n                   groupDict[group] = groupDict[group] || [];\r\n                   groupDict[group].push(row);\r\n               });\r\n               return groupDict;\r\n           });\r\n           // update rows\r\n           groups.subscribe(updateRowsWithGroupValues);\r\n           updateRowsWithGroupValues(groups());\r\n       }\r\n\r\n       if(listViewModel.infinite) {\r\n           //the listViewModel is managing its rows to account for infinite scroll\r\n           //the listAdvanced will show only up to 25 rows and show the infinitely scrolling list in a popup\r\n\r\n            visibleRows((listViewModel.allRows() || []).slice(0,20));\r\n            listViewModel.allRows.subscribe(function (newRows) {\r\n                visibleRows((newRows ||[]).slice(0,20));\r\n            });\r\n\r\n            showInfinite = function () {\r\n                listViewModel.rows(listViewModel.rows().slice(0,20));\r\n                notify('showPopup', merge(viewmodel, {\r\n                    template: 'listAdvanced_infinite_template',\r\n                    disableHasFocus: true\r\n                }));\r\n            }\r\n       }\r\n\r\n        viewmodel = merge(node, {\r\n            setReadonly: listViewModel.setReadonly,\r\n            getValue: listViewModel.getValue,\r\n            setValue: listViewModel.setValue,\r\n            headers: headers,\r\n            headerItems: headerItems,\r\n            footers: footers,\r\n            groups: groups,\r\n            list: listViewModel,\r\n            rows: listViewModel.infinite ? visibleRows : listViewModel.rows,\r\n            showInfinite: showInfinite,\r\n            showRemove: listViewModel.showRemove,\r\n            deleteRows: listViewModel.deleteRows,\r\n            itemDictionary: itemDictionary,\r\n            mappedChildNodes: listViewModel.mappedChildNodes, //for automatic stuff\r\n            context: this //for the bindings to access context\r\n        });\r\n        return viewmodel;\r\n    };\r\n"]}