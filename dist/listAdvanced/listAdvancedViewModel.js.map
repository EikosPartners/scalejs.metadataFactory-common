{"version":3,"sources":["../../src/listAdvanced/listAdvancedViewModel.js"],"names":["node","createViewModel","createViewModelUnbound","bind","context","itemDictionary","listViewModel","id","list","headers","map","header","items","item","listItems","type","call","headerItems","classes","push","headerClasses","text","label","join","hidden","footers","footer","visible","metadata","getValue","forEach","valueHasMutated","rows","readonly","console","log","groups","visibleRows","viewmodel","showInfinite","updateRowsWithGroupValues","groupDict","Object","keys","group","groupArray","row","index","groupIndex","groupBy","subscribe","infinite","allRows","slice","newRows","template","disableHasFocus","setReadonly","setValue","showRemove","deleteRows","mappedChildNodes","ADD","add","EMPTY","empty","TEXT","TOTAL","total","addDef","lastRow","initialItems","autopopulate","prop","lastProp","increment","Array","isArray","Number","defaults","key","emptyDef","base","cellClasses","textDef","totalDef","totalJson","inputType","options","totalViewModel","reduce","sum","field","toFixed","dictionary"],"mappings":"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","file":"listAdvancedViewModel.js","sourcesContent":["import { computed, unwrap, observable, observableArray, pureComputed } from 'knockout';\nimport { createViewModel as createViewModelUnbound } from 'scalejs.metadataFactory';\nimport { evaluate } from 'scalejs.expression-jsep';\nimport { notify } from 'scalejs.messagebus';\nimport { is, has, merge } from 'scalejs';\n\n    // the list advanced component provides advanced features over the base list\n    // - Headers (TBD) and Footers (partially done)\n    // - ListItems such as ADD and EMPTY\n    // - GroupBy\n    let listItems = {\n            ADD: add,\n            EMPTY: empty,\n            TEXT: text,\n            TOTAL: total\n        };\n\n    // creates the Add ViewModel from the add def\n    function add(addDef, list) {\n        return merge({\n            template: 'list_advanced_add_item_template',\n            text: 'Add',\n            add: function () {\n                var lastRow = list.lastRow(),\n                    initialItems = {};\n\n                // autpopulate\n                // an array containing the items which should be autopopulated with the last row's values\n                if (addDef.autopopulate) {\n                    addDef.autopopulate.forEach(function (prop) {\n                        var lastProp = lastRow.itemDictionary()[prop];\n                        initialItems[prop] = lastProp.getValue();\n                    });\n                }\n\n                // increment\n                // a string indicating which property to incremement upon add\n                if (addDef.increment) {\n                    (Array.isArray(addDef.increment) ? addDef.increment : [addDef.increment]).forEach(function(prop) {\n                        initialItems[prop] = Number(lastRow.itemDictionary()[prop].getValue())+1;\n                    });\n                }\n\n                // defaults\n                // sets the value of an item to a default value\n                if (addDef.defaults) {\n                    Object.keys(addDef.defaults).forEach(function(key) {\n                        initialItems[key] = addDef.defaults[key]\n                    });\n                }\n\n                // creates new item in list\n                list.add(initialItems);\n            }\n        }, addDef)\n    }\n\n    // creates an empty space in table\n    function empty(emptyDef, base) {\n        return merge({\n            template: 'list_advanced_empty_item_template',\n            cellClasses: 'empty'\n        }, emptyDef);\n    }\n\n    function text(textDef, base) {\n        return merge({\n            template: 'list_advanced_text_item_template'\n        }, textDef)\n    }\n\n    function total(totalDef, list) {\n        // create a input vm\n        var totalJson = {\n                id: totalDef.id,\n                type: 'input',\n                inputType: 'text',\n                label: 'Total',\n                cellClasses: totalDef.cellClasses,\n                options: merge({\n                    readonly: true\n                }, totalDef.options)\n            },\n            // use input view model for instant formatting/validation\n            totalViewModel = createViewModelUnbound.call(this, totalJson),\n            total = computed(function () {\n                return list.rows().reduce(function (sum, row) {\n                    return sum + Number(row[totalDef.field]() || 0) // get the value for field\n                }, 0)\n            });\n\n        total.subscribe(function (sum) {\n            totalViewModel.setValue(sum.toFixed(2));\n        });\n\n        // adding totals to the dictionary from the context\n        if (totalDef.id) {\n            this.dictionary()[totalDef.id] = totalViewModel;\n            //this.dictionary.valueHasMutated();\n        }\n\n        return totalViewModel;\n    }\n\n    export default function (node) {\n        var createViewModel = createViewModelUnbound.bind(this),\n            context = this,\n            itemDictionary = observable({}),\n            listViewModel = createViewModel(merge({ id: node.id }, node.list)), // pass along id\n            headers = (node.headers || []).map(function (header) {\n                return {\n                    items: header.items.map(function (item) {\n                        if (listItems[item.type]) {\n                            return listItems[item.type].call(this, item, listViewModel);\n                        }\n                    })\n                }\n            }),\n            headerItems = (node.list.items || []).map(function (header) {\n                var classes = [];\n\n                if (header.id) {\n                    classes.push(header.id);\n                }\n                if (header.headerClasses) {\n                    classes.push(header.headerClasses);\n                }\n                return {\n                    text: header.label,\n                    classes: classes.join(' '),\n                    hidden: header.hidden\n                };\n            }),\n            footers = (node.footers || []).map(function (footer) {\n                var items, visible = true;\n\n                // maps footer item defs\n                items = footer.items.map(function (item) {\n                    if (listItems[item.type]) {\n                        return listItems[item.type].call(context, item, listViewModel);\n                    } else {\n                        return createViewModelUnbound.call({\n                            metadata: context.metadata,\n                            getValue: function (id) {\n                                var item = itemDictionary()[id];\n                                if (item && item.getValue) {\n                                    return item.getValue();\n                                }\n                                return context.getValue(id);\n                            }\n                        }, item)\n                    }\n                });\n\n                items.forEach(function (item) {\n                    if (item.id) {\n                        // add to dictionary for accessibility from expressions\n                        itemDictionary()[item.id] = item;\n                        itemDictionary.valueHasMutated();\n                    }\n                })\n\n                // creates expression binding for visible\n                if (has(footer.visible)) {\n                    visible = is(footer.visible, 'boolean') ? footer.visible : pureComputed(function() {\n                        return evaluate(footer.visible, function (id) {\n                            if (id === 'list') {\n                                return listViewModel.rows() || []\n                            }\n\n                            if (id === 'dict') {\n                                return itemDictionary();\n                            }\n\n                            if (id === 'readonly') {\n                                return context.readonly()\n                            }\n\n                            var item = itemDictionary()[id];\n                            if (item) {\n                                return item;\n                            }\n                            console.log(id);\n                            // returning empty string within string as catch all for evaluate function\n                            return '\"\"';\n                        });\n                    });\n                }\n\n                return  merge(footer, {\n                    items: items,\n                    visible: visible\n                });\n            }),\n            groups,\n            visibleRows = observableArray(),\n            viewmodel,\n            showInfinite;\n\n       // Updates rows within the list with additional properties in regards to their group\n       // all subscribers are notified\n       function updateRowsWithGroupValues(groupDict) {\n            Object.keys(groupDict).forEach(function(group) {\n                var groupArray = groupDict[group];\n                groupArray.forEach(function(row, index) {\n                    row.itemDictionary().group = groupArray;\n                    row.itemDictionary().groupIndex =index;\n                    row.itemDictionary.valueHasMutated();\n                })\n            });\n       }\n\n       // will group the nodes based on groupby prop\n       if (node.groupBy) {\n           groups = computed(function () {\n               var groupDict = {};\n               listViewModel.rows().forEach(function(row) {\n                   var group = unwrap(row[node.groupBy]);\n                   groupDict[group] = groupDict[group] || [];\n                   groupDict[group].push(row);\n               });\n               return groupDict;\n           });\n           // update rows\n           groups.subscribe(updateRowsWithGroupValues);\n           updateRowsWithGroupValues(groups());\n       }\n\n       if(listViewModel.infinite) {\n           //the listViewModel is managing its rows to account for infinite scroll\n           //the listAdvanced will show only up to 25 rows and show the infinitely scrolling list in a popup\n\n            visibleRows((listViewModel.allRows() || []).slice(0,20));\n            listViewModel.allRows.subscribe(function (newRows) {\n                visibleRows((newRows ||[]).slice(0,20));\n            });\n\n            showInfinite = function () {\n                listViewModel.rows(listViewModel.rows().slice(0,20));\n                notify('showPopup', merge(viewmodel, {\n                    template: 'listAdvanced_infinite_template',\n                    disableHasFocus: true\n                }));\n            }\n       }\n\n        viewmodel = merge(node, {\n            setReadonly: listViewModel.setReadonly,\n            getValue: listViewModel.getValue,\n            setValue: listViewModel.setValue,\n            headers: headers,\n            headerItems: headerItems,\n            footers: footers,\n            groups: groups,\n            list: listViewModel,\n            rows: listViewModel.infinite ? visibleRows : listViewModel.rows,\n            showInfinite: showInfinite,\n            showRemove: listViewModel.showRemove,\n            deleteRows: listViewModel.deleteRows,\n            itemDictionary: itemDictionary,\n            mappedChildNodes: listViewModel.mappedChildNodes, //for automatic stuff\n            context: this //for the bindings to access context\n        });\n        return viewmodel;\n    };\n"]}