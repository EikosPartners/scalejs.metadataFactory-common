{"version":3,"sources":["../../src/template/templateViewModel.js"],"names":["templateViewModel","node","data","hasOwnProperty","context","options","createContext","metadata","createViewModel","createViewModelUnbound","bind","createViewModels","createViewModelsUnbound","registeredTemplates","dataSourceEndpoint","isShown","visible","actionNode","action","dataLoaded","mappedChildNodes","fetchData","cache","callback","err","results","console","log","template","error","children","type","lazyLoad"],"mappings":";;;;;kBAOwBA,iB;;AAPxB;;AAEA;;AACA;;AACA;;AACA;;AAEe,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AAC5C,QAAIC,OAAO,0BAAWD,KAAKE,cAAL,CAAoB,MAApB,IAA8BF,KAAKC,IAAnC,GAA0C,EAArD,CAAX;AAAA,QAAqE;AACjEE,cAAUH,KAAKI,OAAL,IAAgBJ,KAAKI,OAAL,CAAaC,aAA7B,GAA6C,EAAEC,UAAU,EAAZ,EAAgBL,MAAMA,IAAtB,EAA7C,GAA4E,IAD1F;AAAA,QAEIM,kBAAkBC,yBAAuBC,IAAvB,CAA4BN,OAA5B,CAFtB;AAAA,QAE4D;AACxDO,uBAAmBC,0BAAwBF,IAAxB,CAA6BN,OAA7B,CAHvB;AAAA,QAG8D;AAC1DS,0BAAsB,uCAJ1B;AAAA,QAKIC,qBAAqBb,KAAKa,kBAL9B;AAAA,QAMIC,UAAU,0BAAWd,KAAKe,OAAL,KAAiB,KAA5B,CANd;AAAA,QAOIC,aAAa,uBAAUhB,KAAKiB,MAAf,CAPjB;AAAA,QAQIC,aAAa,KARjB;AAAA,QASIC,gBATJ;AAAA,QAUIF,MAVJ;;AAcA,aAASG,SAAT,GAAqB;AACjB,YAAIpB,KAAKqB,KAAL,IAAcH,UAAlB,EAA8B;AAC1B;AACH;;AAEDX,wBAAgB;AACZ,oBAAQ,QADI;AAEZ,0BAAc,MAFF;AAGZ,uBAAWM;AAHC,SAAhB,EAIGI,MAJH,CAIU;AACNK,sBAAU,kBAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC9B,oBAAID,GAAJ,EAAS;AACLE,4BAAQC,GAAR,CAAY,oBAAZ,EAAkCH,GAAlC;AACAtB,yBAAKsB,GAAL;AACA;AACH;AACDtB,qBAAKuB,OAAL;AACAN,6BAAa,IAAb;AACH;AATK,SAJV;AAeH;;AAED,QAAIlB,KAAK2B,QAAL,IAAiB,CAACf,oBAAoBZ,KAAK2B,QAAzB,CAAtB,EAA0D;AACtDF,gBAAQG,KAAR,CAAc,0BAAd,EAA0C5B,KAAK2B,QAA/C;AACA3B,aAAK2B,QAAL,GAAgB,2BAAhB;AACH;;AAEDR,uBAAmBT,iBAAiBV,KAAK6B,QAAL,IAAiB,EAAlC,CAAnB;;AAEA,QAAIb,UAAJ,EAAgB;AACZC,iBAASV,gBAAgBS,UAAhB,CAAT;AACH,KAFD,MAEO;AACHC,iBAAS,EAAEA,QAAQ,kBAAY,CAAG,CAAzB,EAAT;AACH;;AAED,QAAIjB,KAAKa,kBAAT,EAA6B;;AAEzB,YAAIA,mBAAmBiB,IAAnB,KAA4B,QAAhC,EAA0C;AAC1CL,oBAAQC,GAAR,2HACkE1B,IADlE;AAEIa,iCAAqBA,mBAAmBT,OAAxC;AACH;;AAED,YAAI,CAACJ,KAAK+B,QAAV,EAAoB;AAChBX;AACH;AACJ;;AAED,WAAO,qBAAMpB,IAAN,EAAY;AACfmB,0BAAkBA,gBADH;AAEfC,mBAAWA,SAFI;AAGfH,gBAAQA,MAHO;AAIfhB,cAAMA,IAJS;AAKfa,iBAASA,OALM;AAMfX,iBAAS;AANM,KAAZ,CAAP;AAQH","file":"templateViewModel.js","sourcesContent":["import { createViewModel as createViewModelUnbound,\n    createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory'\nimport { getRegisteredTemplates } from 'scalejs.mvvm'\nimport { cloneDeep } from 'lodash';\nimport { observable } from 'knockout';\nimport { merge } from 'scalejs';\n\nexport default function templateViewModel(node) {\n    var data = observable(node.hasOwnProperty('data') ? node.data : {}), // ability to override initial data\n        context = node.options && node.options.createContext ? { metadata: [], data: data } : this,\n        createViewModel = createViewModelUnbound.bind(context), // passes context\n        createViewModels = createViewModelsUnbound.bind(context), // passes context        \n        registeredTemplates = getRegisteredTemplates(),\n        dataSourceEndpoint = node.dataSourceEndpoint,\n        isShown = observable(node.visible !== false),\n        actionNode = cloneDeep(node.action),        \n        dataLoaded = false,\n        mappedChildNodes,\n        action;\n    \n\n\n    function fetchData() {\n        if (node.cache && dataLoaded) {\n            return;\n        }\n\n        createViewModel({\n            \"type\": \"action\",\n            \"actionType\": \"ajax\",\n            \"options\": dataSourceEndpoint\n        }).action({\n            callback: function (err, results) {\n                if (err) {\n                    console.log('ajax request error', err);\n                    data(err);\n                    return;\n                }\n                data(results);\n                dataLoaded = true;\n            }\n        });\n    }\n\n    if (node.template && !registeredTemplates[node.template]) {\n        console.error('Template not registered ', node.template);\n        node.template = 'metadata_default_template';\n    }\n\n    mappedChildNodes = createViewModels(node.children || []);\n\n    if (actionNode) {\n        action = createViewModel(actionNode);\n    } else {\n        action = { action: function () { } };\n    }\n\n    if (node.dataSourceEndpoint) {\n        \n        if (dataSourceEndpoint.type === 'action') {\n        console.log(`[templateVM] - template has been upgraded to \n            support \"options\" as a dataSourceEndpoint instead of action`, node);\n            dataSourceEndpoint = dataSourceEndpoint.options;\n        }\n\n        if (!node.lazyLoad) {\n            fetchData();\n        }\n    }\n\n    return merge(node, {\n        mappedChildNodes: mappedChildNodes,\n        fetchData: fetchData,\n        action: action,\n        data: data,\n        isShown: isShown,\n        context: this\n    });\n}\n"]}