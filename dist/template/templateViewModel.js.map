{"version":3,"sources":["../../src/template/templateViewModel.js"],"names":[],"mappings":";;;;;kBAOwB,iB;;AAPxB;;AAEA;;AACA;;AACA;;AACA;;AAEe,SAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC5C,QAAI,OAAO,0BAAW,KAAK,cAAL,CAAoB,MAApB,IAA8B,KAAK,IAAnC,GAA0C,EAArD,CAAX;AAAA,QAAqE;AACjE,cAAU,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,aAA7B,GAA6C,EAAE,UAAU,EAAZ,EAAgB,MAAM,IAAtB,EAA7C,GAA4E,IAD1F;AAAA,QAEI,kBAAkB,yBAAuB,IAAvB,CAA4B,OAA5B,CAFtB;AAAA,QAE4D;AACxD,uBAAmB,0BAAwB,IAAxB,CAA6B,OAA7B,CAHvB;AAAA,QAG8D;AAC1D,0BAAsB,uCAJ1B;AAAA,QAKI,qBAAqB,KAAK,kBAL9B;AAAA,QAMI,UAAU,0BAAW,KAAK,OAAL,KAAiB,KAA5B,CANd;AAAA,QAOI,aAAa,uBAAU,KAAK,MAAf,CAPjB;AAAA,QAQI,aAAa,KARjB;AAAA,QASI,gBATJ;AAAA,QAUI,MAVJ;;AAcA,aAAS,SAAT,GAAqB;AACjB,YAAI,KAAK,KAAL,IAAc,UAAlB,EAA8B;AAC1B;AACH;;AAED,wBAAgB;AACZ,oBAAQ,QADI;AAEZ,0BAAc,MAFF;AAGZ,uBAAW;AAHC,SAAhB,EAIG,MAJH,CAIU;AACN,sBAAU,kBAAU,GAAV,EAAe,OAAf,EAAwB;AAC9B,oBAAI,GAAJ,EAAS;AACL,4BAAQ,GAAR,CAAY,oBAAZ,EAAkC,GAAlC;AACA,yBAAK,GAAL;AACA;AACH;AACD,qBAAK,OAAL;AACA,6BAAa,IAAb;AACH;AATK,SAJV;AAeH;;AAED,QAAI,KAAK,QAAL,IAAiB,CAAC,oBAAoB,KAAK,QAAzB,CAAtB,EAA0D;AACtD,gBAAQ,KAAR,CAAc,0BAAd,EAA0C,KAAK,QAA/C;AACA,aAAK,QAAL,GAAgB,2BAAhB;AACH;;AAED,uBAAmB,iBAAiB,KAAK,QAAL,IAAiB,EAAlC,CAAnB;;AAEA,QAAI,UAAJ,EAAgB;AACZ,iBAAS,gBAAgB,UAAhB,CAAT;AACH,KAFD,MAEO;AACH,iBAAS,EAAE,QAAQ,kBAAY,CAAG,CAAzB,EAAT;AACH;;AAED,QAAI,KAAK,kBAAT,EAA6B;;AAEzB,YAAI,mBAAmB,IAAnB,KAA4B,QAAhC,EAA0C;AAC1C,oBAAQ,GAAR,2HACkE,IADlE;AAEI,iCAAqB,mBAAmB,OAAxC;AACH;;AAED,YAAI,CAAC,KAAK,QAAV,EAAoB;AAChB;AACH;AACJ;;AAED,WAAO,qBAAM,IAAN,EAAY;AACf,0BAAkB,gBADH;AAEf,mBAAW,SAFI;AAGf,gBAAQ,MAHO;AAIf,cAAM,IAJS;AAKf,iBAAS,OALM;AAMf,iBAAS;AANM,KAAZ,CAAP;AAQH","file":"templateViewModel.js","sourcesContent":["import { createViewModel as createViewModelUnbound,\n    createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory'\nimport { getRegisteredTemplates } from 'scalejs.mvvm'\nimport { cloneDeep } from 'lodash';\nimport { observable } from 'knockout';\nimport { merge } from 'scalejs';\n\nexport default function templateViewModel(node) {\n    var data = observable(node.hasOwnProperty('data') ? node.data : {}), // ability to override initial data\n        context = node.options && node.options.createContext ? { metadata: [], data: data } : this,\n        createViewModel = createViewModelUnbound.bind(context), // passes context\n        createViewModels = createViewModelsUnbound.bind(context), // passes context        \n        registeredTemplates = getRegisteredTemplates(),\n        dataSourceEndpoint = node.dataSourceEndpoint,\n        isShown = observable(node.visible !== false),\n        actionNode = cloneDeep(node.action),        \n        dataLoaded = false,\n        mappedChildNodes,\n        action;\n    \n\n\n    function fetchData() {\n        if (node.cache && dataLoaded) {\n            return;\n        }\n\n        createViewModel({\n            \"type\": \"action\",\n            \"actionType\": \"ajax\",\n            \"options\": dataSourceEndpoint\n        }).action({\n            callback: function (err, results) {\n                if (err) {\n                    console.log('ajax request error', err);\n                    data(err);\n                    return;\n                }\n                data(results);\n                dataLoaded = true;\n            }\n        });\n    }\n\n    if (node.template && !registeredTemplates[node.template]) {\n        console.error('Template not registered ', node.template);\n        node.template = 'metadata_default_template';\n    }\n\n    mappedChildNodes = createViewModels(node.children || []);\n\n    if (actionNode) {\n        action = createViewModel(actionNode);\n    } else {\n        action = { action: function () { } };\n    }\n\n    if (node.dataSourceEndpoint) {\n        \n        if (dataSourceEndpoint.type === 'action') {\n        console.log(`[templateVM] - template has been upgraded to \n            support \"options\" as a dataSourceEndpoint instead of action`, node);\n            dataSourceEndpoint = dataSourceEndpoint.options;\n        }\n\n        if (!node.lazyLoad) {\n            fetchData();\n        }\n    }\n\n    return merge(node, {\n        mappedChildNodes: mappedChildNodes,\n        fetchData: fetchData,\n        action: action,\n        data: data,\n        isShown: isShown,\n        context: this\n    });\n}\n"]}